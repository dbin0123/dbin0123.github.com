<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2024年04月11日 Manjaro安装</title>
      <link href="/2024/04/11/2024/202404/2024-04-11-Manjaro%E5%AE%89%E8%A3%85/"/>
      <url>/2024/04/11/2024/202404/2024-04-11-Manjaro%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h3 id="manjaro安装教程"><a href="#manjaro安装教程" class="headerlink" title="manjaro安装教程"></a>manjaro安装教程</h3><h4 id="系统下载安装"><a href="#系统下载安装" class="headerlink" title="系统下载安装"></a>系统下载安装</h4><ol><li><p>系统下载</p><p> <a href="https://manjaro.org/download/">manjaro下载地址</a><br> <a href="http://rufus.ie/downloads/">rufus工具</a></p></li><li><p>写入U盘（自行百度）</p></li><li><p>安装（自行百度）</p></li></ol><h4 id="基本环境安装"><a href="#基本环境安装" class="headerlink" title="基本环境安装"></a>基本环境安装</h4><ul><li><p>pacman-mirrors镜像源</p>  <figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 选择aliyun镜像</span><br>sudo pacman-mirrors -i -c China -m rank<br></code></pre></td></tr></table></figure></li><li><p>配置aur源</p><ol><li>使用nano工具编辑pacman.conf</li></ol>  <figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo nano /etc/pacman.conf<br></code></pre></td></tr></table></figure><ol start="2"><li>添加阿里云镜像</li></ol>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs conf"># 添加aliyun mirrors<br>[archlinuxcn]<br>#SigLevel = Optional TrustedOnly<br># 允许所有<br>SigLevel = Optional TrustAll<br>Server = https://mirrors.aliyun.com/archlinuxcn/$arch<br></code></pre></td></tr></table></figure><ol start="3"><li><p>更新系统</p> <figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo pacman -Syyu<br></code></pre></td></tr></table></figure></li></ol></li><li><p>安装和配置输入法(fcitx5)</p>  <figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo pacman -S fcitx5 fcitx5-chinese-addons fcitx5-gtk fcitx5-qt kcm-fcitx5<br></code></pre></td></tr></table></figure><p>  配置environment</p>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">sudo nano /etc/environment<br><br># 在文件末尾输入<br>GTK_IM_MODULE=fcitx<br>QT_IM_MODULE=fcitx<br>XMODIFIERS=@im=fcitx<br><br></code></pre></td></tr></table></figure></li></ul><h4 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h4><ul><li><p>安装主题（whitesur dark）</p><ol><li><p>通过主题商店安装</p><blockquote><p>系统设置-》外观-》获取新的全局主题-》搜索（whitesur dark）安装-》应用主图</p></blockquote></li><li><p>通过命令安装</p> <figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># clone 主题</span><br>git <span class="hljs-built_in">clone</span> https://github.com/vinceliuice/WhiteSur-kde.git<br><span class="hljs-comment"># install</span><br>sh install.sh<br><span class="hljs-comment"># uninstall</span><br>sh uninstall.sh<br></code></pre></td></tr></table></figure></li></ol></li><li><p>安装dock栏</p></li></ul><ol><li><p>通过应用商店安装</p><p> 安装：添加&#x2F;删除软件-》搜索(plank)-》安装<br> 启动：安装完成-》启动<br> 设置开机启动：系统设置-》开机与关机-&gt;自动启动-》添加（添加应用程序）-》Plank<br> 设置入口（鼠标发到durk上面 按住Ctrl+鼠标右键）首选项</p></li><li><p>通过命令安装</p> <figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo pacman -S plank<br></code></pre></td></tr></table></figure></li></ol><h4 id="其他软件安装问题"><a href="#其他软件安装问题" class="headerlink" title="其他软件安装问题"></a>其他软件安装问题</h4><ul><li><p>idea输入法光标不跟随问题</p><ul><li>2023.3.2之前的版本(不建议), 建议升级IDEA</li></ul><ol><li>下载idea的java运行时</li></ol><p>  <a href="https://hub.nuaa.cf/RikudouPatrickstar/JetBrainsRuntime-for-Linux-x64">JetBrainsRuntime-for-Linux-x64</a></p><ol start="2"><li>修改idea.sh（在文件前加入）</li></ol>  <figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># ---------------------------------------------------------------------</span><br><span class="hljs-comment"># IntelliJ IDEA startup script.</span><br><span class="hljs-comment"># ---------------------------------------------------------------------</span><br><br><span class="hljs-comment"># export IDEA_JDK=下载idea的java运行时</span><br><span class="hljs-built_in">export</span> IDEA_JDK=/data/idea/jbr_jcef-17.0.6-linux-x64-b829.5/<br></code></pre></td></tr></table></figure><ul><li>2023.3.2（含）之后的版本更换Java运行时</li></ul><p>  <a href="https://github.com/JetBrains/JetBrainsRuntime/issues/67">The input of Linux Fcitx displays abnormally</a></p><blockquote><p>idea界面》 两次shift 》 输入 runtime 》 选择更换runtime<br>  选择（jbr17.1087.9 含）之后的版本</p></blockquote></li><li><p>ked卡顿</p><p>  kde卡顿， 界面不刷新</p>  <figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">systemctl --user restart plasma-kwin_x11<br></code></pre></td></tr></table></figure></li></ul><p>参考<br>【1】：<a href="https://www.bilibili.com/read/cv11020041/">https://www.bilibili.com/read/cv11020041/</a></p>]]></content>
      
      
      <categories>
          
          <category> Manjaro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Manjaro， Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年11月13日 智能指针(Box,Rc,RefCell)</title>
      <link href="/2023/11/13/2023/202311/2023-10-23.%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88(Box,Rc,RefCell)/"/>
      <url>/2023/11/13/2023/202311/2023-10-23.%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88(Box,Rc,RefCell)/</url>
      
        <content type="html"><![CDATA[<h2 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h2><blockquote><p>指针是一个包含内存地址的变量，引用就是一种最常见的指针，使用<code>&amp;</code>操作符和<code>&amp;mut</code>操作符来创建，形如<code>&amp;T</code>和<code>&amp;mut T</code>。</p></blockquote><blockquote><p><b style='color:red;'>智能指针实际上是一种结构体</b>。它的行为类似指针，是对指针的一层封装，可以拥有元数据，并提供了额外的功能，比如自动释放堆内存。</p></blockquote><blockquote><p>智能指针和引用的主要区别是</p></blockquote><ul><li><p>引用是一类只借用数据的指针，而智能指针在大部分情况下拥有指向的数据的所有权。</p></li><li><p>智能指针区别于普通结构体的特性在于，它实现了Deref trait和Drop trait，使自身拥有了类似指针的行为。</p></li></ul><p><em>注释: Deref trait提供了解引用的功能，使智能指针可以当作引用处理。使用引用的代码适用于智能指针。Drop trait提供了自动析构的功能。当智能指针离开作用域时，Drop trait允许自定义处理逻辑。</em></p><table><thead><tr><th>智能指针</th><th>是否独占使用权</th><th>作用与使用</th></tr></thead><tbody><tr><td>Box&lt;T&gt;</td><td>√</td><td>Box&lt;T&gt;是独占所有权的智能指针，使用Box::new函数可以在堆上存储一个值，并把指向堆上数据的指针存放在栈上。</td></tr><tr><td>Rc&lt;T&gt;</td><td>×</td><td>Rc&lt;T&gt; 引用计数器, 共享所有权</td></tr><tr><td>RefCell&lt;T&gt;</td><td>—</td><td></td></tr></tbody></table><h3 id="1-Box"><a href="#1-Box" class="headerlink" title="1. Box&lt;T&gt;"></a>1. Box&lt;T&gt;</h3><blockquote><p>Box&lt;T&gt;是独占所有权的智能指针，使用Box::new函数可以在堆上存储一个值，并把指向堆上数据的指针存放在栈上。 </p></blockquote><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">5</span>);<br>    <span class="hljs-comment">// let y = x;</span><br>    <span class="hljs-comment">//通过解引用操作符获取变量x所指向的i32类型的值，将该值按位复制后赋值给变量y，再次调用x就不会报错了。</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = *x;<br>    <span class="hljs-comment">// //报错 borrow of moved value: `x`</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;x:&#123;&#125;&quot;</span>, x);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;y:&#123;&#125;&quot;</span>, y);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>解决嵌套问题</p></blockquote><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Set</span> &#123;<br>    <span class="hljs-title function_ invoke__">Tree</span>(<span class="hljs-type">i32</span>, <span class="hljs-type">Box</span>&lt;Set&gt;),<br>    Nil,<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">use</span> Set::Tree;<br>    <span class="hljs-keyword">use</span> Set::Nil;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">f</span> = <span class="hljs-title function_ invoke__">Tree</span>(<span class="hljs-number">10</span>, <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-title function_ invoke__">Tree</span>(<span class="hljs-number">9</span>, <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(Nil))));<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, f)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Deref解引用"><a href="#Deref解引用" class="headerlink" title="Deref解引用"></a>Deref解引用</h4><blockquote><p>通过解引用操作符可以把实现了Deref trait的智能指针当作引用来对待。</p></blockquote><blockquote><p>解引用操作符 <span style="color:red;">*</span></p></blockquote><p>打印指针的值 <strong>{:p}</strong></p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>()&#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;指针内存值:&#123;:p&#125;&quot;</span>, x);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;指针Deref值:&#123;&#125;&quot;</span>, x);<br>&#125;<br><br><span class="hljs-comment">//指针内存值:0x18652a6cb90</span><br><span class="hljs-comment">//指针Deref值:10</span><br></code></pre></td></tr></table></figure><h4 id="Drop清理资源"><a href="#Drop清理资源" class="headerlink" title="Drop清理资源"></a>Drop清理资源</h4><blockquote><p>Drop trait的作用, 当值离开作用域时，自动执行一些重要的清理工作.</p></blockquote><p>示例</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">User</span> &#123;<br>    user_name: <span class="hljs-type">String</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Drop</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">drop</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;drop方法运行....&#123;:?&#125;&quot;</span>, <span class="hljs-keyword">self</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(user_name: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> User &#123;<br>        User &#123;<br>            user_name: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(user_name),<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">user1</span> = <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(User::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;张三&quot;</span>));<br>    &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">user2</span> = <span class="hljs-type">Box</span>::<span class="hljs-title function_ invoke__">new</span>(User::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-string">&quot;李四&quot;</span>));<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;内部作用域...&#123;&#125;&quot;</span>, user2.user_name)<br>    &#125;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;外部作用域...&#123;&#125;&quot;</span>, user1.user_name)<br>&#125;<br><br><br><span class="hljs-comment">//运行结果</span><br><span class="hljs-comment">// 内部作用域...李四</span><br><span class="hljs-comment">// drop方法运行....User &#123; user_name: &quot;李四&quot; &#125;</span><br><span class="hljs-comment">// 外部作用域...张三</span><br><span class="hljs-comment">// drop方法运行....User &#123; user_name: &quot;张三&quot; &#125;</span><br></code></pre></td></tr></table></figure><h3 id="2-Rc"><a href="#2-Rc" class="headerlink" title="2. Rc&lt;T&gt;"></a>2. Rc&lt;T&gt;</h3><blockquote><p>Rc&lt;T&gt;允许一个值有多个所有者，引用计数确保了只要还存在所有者，该值就保持有效。每当值共享一个所有权时，计数就会增加一次。只有当计数为零，也就是当所有共享变量离开作用域时，该变量才会被析构。</p></blockquote><blockquote><p><code>Rc&lt;T&gt;</code>用于希望堆上分配的数据可以供程序的多个部分读取，并且无法在编译时确定哪个部分是最后使用者的场景。</p></blockquote><blockquote><p><code>Rc&lt;T&gt;是单线程引用计数指针，不是线程安全的类型，不允许将引用计数传递或共享给别的线程。</code></p></blockquote><h4 id="相关方法"><a href="#相关方法" class="headerlink" title="相关方法"></a>相关方法</h4><ul><li>Rc::new() 创建一个引用计数器;</li><li>Rc::clone() 克隆对象, 与 x.clone()等价</li><li>Rc::strong_count() 查询对象被引用次数</li></ul><p>示例</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::rc::Rc;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = Rc::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">5</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = x.<span class="hljs-title function_ invoke__">clone</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">z</span> = Rc::<span class="hljs-title function_ invoke__">clone</span>(&amp;x);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;x引用次数:&#123;&#125;&quot;</span>, Rc::<span class="hljs-title function_ invoke__">strong_count</span>(&amp;x));<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;y引用次数:&#123;&#125;&quot;</span>, Rc::<span class="hljs-title function_ invoke__">strong_count</span>(&amp;y));<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;z引用次数:&#123;&#125;&quot;</span>, Rc::<span class="hljs-title function_ invoke__">strong_count</span>(&amp;z));<br>&#125;<br><br><span class="hljs-comment">// x引用次数:3</span><br><span class="hljs-comment">// y引用次数:3</span><br><span class="hljs-comment">// z引用次数:3</span><br></code></pre></td></tr></table></figure><h3 id="3-RefCell"><a href="#3-RefCell" class="headerlink" title="3. RefCell&lt;T&gt;"></a>3. RefCell&lt;T&gt;</h3>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
          <category> 智能指针 </category>
          
          <category> Box </category>
          
          <category> Rc </category>
          
          <category> RefCell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> 智能指针 </tag>
            
            <tag> Box&lt;T&gt; </tag>
            
            <tag> Rc&lt;T&gt; </tag>
            
            <tag> RefCell&lt;T&gt; </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年10月23日 Cargo与crates.io</title>
      <link href="/2023/10/23/2023/202310/2023-10-23.Cargo/"/>
      <url>/2023/10/23/2023/202310/2023-10-23.Cargo/</url>
      
        <content type="html"><![CDATA[<h2 id="Cargo与crates-io"><a href="#Cargo与crates-io" class="headerlink" title="Cargo与crates.io"></a>Cargo与crates.io</h2><h3 id="1-通过release-profile-来自定义构建"><a href="#1-通过release-profile-来自定义构建" class="headerlink" title="1. 通过release profile 来自定义构建"></a>1. 通过release profile 来自定义构建</h3><blockquote><p>release profile 发布配置</p></blockquote><p>Rust中的发布配置 （release profile）是一系列预定义好的配置方案，它们的配置选项各有不同，但都允许程序员对细节进行定制修改。这些配置方案使得程序员可以更好地来控制各种编译参数。另外，每一套配置都是相互独立的。</p><p>Cargo最常用的配置有两种：执行cargo build时使用的dev配置，以及执行cargo build –release时使用的release配置。dev配置中的默认选项适合在开发过程中使用，而release配置中的默认选项则适合在正式发布时使用。</p><ol><li>运行cargo build</li></ol><figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">PS D:\delelop\rust_1.<span class="hljs-number">72</span>.<span class="hljs-number">1</span>\workspace\hello_cargo&gt; cargo build<br><span class="hljs-function">warning: <span class="hljs-title">unused</span> <span class="hljs-title">manifest</span> <span class="hljs-title">key</span>: <span class="hljs-title">profile.release.rand</span></span><br><span class="hljs-function">    <span class="hljs-title">Finished</span> <span class="hljs-title">dev</span> [<span class="hljs-title">unoptimized</span> + <span class="hljs-title">debuginfo</span>] <span class="hljs-title">target</span>(<span class="hljs-title">s</span>) <span class="hljs-title">in</span> 0.03<span class="hljs-title">s</span></span><br></code></pre></td></tr></table></figure><ol start="2"><li>运行cargo build –release</li></ol><figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">PS D:\delelop\rust_1.<span class="hljs-number">72</span>.<span class="hljs-number">1</span>\workspace\hello_cargo&gt; cargo build --release<br><span class="hljs-function">warning: <span class="hljs-title">unused</span> <span class="hljs-title">manifest</span> <span class="hljs-title">key</span>: <span class="hljs-title">profile.release.rand</span></span><br><span class="hljs-function">   <span class="hljs-title">Compiling</span> <span class="hljs-title">cfg</span>-<span class="hljs-title">if</span> <span class="hljs-title">v1</span>.0.0</span><br><span class="hljs-function">   <span class="hljs-title">Compiling</span> <span class="hljs-title">ppv</span>-<span class="hljs-title">lite86</span> <span class="hljs-title">v0</span>.2.17</span><br><span class="hljs-function">   <span class="hljs-title">Compiling</span> <span class="hljs-title">unicode</span>-<span class="hljs-title">segmentation</span> <span class="hljs-title">v1</span>.10.1</span><br><span class="hljs-function">   <span class="hljs-title">Compiling</span> <span class="hljs-title">getrandom</span> <span class="hljs-title">v0</span>.2.9</span><br><span class="hljs-function">   <span class="hljs-title">Compiling</span> <span class="hljs-title">rand_core</span> <span class="hljs-title">v0</span>.6.4</span><br><span class="hljs-function">   <span class="hljs-title">Compiling</span> <span class="hljs-title">rand_chacha</span> <span class="hljs-title">v0</span>.3.1</span><br><span class="hljs-function">   <span class="hljs-title">Compiling</span> <span class="hljs-title">rand</span> <span class="hljs-title">v0</span>.8.5</span><br><span class="hljs-function">   <span class="hljs-title">Compiling</span> <span class="hljs-title">hello_cargo</span> <span class="hljs-title">v0</span>.1.0 (<span class="hljs-title">D</span>:\<span class="hljs-title">delelop</span>\<span class="hljs-title">rust_1</span>.72.1\<span class="hljs-title">workspace</span>\<span class="hljs-title">hello_cargo</span>)</span><br><span class="hljs-function">    <span class="hljs-title">Finished</span> <span class="hljs-title">release</span> [<span class="hljs-title">optimized</span>] <span class="hljs-title">target</span>(<span class="hljs-title">s</span>) <span class="hljs-title">in</span> 4.35<span class="hljs-title">s</span></span><br><span class="hljs-function"><span class="hljs-title">PS</span> <span class="hljs-title">D</span>:\<span class="hljs-title">delelop</span>\<span class="hljs-title">rust_1</span>.72.1\<span class="hljs-title">workspace</span>\<span class="hljs-title">hello_cargo</span>&gt;  </span><br></code></pre></td></tr></table></figure><figure class="highlight toml"><table><tr><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[package]</span><br><span class="hljs-attr">name</span> = <span class="hljs-string">&quot;hello_cargo&quot;</span><br><span class="hljs-attr">version</span> = <span class="hljs-string">&quot;0.1.0&quot;</span><br><span class="hljs-attr">authors</span> = [<span class="hljs-string">&quot;xxx@mail.com&quot;</span>]<br><span class="hljs-attr">edition</span> = <span class="hljs-string">&quot;2021&quot;</span><br><br><span class="hljs-comment"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span><br><br><span class="hljs-section">[dependencies]</span><br><span class="hljs-comment"># 导入rand包(https://crates.io/crates/rand)</span><br><span class="hljs-attr">rand</span> = <span class="hljs-string">&quot;0.8.4&quot;</span><br><span class="hljs-attr">unicode-segmentation</span> = <span class="hljs-string">&quot;1.8.0&quot;</span><br><br><span class="hljs-section">[profile.dev]</span><br><span class="hljs-attr">opt-level</span> = <span class="hljs-number">0</span><br><br><span class="hljs-comment"># 生产环境</span><br><span class="hljs-section">[profile.release]</span><br><span class="hljs-attr">opt-level</span> = <span class="hljs-number">3</span><br><span class="hljs-attr">panic</span> = <span class="hljs-string">&#x27;abort&#x27;</span><br><span class="hljs-attr">rand</span> = <span class="hljs-string">&quot;0.5.5&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>选项 <strong>opt-level</strong> 决定了Rust在编译时会对代码执行何种程度的优化，从0到3都是合法的配置值。越高级的优化需要消耗越多的编译时间</p></blockquote><h3 id="2-在crates-io上发布自己的库"><a href="#2-在crates-io上发布自己的库" class="headerlink" title="2. 在crates.io上发布自己的库"></a>2. 在crates.io上发布自己的库</h3><h4 id="发布新包"><a href="#发布新包" class="headerlink" title="发布新包"></a>发布新包</h4><ol><li>创建crates.io账户,并获取API令牌</li><li>设置登录令牌</li></ol><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">cargo login 令牌<br></code></pre></td></tr></table></figure><ol start="3"><li>为包添加元数据(即name, license , description)等配置</li></ol><figure class="highlight toml"><table><tr><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[package]</span><br><span class="hljs-attr">name</span> = <span class="hljs-string">&quot;包名称&quot;</span><br><span class="hljs-attr">version</span> = <span class="hljs-string">&quot;0.1.0&quot;</span><br><span class="hljs-attr">authors</span> = [<span class="hljs-string">&quot;Your Name &lt;you@example.com&gt;&quot;</span>]<br><span class="hljs-attr">edition</span> = <span class="hljs-string">&quot;2018&quot;</span><br><span class="hljs-attr">description</span> = <span class="hljs-string">&quot;A fun game where you guess what number the computer has chosen.&quot;</span><br><span class="hljs-attr">license</span> = <span class="hljs-string">&quot;MIT OR Apache-2.0&quot;</span><br></code></pre></td></tr></table></figure><ol start="4"><li>发布到crates.io</li></ol><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">cargo publish<br></code></pre></td></tr></table></figure><h4 id="发布更新包"><a href="#发布更新包" class="headerlink" title="发布更新包"></a>发布更新包</h4><p>为了在修改代码后发布新的版本，我们需要修改Cargo.toml 文件中的version字段并重新发布。你应当根据语义化版本规则来基于修改的内容决定下一个合理的版本号，然后执行cargo publish上传新的版本。</p><h4 id="使用cargo-yank命令从cargo-io上移除版本"><a href="#使用cargo-yank命令从cargo-io上移除版本" class="headerlink" title="使用cargo yank命令从cargo.io上移除版本"></a>使用cargo yank命令从cargo.io上移除版本</h4><p>尽管你不能移除某一个老版本的包，但我们仍然可以阻止未来的新项目将它们引用为依赖。这在包的版本因为异常问题而损坏时十分有用。对于此类场景，Cargo支持撤回（yank）某个特定版本。</p><p>撤回版本会阻止新的项目来依赖这个版本的包，但对于现存的那些依赖于当前版本的项目则依旧能够下载和依赖它。更具体地说，所有已经产生Cargo.lock 的项目将不会受到撤回操作的影响，而未来所有产生的新Cargo.lock 文件将不会再使用已经撤回的版本。</p><p>运行cargo yank时，指定对应版本号即可撤回指定版本：</p><blockquote><p>cargo yank –vers 版本号</p></blockquote><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">cargo yank --vers 1.0.1<br></code></pre></td></tr></table></figure><blockquote><p>撤回yank操作</p></blockquote><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">cargo yank --vers 1.0.1 --undo<br></code></pre></td></tr></table></figure><h4 id="使用pub-use导出方便使用的公共API"><a href="#使用pub-use导出方便使用的公共API" class="headerlink" title="使用pub use导出方便使用的公共API"></a>使用pub use导出方便使用的公共API</h4><h4 id="文档注释-文档注释章节"><a href="#文档注释-文档注释章节" class="headerlink" title="文档注释(文档注释章节)"></a>文档注释(<a href="https://blog.aiwiown.com/2023/05/10/2023/202305/2023-05-10-%E6%B3%A8%E9%87%8A/">文档注释章节</a>)</h4><h3 id="3-通过workspace组织大工程"><a href="#3-通过workspace组织大工程" class="headerlink" title="3. 通过workspace组织大工程"></a>3. 通过workspace组织大工程</h3><h3 id="4-从crates-io上安装库"><a href="#4-从crates-io上安装库" class="headerlink" title="4. 从crates.io上安装库"></a>4. 从crates.io上安装库</h3><p>cargo install命令使我们可以在自己的计算机设备中安装和使用二进制包。但需要注意的是，它不能被用来替换操作系统的包管理器。这一命令只是为了便于Rust开发者们获得其他人在crates.io上分享的工具。另外，你只能安装那些带有二进制目标（binary target）的包。二进制目标其实就是一段可执行的程序，它们只有在包内存在src&#x2F;main.rs 或其他被指定为二进制入口的文件时才会生成。这个概念和库目标（library target）相对应，库目标本身无法单独执行但非常适合被包含在其他程序中。大部分的包都会在README 文件中说明自己是否拥有库目标，是否拥有二进制目标，又或者是否两者皆有。</p><p>所有通过cargo install命令安装的二进制文件都会被存储在Rust安装根目录下的bin 文件夹中。假如你在安装Rust的过程中使用了rustup且没有指定任何自定义配置，那么bin 的路径就是$HOME&#x2F;.cargo&#x2F;bin 。为了能够直接运行cargo install安装的工具程序，我们需要将该路径添加到环境变量$PATH中。</p><p>例如，我们在第12章曾经提到过一个用Rust实现的grep工具ripgrep（用于搜索文件的工具）。</p><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">cargo install ripgrep<br></code></pre></td></tr></table></figure><h3 id="5-通过自定义的命令来扩展cargo"><a href="#5-通过自定义的命令来扩展cargo" class="headerlink" title="5. 通过自定义的命令来扩展cargo"></a>5. 通过自定义的命令来扩展cargo</h3>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
          <category> Cargo(crates.io) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Cargo </tag>
            
            <tag> crates.io </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年09月10日 Rust 练习(minigrop程序)</title>
      <link href="/2023/09/10/2023/202309/2023-09-10.%E7%BB%83%E4%B9%A0(minigrop%E7%A8%8B%E5%BA%8F)%20copy/"/>
      <url>/2023/09/10/2023/202309/2023-09-10.%E7%BB%83%E4%B9%A0(minigrop%E7%A8%8B%E5%BA%8F)%20copy/</url>
      
        <content type="html"><![CDATA[<h2 id="minigrop程序"><a href="#minigrop程序" class="headerlink" title="minigrop程序"></a>minigrop程序</h2><ul><li>创建项目</li></ul><figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">cargo new minigrep<br></code></pre></td></tr></table></figure><ul><li>main.rs</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::&#123;env, process&#125;;<br><br><span class="hljs-keyword">use</span> minigrep::&#123;run, Config&#125;;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">//读取命令行参数 //去取非法字符使用env::args_os()-&gt;OsString</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">args</span>: <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">String</span>&gt; = env::<span class="hljs-title function_ invoke__">args</span>().<span class="hljs-title function_ invoke__">collect</span>();<br>    <br>    <span class="hljs-comment">//提取参数</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">config</span> = Config::<span class="hljs-title function_ invoke__">new</span>(&amp;args).<span class="hljs-title function_ invoke__">unwrap_or_else</span>(|error| &#123;<br>        eprintln!(<span class="hljs-string">&quot;程序运行错误:&#123;&#125;&quot;</span>, error);<br>        <span class="hljs-comment">//结束进程</span><br>        process::<span class="hljs-title function_ invoke__">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;);<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Err</span>(e) = <span class="hljs-title function_ invoke__">run</span>(config) &#123;<br>        eprintln!(<span class="hljs-string">&quot;运行错误:&#123;&#125;&quot;</span>, e);<br>        <span class="hljs-comment">//结束进程</span><br>        process::<span class="hljs-title function_ invoke__">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>lib.rs</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::&#123;env, error::Error, fs&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 读取文件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">run</span>(config: Config) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;(), <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> Error&gt;&gt; &#123;<br>    <span class="hljs-comment">//读取文件</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">contents</span> = fs::<span class="hljs-title function_ invoke__">read_to_string</span>(config.filename)?;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">results</span> = <span class="hljs-keyword">if</span> config.case_sensitive &#123;<br>        <span class="hljs-title function_ invoke__">search</span>(&amp;config.query, &amp;contents)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_ invoke__">search_case_insensitive</span>(&amp;config.query, &amp;contents)<br>    &#125;;<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">line</span> <span class="hljs-keyword">in</span> results &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, line);<br>    &#125;<br>    <span class="hljs-title function_ invoke__">Ok</span>(())<br>&#125;<br><br><span class="hljs-meta">#[derive(Default)]</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Config</span> &#123;<br>    <span class="hljs-keyword">pub</span> query: <span class="hljs-type">String</span>,<br>    <span class="hljs-keyword">pub</span> filename: <span class="hljs-type">String</span>,<br>    <span class="hljs-keyword">pub</span> case_sensitive: <span class="hljs-type">bool</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Config</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解析命令行参数-返回配置对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(args: &amp;[<span class="hljs-type">String</span>]) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;Config, &amp;<span class="hljs-symbol">&#x27;static</span> <span class="hljs-type">str</span>&gt; &#123;<br>        <span class="hljs-keyword">if</span> args.<span class="hljs-title function_ invoke__">len</span>() &lt; <span class="hljs-number">3</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">Err</span>(<span class="hljs-string">&quot;参数不合法&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">query</span> = args.<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_ invoke__">expect</span>(<span class="hljs-string">&quot;请输入需要查找的字符串.&quot;</span>);<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">filename</span> = args.<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-number">2</span>).<span class="hljs-title function_ invoke__">expect</span>(<span class="hljs-string">&quot;请输入需要查找的文件.&quot;</span>);<br>        <span class="hljs-comment">//获取环境变量, is_err判断是否存在 存在返回true, 不存在返回false</span><br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">case_sensitive</span> = env::<span class="hljs-title function_ invoke__">var</span>(<span class="hljs-string">&quot;CASE_INSENSITIVE&quot;</span>).<span class="hljs-title function_ invoke__">is_err</span>();<br>        <span class="hljs-title function_ invoke__">Ok</span>(Config &#123;<br>            query: query.<span class="hljs-title function_ invoke__">to_string</span>(),<br>            filename: filename.<span class="hljs-title function_ invoke__">to_string</span>(),<br>            case_sensitive: case_sensitive,<br>        &#125;)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">search</span>&lt;<span class="hljs-symbol">&#x27;a</span>&gt;(query: &amp;<span class="hljs-type">str</span>, contents: &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">String</span>&gt; &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">lines</span> = contents.<span class="hljs-title function_ invoke__">lines</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">datas</span> = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">new</span>();<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">enums</span> = lines.<span class="hljs-title function_ invoke__">enumerate</span>();<br>    <span class="hljs-title function_ invoke__">for</span> (index, line) <span class="hljs-keyword">in</span> enums &#123;<br>        <span class="hljs-keyword">if</span> line.<span class="hljs-title function_ invoke__">contains</span>(query) &#123;<br>            datas.<span class="hljs-title function_ invoke__">push</span>(<span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;行数:&#123;&#125; 数据:&#123;&#125;&quot;</span>, index + <span class="hljs-number">1</span>, line));<br>        &#125;<br>    &#125;<br>    datas<br>&#125;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">search_case_insensitive</span>&lt;<span class="hljs-symbol">&#x27;a</span>&gt;(query: &amp;<span class="hljs-type">str</span>, contents: &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">String</span>&gt; &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">lines</span> = contents.<span class="hljs-title function_ invoke__">lines</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">enums</span> = lines.<span class="hljs-title function_ invoke__">enumerate</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">query</span> = query.<span class="hljs-title function_ invoke__">to_lowercase</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">datas</span> = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">new</span>();<br>    <span class="hljs-title function_ invoke__">for</span> (index, line) <span class="hljs-keyword">in</span> enums &#123;<br>        <span class="hljs-keyword">if</span> line.<span class="hljs-title function_ invoke__">to_lowercase</span>().<span class="hljs-title function_ invoke__">contains</span>(&amp;query) &#123;<br>            datas.<span class="hljs-title function_ invoke__">push</span>(<span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;行数:&#123;&#125; 数据:&#123;&#125;&quot;</span>, index + <span class="hljs-number">1</span>, line));<br>        &#125;<br>    &#125;<br>    datas<br>&#125;<br><br><span class="hljs-meta">#[cfg(test)]</span><br><span class="hljs-keyword">mod</span> tests &#123;<br>    <span class="hljs-keyword">use</span> super::*;<br><br>    <span class="hljs-meta">#[test]</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">case_sensitive</span>() &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">query</span> = <span class="hljs-string">&quot;safe&quot;</span>;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">cont</span> = <span class="hljs-string">&quot;\</span><br><span class="hljs-string">rust:</span><br><span class="hljs-string">safe, fast, productive</span><br><span class="hljs-string">Pick three&quot;</span>;<br>        <span class="hljs-built_in">assert_eq!</span>(<span class="hljs-built_in">vec!</span>[<span class="hljs-string">&quot;safe, fast, productive&quot;</span>], <span class="hljs-title function_ invoke__">search</span>(query, cont))<br>    &#125;<br><br>    <span class="hljs-meta">#[test]</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">case_insensitive</span>() &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">query</span> = <span class="hljs-string">&quot;pick&quot;</span>;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">cont</span> = <span class="hljs-string">&quot;\</span><br><span class="hljs-string">rust:</span><br><span class="hljs-string">safe, fast, productive pick</span><br><span class="hljs-string">Pick three&quot;</span>;<br>        <span class="hljs-built_in">assert_eq!</span>(<br>            <span class="hljs-built_in">vec!</span>[<span class="hljs-string">&quot;safe, fast, productive pick&quot;</span>, <span class="hljs-string">&quot;Pick three&quot;</span>],<br>            <span class="hljs-title function_ invoke__">search_case_insensitive</span>(query, cont)<br>        )<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
          <category> 练习minigrop程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> 文件 </tag>
            
            <tag> 环境变量 </tag>
            
            <tag> 命令行参数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年09月25日 闭包(closure)</title>
      <link href="/2023/09/10/2023/202309/2023-09-25.%E9%97%AD%E5%8C%85/"/>
      <url>/2023/09/10/2023/202309/2023-09-25.%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h2 id="闭包-closure"><a href="#闭包-closure" class="headerlink" title="闭包(closure)"></a>闭包(closure)</h2><blockquote><p>可以捕获其所在环境的匿名函数</p></blockquote><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>是匿名函数;</li><li>可以保存为变量,可以作为函数,方法的参数;</li><li>可以在一个地方创建闭包,然后再另一个上下文中调用闭包来完成运算;</li><li>可以从其定义的作用域捕获值;</li></ol><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust">|参数<span class="hljs-number">1</span>:类型, 参数<span class="hljs-number">2</span>:类型,...| <span class="hljs-punctuation">-&gt;</span> 返回值类型 &#123;<br>    方法体<br>&#125;<br></code></pre></td></tr></table></figure><p>示例</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">//定义闭包</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">closure</span> = |num: <span class="hljs-type">i32</span>| &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, num);<br>    &#125;;<br>    <span class="hljs-comment">//调用闭包</span><br>    <span class="hljs-title function_ invoke__">closure</span>(<span class="hljs-number">123</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="闭包类型推断和标注"><a href="#闭包类型推断和标注" class="headerlink" title="闭包类型推断和标注"></a>闭包类型推断和标注</h3><ul><li>闭包类型推断</li></ul><p>闭包不要求标注参数和返回值的类型, 一般编译器可以推断;</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">closure</span> = |num: <span class="hljs-type">i32</span>| &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, num);<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>闭包的定义最终只会为参数&#x2F;返回值推断出唯一的具体类型,也就是说一旦推断入参为i32, 出参为 i32; 入参传入u64,返回 u64编译器会报错;</p></blockquote><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::&#123;thread, time::Duration&#125;;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">closure</span> = |num: <span class="hljs-type">i32</span>| &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, num);<br>        num<br>    &#125;;<br><br>    <span class="hljs-title function_ invoke__">closure</span>(<span class="hljs-number">123</span>); <br>    <span class="hljs-title function_ invoke__">closure</span>(<span class="hljs-number">123u64</span>);<br>&#125;<br><br><span class="hljs-comment">//  --&gt; src\main.rs:10:13</span><br><span class="hljs-comment">//   |</span><br><span class="hljs-comment">// 9 |     closure(123u64);</span><br><span class="hljs-comment">//   |     ------- ^^^^^^ expected `i32`, found `u64`</span><br><span class="hljs-comment">//   |     |</span><br><span class="hljs-comment">//   |     arguments to this function are incorrect</span><br></code></pre></td></tr></table></figure><h3 id="使用泛型参数和Fn-Trait类储存闭包"><a href="#使用泛型参数和Fn-Trait类储存闭包" class="headerlink" title="使用泛型参数和Fn Trait类储存闭包"></a>使用泛型参数和Fn Trait类储存闭包</h3><blockquote><p>每一个闭包实例都有它自己的匿名类型。换句话说，即便两个闭包拥有完全相同的签名，它们的类型也被认为是不一样的.</p></blockquote><blockquote><p>标准库中提供了一系列Fn trait，而所有的闭包都至少实现了Fn、FnMut及FnOnce中的一个trait</p></blockquote><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::&#123;thread, time::Duration, collections::HashMap&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Cache</span>&lt;T&gt;<br><span class="hljs-keyword">where</span><br>    T: <span class="hljs-title function_ invoke__">Fn</span>(<span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span>,<br>&#123;<br>    calculation: T,<br>    value: HashMap&lt;<span class="hljs-type">i32</span>,<span class="hljs-type">i32</span>&gt;,<br>&#125;<br><br><span class="hljs-keyword">impl</span>&lt;T&gt; Cache&lt;T&gt;<br><span class="hljs-keyword">where</span><br>    T: <span class="hljs-title function_ invoke__">Fn</span>(<span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span>,<br>&#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(num: T) <span class="hljs-punctuation">-&gt;</span> Cache&lt;T&gt; &#123;<br>        Cache &#123;<br>            calculation: num,<br>            value: HashMap::<span class="hljs-title function_ invoke__">new</span>(),<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">value</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>, arg: <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span> &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">map</span> = &amp;<span class="hljs-keyword">self</span>.value;<br><br>        <span class="hljs-keyword">if</span> map.<span class="hljs-title function_ invoke__">contains_key</span>(&amp;arg)&#123;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-title function_ invoke__">map</span>(&amp;arg).<span class="hljs-title function_ invoke__">unwrap</span>();<br>            <span class="hljs-keyword">return</span> v.<span class="hljs-title function_ invoke__">clone</span>()<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = (<span class="hljs-keyword">self</span>.calculation)(arg);<br>            <span class="hljs-keyword">self</span>.value.<span class="hljs-title function_ invoke__">insert</span>(arg, v);<br>            <span class="hljs-keyword">return</span> v;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">simulated_user_specified_value</span> = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">simulated_random_number</span> = <span class="hljs-number">7</span>;<br>    <span class="hljs-title function_ invoke__">generate_workout</span>(simulated_user_specified_value, simulated_random_number);<br>    <span class="hljs-title function_ invoke__">generate_workout</span>(<span class="hljs-number">30</span>, <span class="hljs-number">7</span>);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">generate_workout</span>(intensity: <span class="hljs-type">i32</span>, random_number: <span class="hljs-type">i32</span>) &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">cache_temp</span> = Cache::<span class="hljs-title function_ invoke__">new</span>(|num| &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;calculating slowly...&quot;</span>);<br>        <span class="hljs-comment">//睡眠2秒</span><br>        thread::<span class="hljs-title function_ invoke__">sleep</span>(Duration::<span class="hljs-title function_ invoke__">from_secs</span>(<span class="hljs-number">2</span>));<br>        num<br>    &#125;);<br><br>    <span class="hljs-keyword">if</span> intensity &lt; <span class="hljs-number">25</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Today, do &#123;&#125; pushups!&quot;</span>, cache_temp.<span class="hljs-title function_ invoke__">value</span>(intensity));<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Next, do &#123;&#125; situps!&quot;</span>, cache_temp.<span class="hljs-title function_ invoke__">value</span>(intensity));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> random_number == <span class="hljs-number">3</span> &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Take a break today! Remember to stay hydrated!&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Today, run for &#123;&#125; minutes!&quot;</span>, cache_temp.<span class="hljs-title function_ invoke__">value</span>(intensity));<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="闭包捕获上下文环境"><a href="#闭包捕获上下文环境" class="headerlink" title="闭包捕获上下文环境"></a>闭包捕获上下文环境</h3><ul><li>闭包可以访问定义它的作用域内的变量, 普通函数则不能;</li><li>会产生内存开销;</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">equal_to_x</span> = |z| z == x;<br>    <span class="hljs-comment">// fn equal_to_x(z:i32) -&gt; bool&#123;</span><br>    <span class="hljs-comment">//     z == x</span><br>    <span class="hljs-comment">// &#125;</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = <span class="hljs-number">4</span>;<br>    <span class="hljs-built_in">assert!</span>(<span class="hljs-title function_ invoke__">equal_to_x</span>(y));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="闭包从环境捕获值的方式"><a href="#闭包从环境捕获值的方式" class="headerlink" title="闭包从环境捕获值的方式"></a>闭包从环境捕获值的方式</h3><blockquote><p>闭包可以通过3种方式从它们的环境中捕获值，这和函数接收参数的3种方式是完全一致的：获取所有权、可变借用及不可变借用;</p></blockquote><ul><li>创建闭包时, 通过闭包对环境值的使用, Rust编译器推断出具体使用那个trait<ul><li>所有闭包都实现了FnOnce;</li><li>没有移动捕获的变量实现了FnMut;</li><li>无需可变访问捕获变量的闭包实现了Fn;</li></ul></li></ul><table><thead><tr><th>Fn trait</th><th>描述</th></tr></thead><tbody><tr><td>Fn(不可变借用)</td><td>Fn可以从环境中不可变地借用值。</td></tr><tr><td>FnMut(可变借用)</td><td>FnMut可以从环境中可变地借用值并对它们进行修改。</td></tr><tr><td>FnOnce(获取使用权)</td><td>FnOnce意味着闭包可以从它的封闭作用域中，也就是闭包所处的环境中，消耗捕获的变量。为了实现这一功能，闭包必须在定义时取得这些变量的所有权并将它们移动至闭包中。这也是名称FnOnce中Once一词的含义：因为闭包不能多次获取并消耗掉同一变量的所有权，所以它只能被调用一次。</td></tr></tbody></table><blockquote><p>范围: Fn&gt; FnMut&gt; FnOnce</p></blockquote><h4 id="move关键字"><a href="#move关键字" class="headerlink" title="move关键字"></a>move关键字</h4><p>如果你希望强制闭包获取环境中值的所有权，那么你可以在参数列表前添加move关键字。这个特性在把闭包传入新线程时相当有用，它可以将捕获的变量一并移动到新线程中去。</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>    <span class="hljs-comment">//使用move关键字代表变量x的使用权移动到闭包equal_to_x中</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">equal_to_x</span> = <span class="hljs-keyword">move</span> |z| z == x;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;can&#x27;t use x here: &#123;:?&#125;&quot;</span>, x);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>    <span class="hljs-built_in">assert!</span>(<span class="hljs-title function_ invoke__">equal_to_x</span>(y));<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>当指定 Fn trait bound(Fn, FnOnce, FnMut) 之一时, 首先使用Fn, 基于闭包体内的情况, 如果需要使用FnOnce或FnMut编译器会提示;</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
          <category> 闭包(closure) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> 闭包 </tag>
            
            <tag> closure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年09月09日 Rust 生命周期</title>
      <link href="/2023/09/09/2023/202309/2023-09-09.%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2023/09/09/2023/202309/2023-09-09.%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>Rust的每一个引用以及包含引用的数据结构(struct)，都有一个其保持有效的作用域。通常，生命周期是可以推断的，但是也可能出现多个引用的生命周期以某种方式相关联的情况。这就需要使用生命周期注解来描述多个生命周期间的关系，以确保运行时实际使用的引用都是有效的。</p><h3 id="生命周期语法"><a href="#生命周期语法" class="headerlink" title="生命周期语法"></a>生命周期语法</h3><ol><li>生命周期注解的语法是以<code>&#39;</code>开头再加上小写字母，如’a是生命周期的标识符;</li><li>生命周期注解位于引用的<code>&amp;</code>操作符之后，并用一个空格将生命周期注解与引用类型分隔开，比如:<code>&amp;&#39;a i32</code>、<code>&amp;&#39;a mut i32</code>、<code>&amp;&#39;a str</code>;</li><li>生命周期注解并不改变任何引用的生命周期的大小，只用于描述多个生命周期间的关系;</li></ol><h4 id="隐式生命周期-可推断生命周期"><a href="#隐式生命周期-可推断生命周期" class="headerlink" title="隐式生命周期(可推断生命周期)"></a>隐式生命周期(可推断生命周期)</h4><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">foo</span>(x: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-type">str</span> &#123;  <span class="hljs-comment">// 等价与 fn&lt;&#x27;a&gt;(x:&amp;&#x27;a str) -&gt; &amp;&#x27;a str&#123;</span><br>    x<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="显式生命周期"><a href="#显式生命周期" class="headerlink" title="显式生命周期"></a>显式生命周期</h4><blockquote><p>编译器无法自动推断出生命周期时需要显示指定;</p></blockquote><p>示例:比较大小, 返回较大值</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">langest</span>(x: &amp;<span class="hljs-type">i32</span>, y:&amp;<span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-type">i32</span>&#123;<br>    <span class="hljs-title function_ invoke__">if</span>(x &gt; y)&#123;<br>        x<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        y<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//cargo build</span><br><span class="hljs-comment">//   |</span><br><span class="hljs-comment">// 9 | fn langest(x: &amp;i32, y:&amp;i32) -&gt; &amp;i32&#123;</span><br><span class="hljs-comment">//   |                  ----    ----     ^ expected named lifetime parameter()</span><br><span class="hljs-comment">//   |</span><br><span class="hljs-comment">//   = help: this function&#x27;s return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y`</span><br><span class="hljs-comment">// help: consider introducing a named lifetime parameter</span><br><span class="hljs-comment">//   |</span><br><span class="hljs-comment">// 9 | fn langest&lt;&#x27;a&gt;(x: &amp;&#x27;a i32, y:&amp;&#x27;a i32) -&gt; &amp;&#x27;a i32&#123;</span><br><span class="hljs-comment">//   |              ++++     ++         ++          ++</span><br></code></pre></td></tr></table></figure><p>需要指定出入参的生命周期</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">langest</span>&lt;<span class="hljs-symbol">&#x27;a</span>&gt;(x: &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">i32</span>, y:&amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">i32</span>&#123;<br>    <span class="hljs-keyword">if</span> x &gt; y &#123;<br>        x<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        y<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="静态生命周期"><a href="#静态生命周期" class="headerlink" title="静态生命周期"></a>静态生命周期</h4><p>Rust预定义了一种特殊的生命周期注解’static，它具有和整个程序运行时相同的生命周期。</p><blockquote><p><strong>字符串字面量是直接硬编码到最终的可执行文件中的，因此拥有<code>&#39;static</code>生命周期;</strong></p></blockquote><blockquote><p><strong>指定为<code>&#39;static</code>之前应该考虑这个引用是否需要在整个程序的生命周期内都有效;</strong></p></blockquote><h4 id="悬垂引用"><a href="#悬垂引用" class="headerlink" title="悬垂引用"></a>悬垂引用</h4><blockquote><p>悬垂引用是指引用指向了不存在的内存,也就是内存中的数据释放后再次被使用;</p></blockquote><h3 id="生命周期与函数"><a href="#生命周期与函数" class="headerlink" title="生命周期与函数"></a>生命周期与函数</h3><h4 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h4><p>示例:获取最长字符串</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>()&#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">str1</span> = <span class="hljs-string">&quot;1234&quot;</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">str2</span> = <span class="hljs-string">&quot;hello&quot;</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">long_str</span> = <span class="hljs-title function_ invoke__">lang_str</span>(str1, str2);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;, &#123;&#125;中,最长字符串为:&#123;&#125;&quot;</span>, str1, str2, long_str);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取最长字符串</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">long_str</span>&lt;<span class="hljs-symbol">&#x27;a</span>&gt;(x: &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span>, y:&amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span> &#123;<br>    <span class="hljs-keyword">if</span> x.<span class="hljs-title function_ invoke__">len</span>() &gt; y.<span class="hljs-title function_ invoke__">len</span>() &#123;<br>        x<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        y<br>    &#125;<br>&#125;<br><span class="hljs-comment">//输出:</span><br><span class="hljs-comment">//1234, hello中,最长字符串为:hello</span><br></code></pre></td></tr></table></figure><p>示例: 函数中生命周期结合泛型类型、trait约束使用</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::fmt::Display;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>()&#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">str1</span> = <span class="hljs-string">&quot;1234&quot;</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">str2</span> = <span class="hljs-string">&quot;hello&quot;</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">long_str</span> = <span class="hljs-title function_ invoke__">long_str_with_tip</span>(str1,str2,<span class="hljs-string">&quot;你好!&quot;</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;, &#123;&#125;中,最长字符串为:&#123;&#125;&quot;</span>, str1, str2, long_str);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">long_str_with_tip</span>&lt;<span class="hljs-symbol">&#x27;a</span>, T&gt;(x: &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span>, y: &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span>, tip: T) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-symbol">&#x27;a</span> <span class="hljs-type">str</span><br><span class="hljs-keyword">where</span><br>    T: Display,<br>&#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Tip: &#123;&#125;&quot;</span>, tip);<br>    <span class="hljs-keyword">if</span> x.<span class="hljs-title function_ invoke__">len</span>() &gt; y.<span class="hljs-title function_ invoke__">len</span>() &#123;<br>        x<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        y<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 输出:</span><br><span class="hljs-comment">// Tip: 你好!</span><br><span class="hljs-comment">// 1234, hello中,最长字符串为:hello</span><br></code></pre></td></tr></table></figure><h3 id="生命周期与结构体"><a href="#生命周期与结构体" class="headerlink" title="生命周期与结构体"></a>生命周期与结构体</h3><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Pair</span>&lt;<span class="hljs-symbol">&#x27;a</span>, T&gt; &#123;<br>    first: &amp;<span class="hljs-symbol">&#x27;a</span> T,<br>    second: &amp;<span class="hljs-symbol">&#x27;a</span> T,<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">pair</span> = Pair &#123; first: &amp;x, second: &amp;y &#125;;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Pair: (&#123;&#125;, &#123;&#125;)&quot;</span>, pair.first, pair.second);<br>&#125;<br><span class="hljs-comment">//输出:Pair: (5, 10)</span><br></code></pre></td></tr></table></figure><h3 id="生命周期省略规则"><a href="#生命周期省略规则" class="headerlink" title="生命周期省略规则"></a>生命周期省略规则</h3><ul><li>每一个被省略生命周期的方法,函数的参数，都具有各不相同的生命周期。</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">long_str</span>(x:&amp;<span class="hljs-type">str</span>, y:&amp;<span class="hljs-type">str</span>) <span class="hljs-comment">//-&gt; fn long_str&lt;&#x27;a,&#x27;b&gt;(x:&amp;a str, y:&amp;b str)</span><br></code></pre></td></tr></table></figure><ul><li>如果只有一个输入生命周期（无论是否省略），这个生命周期会赋给所有被省略的输出生命周期。</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">long_str</span>(x:&amp;<span class="hljs-type">str</span>)<span class="hljs-punctuation">-&gt;</span>&amp;<span class="hljs-type">str</span>&#123;&#125; <span class="hljs-comment">//-&gt; fn long_str&lt;&#x27;a&gt;(x:&amp;a str)-&gt;&amp;&#x27;a str&#123;&#125;</span><br></code></pre></td></tr></table></figure><ul><li>方法中self的生命周期会赋给所有被省略的输出生命周期。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
          <category> 生命周期 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> 生命周期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年09月06日 Rust trait</title>
      <link href="/2023/09/06/2023/202309/2023-09-06.trait/"/>
      <url>/2023/09/06/2023/202309/2023-09-06.trait/</url>
      
        <content type="html"><![CDATA[<h2 id="trait"><a href="#trait" class="headerlink" title="trait"></a>trait</h2><p>trait（特征）被用来向Rust编译器描述某些特定类型拥有的且能够被其他类型共享的功能，它使我们可以以一种抽象的方式来定义共享行为。我们还可以使用trait约束来将泛型参数指定为实现了某些特定行为的类型。</p><blockquote><p>trait与其他语言中常被称为接口（interface）的功能类似，但也不尽相同。</p></blockquote><h3 id="trait的基本使用"><a href="#trait的基本使用" class="headerlink" title="trait的基本使用"></a>trait的基本使用</h3><ol><li><p>定义计算面积符trait</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">trait</span> <span class="hljs-title class_">Area</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">area</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">f64</span> &#123;<br>        <span class="hljs-comment">//默认实现</span><br>        <span class="hljs-built_in">panic!</span>(<span class="hljs-string">&quot;无法计算&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>创建圆的struct, 并为圆实现计算面积的trait</p></li></ol><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">//定义圆</span><br><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Garden</span> &#123;<br>    <span class="hljs-comment">//半径</span><br>    radius: <span class="hljs-type">f64</span>,<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Garden</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(radius: <span class="hljs-type">f64</span>) <span class="hljs-punctuation">-&gt;</span> Garden &#123;<br>        Garden &#123; radius: radius &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//为圆实现计算面积的trait</span><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Area</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Garden</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计算园的面积</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">area</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">f64</span> &#123;<br>        PI <span class="hljs-keyword">as</span> <span class="hljs-type">f64</span> * <span class="hljs-keyword">self</span>.radius * <span class="hljs-keyword">self</span>.radius<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="3"><li>创建长方形的struct, 并为长方形实现计算面积的trait</li></ol><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><br><span class="hljs-comment">// rectangle</span><br><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>    <span class="hljs-comment">//长</span><br>    length: <span class="hljs-type">f64</span>,<br>    <span class="hljs-comment">//宽</span><br>    width: <span class="hljs-type">f64</span>,<br>&#125;<br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(length: <span class="hljs-type">f64</span>, width: <span class="hljs-type">f64</span>) <span class="hljs-punctuation">-&gt;</span> Rectangle &#123;<br>        Rectangle &#123; length, width &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Area</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计算长方形的面积</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">area</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">f64</span> &#123;<br>        <span class="hljs-keyword">self</span>.length * <span class="hljs-keyword">self</span>.width<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>创建正方形的struct, 并为正方形实现计算面积的trait</li></ol><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><br><span class="hljs-comment">// square</span><br><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Square</span>&#123;<br>    edge_length: <span class="hljs-type">f64</span><br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Square</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(edge_length: <span class="hljs-type">f64</span>) <span class="hljs-punctuation">-&gt;</span> Square &#123;<br>        Square &#123; edge_length &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Area</span> <span class="hljs-keyword">for</span> <span class="hljs-title class_">Square</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计算正方形的面积</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">area</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">f64</span> &#123;<br>        <span class="hljs-keyword">self</span>.edge_length * <span class="hljs-keyword">self</span>.edge_length<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>测试方法</li></ol><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">garden</span> = Garden::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">5.0</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;圆:&#123;:?&#125;, 的面积为:&#123;&#125;&quot;</span>, &amp;garden, garden.<span class="hljs-title function_ invoke__">area</span>());<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">rectangle</span> = Rectangle::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">5.0</span>, <span class="hljs-number">105.0</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;长方形:&#123;:?&#125;, 的面积为:&#123;&#125;&quot;</span>, &amp;rectangle, rectangle.<span class="hljs-title function_ invoke__">area</span>());<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">square</span>: Square = Square::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">55.0</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;正方形:&#123;:?&#125;, 的面积为:&#123;&#125;&quot;</span>, &amp;square, square.<span class="hljs-title function_ invoke__">area</span>());<br>&#125;<br><br><span class="hljs-comment">// 输出:</span><br><span class="hljs-comment">// 圆:Garden &#123; radius: 5.0 &#125;, 的面积为:78.53981633974483</span><br><span class="hljs-comment">// 长方形:Rectangle &#123; length: 5.0, width: 105.0 &#125;, 的面积为:525</span><br><span class="hljs-comment">// 正方形:Square &#123; edge_length: 55.0 &#125;, 的面积为:3025</span><br></code></pre></td></tr></table></figure><h3 id="使用trait作为参数"><a href="#使用trait作为参数" class="headerlink" title="使用trait作为参数"></a>使用trait作为参数</h3><p>trait作为参数的两种常用方式，一是使用impl Trait语法表示参数类型，二是使用trait对泛型参数进行约束。</p><h4 id="使用impl-Trait语法"><a href="#使用impl-Trait语法" class="headerlink" title="使用impl Trait语法"></a>使用impl Trait语法</h4><blockquote><p>这里的impl Trait常被用在一些较短的示例中，但它其实只是trait约束 （trait bound）的一种语法糖.</p></blockquote><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 打印面积函数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">print_area</span>(area_data: <span class="hljs-keyword">impl</span> <span class="hljs-title class_">Area</span> + <span class="hljs-built_in">Debug</span>) &#123;<br>    <span class="hljs-built_in">println!</span>(<br>        <span class="hljs-string">&quot;数据需要计算面积的内容为:&#123;:?&#125;, 面积为:&#123;&#125;&quot;</span>,<br>        area_data,<br>        area_data.<span class="hljs-title function_ invoke__">area</span>()<br>    );<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="trait对泛型参数进行约束-trait-bound"><a href="#trait对泛型参数进行约束-trait-bound" class="headerlink" title="trait对泛型参数进行约束 trait bound"></a>trait对泛型参数进行约束 trait bound</h4><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 打印面积函数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">print_area2</span>&lt;T: Area + <span class="hljs-built_in">Debug</span>&gt;(area_data: T) &#123;<br>    <span class="hljs-built_in">println!</span>(<br>        <span class="hljs-string">&quot;数据需要计算面积的内容为:&#123;:?&#125;, 面积为:&#123;&#125;&quot;</span>,<br>        area_data,<br>        area_data.<span class="hljs-title function_ invoke__">area</span>()<br>    );<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="trait对泛型参数进行约束-where-语法"><a href="#trait对泛型参数进行约束-where-语法" class="headerlink" title="trait对泛型参数进行约束 where 语法"></a>trait对泛型参数进行约束 where 语法</h4><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 打印面积函数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">print_area3</span>&lt;T&gt;(area_data: T)<br><span class="hljs-keyword">where</span><br>    T: Area + <span class="hljs-built_in">Debug</span>,<br>&#123;<br>    <span class="hljs-built_in">println!</span>(<br>        <span class="hljs-string">&quot;数据需要计算面积的内容为:&#123;:?&#125;, 面积为:&#123;&#125;&quot;</span>,<br>        area_data,<br>        area_data.<span class="hljs-title function_ invoke__">area</span>()<br>    );<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="返回实现了trait的类型"><a href="#返回实现了trait的类型" class="headerlink" title="返回实现了trait的类型"></a>返回实现了trait的类型</h3><p>函数的返回值类型也可以使用impl Trait语法，返回某个实现了trait的类型。</p><ul><li>返回实现了Area的trait</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 返回实现了Area的trait</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">return_area_data</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">impl</span> <span class="hljs-title class_">Area</span>&#123;<br>    Garden::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">5.0</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="标准库常用trait"><a href="#标准库常用trait" class="headerlink" title="标准库常用trait"></a>标准库常用trait</h3><p>标准库中提供了很多有用的trait，其中一些trait可应用于结构体或枚举定义的derive属性中。对于使用#[derive]语法标记的类型，编译器会自动为其生成对应trait的默认实现代码。</p><h4 id="格式化输出Debug与Display"><a href="#格式化输出Debug与Display" class="headerlink" title="格式化输出Debug与Display"></a>格式化输出Debug与Display</h4><ul><li><p>Debug trait可以开启格式化字符串中的调试格式，常用于调试上下文中以<code>&#123;:?&#125;</code>或<code>&#123;:#?&#125;</code>格式打印输出一个类型的实例。Debug可以与derive属性一起使用。</p></li><li><p>Display trait是以<code>&#123;&#125;</code>格式打印输出信息的，主要用于面向用户的输出。但是，Display不能与derive属性一起使用。要实现Display，需要实现fmt方法。</p></li></ul><h4 id="等值比较Eq与PartialEq"><a href="#等值比较Eq与PartialEq" class="headerlink" title="等值比较Eq与PartialEq"></a>等值比较Eq与PartialEq</h4><p>Eq trait和PartialEq trait来自数学中的等价关系和局部等价关系。两者都满足以下两个特性。</p><ol><li>对称性（Symmetric），即<code>a == b</code>可推导出<code>b == a</code>。</li><li>传递性（Transitive），即<code>a == b</code>且<code>b == c</code>可推导出<code>a == c</code>。</li></ol><p>Eq相比PartialEq还需要满足反身性（Reflexive），即a &#x3D;&#x3D; a。对于浮点数类型，两个非数字值NaN（Not-a-Number）是互不相等的，即NaN !&#x3D; NaN，因此Rust只为其实现了PartialEq。实现Eq不需要额外的代码，只需要在实现PartialEq的基础上，在类型上标记<code>#[derive(Eq)]</code>即可.</p><p>PartialEq也可以与derive属性一起使用，用于比较一个类型的两个实例是否相等，并开启“&#x3D;&#x3D;”和“!&#x3D;”运算符功能,在结构体上标记<code>#[derive(PartialEq)]</code>，只有所有字段都相等，两个实例才相等，只要有任何字段不相等则两个实例不相等。在枚举上标记<code>#[derive(PartialEq)]</code>，当每一个成员都和其自身相等，且和其他成员都不相等时，两个实例才相等。</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[derive(PartialEq)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Book</span> &#123;<br>    isbn: <span class="hljs-type">i32</span>,<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>     <span class="hljs-keyword">let</span> <span class="hljs-variable">b1</span> = Book &#123; isbn: <span class="hljs-number">3</span>&#125;;<br>     <span class="hljs-keyword">let</span> <span class="hljs-variable">b2</span> = Book &#123; isbn: <span class="hljs-number">3</span>&#125;;<br>     <span class="hljs-keyword">let</span> <span class="hljs-variable">b3</span> = Book &#123; isbn: <span class="hljs-number">5</span>&#125;;<br>     <span class="hljs-built_in">assert!</span>(b1 == b2);<br>     <span class="hljs-built_in">assert!</span>(b1 != b3);<br> &#125;<br></code></pre></td></tr></table></figure><h4 id="次序比较Ord与PartialOrd"><a href="#次序比较Ord与PartialOrd" class="headerlink" title="次序比较Ord与PartialOrd"></a>次序比较Ord与PartialOrd</h4><p>Ord trait是表示全序关系的trait，全序关系是指集合中任何一对元素都是相互可比较的。Ord应该满足以下两个特性。</p><ol><li>完全反对称性（Total and Asymmetric），即任何一对元素之间的关系只能是a &lt; b、a &#x3D;&#x3D; b或a &gt; b中的其中一种。</li><li>传递性（Transitive），即a &lt; b且b &lt; c可推导出a &lt; c，“&#x3D;&#x3D;”和“&gt;”同理。</li></ol><p>PartialOrd trait是基于排序目的对类型实例进行比较的，可以直接使用&lt;、&gt;、&lt;&#x3D;和&gt;&#x3D;运算符进行比较。PartialOrd应该满足以下两个特性。</p><ol><li>反对称性，即a &lt; b则!(a &gt; b)，反之亦然。</li><li>传递性，即a &lt; b且b &lt; c可推导出a &lt; c，“&#x3D;&#x3D;”和“&gt;”同理。</li></ol><p>Ord和PartialOrd都要求能进行元素是否相等的比较，因此对Eq和PartialEq有以下依赖要求。</p><ol><li>PartialOrd要求类型实现PartialEq。</li><li>Ord要求类型实现PartialOrd和Eq。</li></ol><h4 id="复制值Clone与Copy"><a href="#复制值Clone与Copy" class="headerlink" title="复制值Clone与Copy"></a>复制值Clone与Copy</h4><ul><li><p>Clone trait用于标记可以对值进行深复制的类型，即<code>对栈上和堆上的数据一起复制</code>。要实现Clone，需要实现clone方法。如果要使用<code>#[derive(Clone)]</code>语法标记结构体或枚举，要求结构体的每个字段或枚举的每个值都可调用clone方法，意味着所有字段或值的类型都必须实现Clone。</p></li><li><p>Copy trait用于标记可以按位复制其值的类型，即<code>复制栈上的数据</code>。Copy继承自Clone，这意味着要实现Copy的类型，必须实现Clone的clone方法。如果想让一个类型实现Copy，就必须同时实现Clone，会比较烦琐且累赘，所以Rust提供了方便的derive属性来完成这项重复的工作 <code>#[derive(Copy, Clone)]</code>;</p></li><li><p>Rust为数字类型、字符类型、布尔类型、单元值等实现了Copy，但并非所有类型都可以实现Copy。对于结构体来说，必须所有字段都实现了Copy，这个结构体才能实现Copy。</p></li><li><p>Copy是一个隐式行为。开发者不能重载Copy行为，它永远是简单的位复制。Copy的隐式行为常发生在执行变量绑定、函数参数传递、函数返回等场景中。与Copy不同的是，Clone是一个显式行为。任何类型都可以实现Clone，开发者可以按需实现clone方法。</p></li></ul><h4 id="默认值Default"><a href="#默认值Default" class="headerlink" title="默认值Default"></a>默认值Default</h4><p>Default trait为类型提供有用的默认值，通常用于为结构体的字段提供默认值。</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[derive(Default)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Book</span> &#123;<br>    isbn: <span class="hljs-type">i32</span>,<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">b</span> = Book::<span class="hljs-title function_ invoke__">default</span>();<br>    <span class="hljs-built_in">assert_eq!</span>(b.isbn, <span class="hljs-number">0</span>);<br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
          <category> trait </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> trait </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年09月04日 Rust泛型</title>
      <link href="/2023/09/04/2023/202309/2023-09-04.%E6%B3%9B%E5%9E%8B/"/>
      <url>/2023/09/04/2023/202309/2023-09-04.%E6%B3%9B%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>泛型是在运行时指定数据类型的机制，其优势是可以编写更为抽象和通用的代码，减少重复的工作量，即一套代码就可以应用于多种类型。泛型类型是具体类型的抽象，Rust使用<T>语法表示泛型类型，其中T可以代表任意数据类型。</p><h3 id="泛型与容器"><a href="#泛型与容器" class="headerlink" title="泛型与容器"></a>泛型与容器</h3><p>最常见的泛型应用莫过于容器，如Vec<T>、HashMap&lt;K, V&gt;都是泛型类型的应用。</p><ul><li>Vec<T> 示例<figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[derive(Debug, Copy, Clone)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Rectangle</span>&lt;T&gt; &#123;<br>    width: T,<br>    height: T,<br>&#125;<br><br><span class="hljs-keyword">impl</span>&lt;T&gt; Rectangle&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">width</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> &amp;T &#123;<br>        &amp;<span class="hljs-keyword">self</span>.width<br>    &#125;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">height</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> &amp;T &#123;<br>        &amp;<span class="hljs-keyword">self</span>.height<br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-keyword">impl</span>&lt;T: std::ops::Mul&lt;Output = T&gt; + <span class="hljs-built_in">Copy</span>&gt; Rectangle&lt;T&gt; &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计算面积</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">area</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> T&#123;<br>        <span class="hljs-keyword">self</span>.width * <span class="hljs-keyword">self</span>.height<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">r</span> = Rectangle &#123;<br>        width: <span class="hljs-number">100</span>,<br>        height: <span class="hljs-number">200</span>,<br>    &#125;;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;高:&#123;&#125;, 宽:&#123;&#125;, 面积:&#123;&#125;&quot;</span>, r.<span class="hljs-title function_ invoke__">height</span>(), r.<span class="hljs-title function_ invoke__">width</span>(), r.<span class="hljs-title function_ invoke__">area</span>());<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="泛型与枚举"><a href="#泛型与枚举" class="headerlink" title="泛型与枚举"></a>泛型与枚举</h3><p>泛型枚举是指枚举值类型是泛型类型。标准库提供的Option<T>就是一个应用广泛的泛型枚举.</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">option_add</span>&lt;T&gt;(a: <span class="hljs-type">Option</span>&lt;<span class="hljs-type">i32</span>&gt;, b: <span class="hljs-type">Option</span>&lt;<span class="hljs-type">i32</span>&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Option</span>&lt;<span class="hljs-type">i32</span>&gt; &#123;<br>    <span class="hljs-title function_ invoke__">Some</span>(a.<span class="hljs-title function_ invoke__">unwrap</span>() + b.<span class="hljs-title function_ invoke__">unwrap</span>())<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">b</span> = <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, option_add::&lt;<span class="hljs-type">i32</span>&gt;(a, b).<span class="hljs-title function_ invoke__">unwrap</span>());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="泛型与函数"><a href="#泛型与函数" class="headerlink" title="泛型与函数"></a>泛型与函数</h3><p>函数的参数和返回值都可以是泛型类型，带有泛型类型的参数或返回值的函数叫作泛型函数。泛型函数不要求所有参数都是泛型，可以只是某个参数是泛型。在定义泛型函数时可以在函数名称后面带上<T>，在定义参数或返回值的类型时使用T。</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">show</span>&lt;T&gt;(x: T) <span class="hljs-punctuation">-&gt;</span>  T&#123;<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, <span class="hljs-title function_ invoke__">show</span>(<span class="hljs-string">&quot;123&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="泛型与方法"><a href="#泛型与方法" class="headerlink" title="泛型与方法"></a>泛型与方法</h3><p>带有泛型类型的参数或返回值的方法叫作泛型方法，代码如下所示。要定义泛型结构体Rectangle1<T>的泛型方法，需要在impl后面带上<T>，而方法的参数或返回值的类型才能使用T。</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[derive(Debug, Copy, Clone)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Rectangle</span>&lt;T&gt; &#123;<br>    width: T,<br>    height: T,<br>&#125;<br><br><span class="hljs-keyword">impl</span>&lt;T&gt; Rectangle&lt;T&gt; &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">width</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> &amp;T &#123;<br>        &amp;<span class="hljs-keyword">self</span>.width<br>    &#125;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">height</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> &amp;T &#123;<br>        &amp;<span class="hljs-keyword">self</span>.height<br>    &#125;<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">r</span> = Rectangle &#123;<br>        width: <span class="hljs-number">100</span>,<br>        height: <span class="hljs-number">200</span>,<br>    &#125;;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;高:&#123;&#125;, 宽:&#123;&#125;&quot;</span>, r.<span class="hljs-title function_ invoke__">height</span>(), r.<span class="hljs-title function_ invoke__">width</span>());<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="示例比较大小"><a href="#示例比较大小" class="headerlink" title="示例比较大小"></a>示例比较大小</h3><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取最小值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">min</span>&lt;T: <span class="hljs-built_in">PartialOrd</span> + <span class="hljs-built_in">Copy</span>&gt;(datas: &amp;[T]) <span class="hljs-punctuation">-&gt;</span> T &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">result</span> = datas[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">data</span> <span class="hljs-keyword">in</span> datas &#123;<br>        <span class="hljs-keyword">if</span> result &lt; *data &#123;<br>            result = *data;<br>        &#125;<br>    &#125;<br>    result<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">data_i32</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">9</span>, <span class="hljs-number">12</span>];<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">i</span> = <span class="hljs-title function_ invoke__">min</span>(&amp;data_i32);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, i);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, data_i32);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">datas_char</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-string">&#x27;Z&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>];<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">c</span> = <span class="hljs-title function_ invoke__">min</span>(&amp;datas_char);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, c);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, datas_char);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">datas_str</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-string">&quot;aBa&quot;</span>, <span class="hljs-string">&quot;bAA&quot;</span>, <span class="hljs-string">&quot;ACD&quot;</span>, <span class="hljs-string">&quot;Lz&quot;</span>, <span class="hljs-string">&quot;alibaba-data&quot;</span>, <span class="hljs-string">&quot;Lisi&quot;</span>, <span class="hljs-string">&quot;pen&quot;</span>, <span class="hljs-string">&quot;print&quot;</span>];<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-title function_ invoke__">min</span>(&amp;datas_str);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, s);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, datas_str);<br>&#125;<br><br></code></pre></td></tr></table></figure><ol><li><code>&lt;</code> 符号需要泛型对象实现 std::cmp::PartialOrd trait;</li><li><code>datas[index]</code> 需要泛型对象实现core::marker::Copy trait;</li></ol>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
          <category> 泛型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> 泛型! </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年08月27日 HashMap</title>
      <link href="/2023/08/27/2023/202308/2023-08-27-01.HashMap/"/>
      <url>/2023/08/27/2023/202308/2023-08-27-01.HashMap/</url>
      
        <content type="html"><![CDATA[<h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><ul><li><p>HashMap&lt;K, V&gt;，它存储了从K类型键到V类型值之间的映射关系。哈希映射在内部实现中使用了哈希函数 ，这同时决定了它在内存中存储键值对的方式。许多编程语言都支持这种类型的数据结构，只是使用了不同的名字，例如：哈希（hash）、映射（map）、对象（object）、哈希表（hash table）、字典（dictionary）或关联数组（associative array）等，这只是其中的一部分而已。</p></li><li><p>HashMap中的数据存储在堆上;</p></li><li><p>HashMap是同构的, 要求Key必须是同一种类型, Value是同一种类型;</p></li></ul><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><h4 id="创建hashmap"><a href="#创建hashmap" class="headerlink" title="创建hashmap"></a>创建hashmap</h4><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::collections::HashMap;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>()&#123;<br>    <span class="hljs-comment">//第一种</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">map</span>:HashMap&lt;<span class="hljs-type">String</span>, <span class="hljs-type">usize</span>&gt; = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br>    <span class="hljs-comment">//第二种</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">teams</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Blue&quot;</span>), <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Yellow&quot;</span>)];<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">initial_scores</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">10</span>, <span class="hljs-number">50</span>];<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">scores</span>: HashMap&lt;_, _&gt; = teams.<span class="hljs-title function_ invoke__">iter</span>().<span class="hljs-title function_ invoke__">zip</span>(initial_scores.<span class="hljs-title function_ invoke__">iter</span>()).<span class="hljs-title function_ invoke__">collect</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="通过collect方法创建hashmap"><a href="#通过collect方法创建hashmap" class="headerlink" title="通过collect方法创建hashmap"></a>通过collect方法创建hashmap</h4><blockquote><p>在元素类型为Tupl的Vector上使用Collect方法可以创建一个HashMap;</p></blockquote><ul><li>要求Tupl有2个值:一个作为HashMap的Key, 一个作为Value;</li><li>collect方法可以把数据整合成多种集合类型,包含HashMap,所以使用collect创建HashMap需要显示的指定返回值类型为HashMap&lt;_,_&gt;</li></ul><ol><li>第一种</li></ol><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::collections::HashMap;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">vec</span> = <span class="hljs-built_in">vec!</span>[(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)];<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">mp</span>: HashMap&lt;_,_&gt; = vec.<span class="hljs-title function_ invoke__">into_iter</span>().<span class="hljs-title function_ invoke__">collect</span>();<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, mp);<br>&#125;<br><span class="hljs-comment">//输出:&#123;2: 3, 1: 2&#125;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>第二种使用2个vec通过zip方式合并后通过collect方法创建;</li></ol><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::collections::HashMap;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v1</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v2</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">mp</span>: HashMap&lt;_, _&gt; = v1.<span class="hljs-title function_ invoke__">iter</span>().<span class="hljs-title function_ invoke__">zip</span>(v2).<span class="hljs-title function_ invoke__">collect</span>();<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, mp);<br>&#125;<br><span class="hljs-comment">//输出:&#123;2: 2, 3: 1, 1: 3&#125;</span><br></code></pre></td></tr></table></figure><h4 id="insert-key-value-插入数据"><a href="#insert-key-value-插入数据" class="headerlink" title="insert(key, value) 插入数据"></a>insert(key, value) 插入数据</h4><blockquote><p>insert方法,在Map中插入键值对。如果Map中不存在<code>key</code>，则返回<code>None</code>。如果Map中存在此<code>key</code>，则会更新该值，并返回旧值(<code>Some&lt;Value&gt;</code>)。</p></blockquote><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::collections::HashMap;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">hm</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br>    hm.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">data</span> = hm.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">match</span> data &#123;<br>        <span class="hljs-title function_ invoke__">Some</span>(v) =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;v&#125;&quot;</span>),<br>        <span class="hljs-literal">None</span> =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;success&quot;</span>),<br>    &#125;<br>&#125;<br><span class="hljs-comment">//输出:2</span><br></code></pre></td></tr></table></figure><h4 id="Option-get-key-获取值-可以通过match表达式取值"><a href="#Option-get-key-获取值-可以通过match表达式取值" class="headerlink" title="Option get(key) 获取值, 可以通过match表达式取值"></a>Option<value> get(key) 获取值, 可以通过match表达式取值</h4><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::collections::HashMap;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>()&#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">map</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br>    <span class="hljs-comment">//插入数据</span><br>    map.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>);<br>    <span class="hljs-comment">//获取数据</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">value</span> = map.<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&quot;name&quot;</span>).<span class="hljs-title function_ invoke__">unwrap</span>();<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;map中key为name的值为:&#123;&#125;&quot;</span>, value);<br>&#125;<br><span class="hljs-comment">//输出:map中key为name的值为:张三</span><br></code></pre></td></tr></table></figure><h4 id="更新值"><a href="#更新值" class="headerlink" title="更新值"></a>更新值</h4><ul><li>insert(key, value) 插入数据(存在数据覆盖, 不存在创建)</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::collections::HashMap;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>()&#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">map</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br>    <span class="hljs-comment">//插入数据</span><br>    map.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>);<br>    <span class="hljs-comment">//获取数据</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">value</span> = map.<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&quot;name&quot;</span>).<span class="hljs-title function_ invoke__">unwrap</span>();<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;map中key为name的值为:&#123;&#125;&quot;</span>, value);<br>    <span class="hljs-comment">//更新数据</span><br>    map.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>);<br>    <span class="hljs-comment">//获取数据</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">value</span> = map.<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&quot;name&quot;</span>).<span class="hljs-title function_ invoke__">unwrap</span>();<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;map中key为name的值为:&#123;&#125;&quot;</span>, value);<br>&#125;<br><span class="hljs-comment">//输出:</span><br><span class="hljs-comment">//map中key为name的值为:张三</span><br><span class="hljs-comment">//map中key为name的值为:李四</span><br></code></pre></td></tr></table></figure><ul><li>contains_key(“name”) 判断键是否存在</li><li>entry(key).or_insert(value) 检测一个键是否存在对应值，如果不存在，则为它插入一个值; 存在则不处理(或基于旧值更新 即 保留现有值,忽略更新)</li></ul><blockquote><p>检测一个键是否存在对应值，如果不存在，则为它插入一个值</p></blockquote><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::collections::HashMap;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">map</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br>    <span class="hljs-comment">//插入数据</span><br>    map.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>);<br>    <span class="hljs-comment">//判断一个键是否存在,不存在插入数据， 存在不进行操作</span><br>    map.<span class="hljs-title function_ invoke__">entry</span>(<span class="hljs-string">&quot;name&quot;</span>).<span class="hljs-title function_ invoke__">or_insert</span>(<span class="hljs-string">&quot;王五&quot;</span>);<br>    map.<span class="hljs-title function_ invoke__">entry</span>(<span class="hljs-string">&quot;age&quot;</span>).<span class="hljs-title function_ invoke__">or_insert</span>(<span class="hljs-string">&quot;20&quot;</span>);<br>    <span class="hljs-comment">//获取map中的键值对</span><br>    <span class="hljs-title function_ invoke__">for</span> (k, v) <span class="hljs-keyword">in</span> map&#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;key:&#123;&#125;, 值:&#123;&#125;&quot;</span>, k, v);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//输出</span><br><span class="hljs-comment">// key:age, 值:20</span><br><span class="hljs-comment">// key:name, 值:张三</span><br></code></pre></td></tr></table></figure><blockquote><p>基于旧值更新</p></blockquote><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::collections::HashMap;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">map</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br>    map.<span class="hljs-title function_ invoke__">entry</span>(<span class="hljs-string">&quot;zhangshan_score&quot;</span>).<span class="hljs-title function_ invoke__">or_insert</span>(<span class="hljs-number">0</span>);<br>    map.<span class="hljs-title function_ invoke__">entry</span>(<span class="hljs-string">&quot;lisi_score&quot;</span>).<span class="hljs-title function_ invoke__">or_insert</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//张三+1分</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">score</span> = map.<span class="hljs-title function_ invoke__">entry</span>(<span class="hljs-string">&quot;zhangshan_score&quot;</span>).<span class="hljs-title function_ invoke__">or_insert</span>(<span class="hljs-number">0</span>);<br>    *score += <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//打印map的键值对</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;map:&#123;:?&#125;&quot;</span>, map);<br>&#125;<br><span class="hljs-comment">//输出:map:&#123;&quot;lisi_score&quot;: 0, &quot;zhangshan_score&quot;: 1&#125;</span><br></code></pre></td></tr></table></figure><ul><li>打印map中的键值对使用{:?}</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::collections::HashMap;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">map</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br>    <span class="hljs-comment">//插入数据</span><br>    map.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;map中的键值对:&#123;:?&#125;&quot;</span>, map);<br>&#125;<br><span class="hljs-comment">//输出:map中的键值对:&#123;&quot;name&quot;: &quot;张三&quot;&#125;</span><br></code></pre></td></tr></table></figure><ul><li>for (key, value) in hashmap 循环</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::collections::HashMap;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>()&#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">map</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br>    <span class="hljs-comment">//判断一个键是否存在,不存在插入数据， 存在不进行操作</span><br>    map.<span class="hljs-title function_ invoke__">entry</span>(<span class="hljs-string">&quot;name&quot;</span>).<span class="hljs-title function_ invoke__">or_insert</span>(<span class="hljs-string">&quot;王五&quot;</span>);<br>    map.<span class="hljs-title function_ invoke__">entry</span>(<span class="hljs-string">&quot;age&quot;</span>).<span class="hljs-title function_ invoke__">or_insert</span>(<span class="hljs-string">&quot;20&quot;</span>);<br>    <span class="hljs-comment">//获取map中的键值对</span><br>    <span class="hljs-title function_ invoke__">for</span> (k, v) <span class="hljs-keyword">in</span> &amp;map&#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;key:&#123;&#125;, 值:&#123;&#125;&quot;</span>, k, v);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//输出:</span><br><span class="hljs-comment">// key:name, 值:王五</span><br><span class="hljs-comment">// key:age, 值:20</span><br></code></pre></td></tr></table></figure><h3 id="HashMap与所有权"><a href="#HashMap与所有权" class="headerlink" title="HashMap与所有权"></a>HashMap与所有权</h3><blockquote><p>对于像 i32 这样的实现了 Copy trait 的类型，其值可以拷贝进哈希 map。对于像 String 这样拥有所有权的值，其值将被移动而哈希 map 会成为这些值的所有者;</p></blockquote><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::collections::HashMap;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">field_name</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Favorite color&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">field_value</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Blue&quot;</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">map</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br>    map.<span class="hljs-title function_ invoke__">insert</span>(field_name, field_value);<br>    <span class="hljs-comment">// 这里 field_name 和 field_value 不再有效，</span><br>    <span class="hljs-comment">// 尝试使用它们看看会出现什么编译错误！</span><br>    <span class="hljs-comment">// println!(&quot;&#123;field_name&#125;&#123;field_value&#125;&quot;)</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>可以把对象的引用存入HashMap</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::collections::HashMap;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">field_name</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Favorite color&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">field_value</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Blue&quot;</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">map</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br>    map.<span class="hljs-title function_ invoke__">insert</span>(&amp;field_name, &amp;field_value);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;field_name&#125;&#123;field_value&#125;&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="附录HashMap常用方法"><a href="#附录HashMap常用方法" class="headerlink" title="附录HashMap常用方法"></a>附录HashMap常用方法</h3><h4 id="创建HashMap"><a href="#创建HashMap" class="headerlink" title="创建HashMap"></a>创建HashMap</h4><table><thead><tr><th>用法</th><th>示例</th><th>示例</th></tr></thead><tbody><tr><td>HashMap::new()</td><td>创建HashMap</td><td>let hm:HashMap &#x3D; HashMap::new();</td></tr></tbody></table><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><table><thead><tr><th>方法</th><th>参数</th><th>返回值</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>insert(k,v)</td><td>k键, v值</td><td><code>Option&lt;V&gt;</code></td><td>插入元素, 如果存在覆盖并返回覆盖之前的元素</td><td>hm.insert(1,1);</td></tr><tr><td>get(k)</td><td>k键</td><td><code>Option&lt;Value&gt;</code></td><td>获取value值的引用</td><td>let v:Option&lt;&amp;v&gt; &#x3D; map.get(“name”);</td></tr><tr><td>get_mut(k)</td><td>k键</td><td><code>Option&lt;Value&gt;</code></td><td>获取value值的可变引用</td><td>let v:Option&lt;&amp;mut v&gt; &#x3D; map.get_mut(&amp;3);</td></tr><tr><td>get_key_value(k)</td><td>k键</td><td><code>Option&lt;Key, Value&gt;</code></td><td>获取key对于的键值对的<code>Option&lt;tupl&gt;</code>对象</td><td>let kv &#x3D; map.get_key_value(&amp;3);<br/>match kv {<br/>&nbsp;&nbsp;&nbsp;&nbsp;Some((k,v)) &#x3D;&gt; println!(“{}-{}”, k,v),<br/>&nbsp;&nbsp;&nbsp;&nbsp;None &#x3D;&gt; println!(“无数据”), <br/>}</td></tr><tr><td>entry(k)</td><td>k键</td><td>Entry对象</td><td>获取map中的键值对的entry对象</td><td>let en &#x3D; map.entry(1);</td></tr><tr><td>.entry(k).or_insert(v)</td><td>k键, v值</td><td>&amp;mut V</td><td>如果key不存在插入值, 存在不进行操作，返回Map中value值的可变引用。</td><td>let v :&amp;mut i32 &#x3D; map.entry(1).or_insert(1);</td></tr><tr><td>.entry(k).or_insert_with(闭包)</td><td>k键, 闭包(匿名函数)</td><td>&amp;mut V</td><td>如果key不存在插入值, 存在不进行操作，返回Map中value值的可变引用。</td><td>let iw &#x3D; map.entry(2).or_insert_with(</td></tr><tr><td>.entry(k).or_insert_with_key(闭包)</td><td>k键, 闭包(匿名函数)</td><td>&amp;mut V</td><td>如果key不存在插入值, 存在不进行操作，返回Map中value值的可变引用。</td><td>let iwk &#x3D; map.entry(2).or_insert_with_key(</td></tr><tr><td>keys()</td><td>void</td><td>Keys</td><td>获取map中所有key</td><td>let keys &#x3D; map.keys();</td></tr><tr><td>contains_key(&amp;k)</td><td>bool</td><td>key的引用</td><td>判断key是否存在 true存在,false不存在</td><td>let ck &#x3D; map.contains_key(&amp;4);</td></tr><tr><td>clear</td><td>void</td><td></td><td>清空map</td><td>map.clear();</td></tr><tr><td>drain</td><td>void</td><td>Drain</td><td>清空map,并返回所有键值对的迭代器</td><td>let hhh &#x3D; map.drain();<br/> for v in hhh {<br/>&nbsp;&nbsp;&nbsp;&nbsp;println!(“{}-{}”, v.0, v.1);<br/>}</td></tr><tr><td>extend(Iter)</td><td>void</td><td>Iter迭代器</td><td>向map中添加内容(相当于java中的putAll方法)</td><td>map.extend(map2.iter());</td></tr><tr><td>clone_from(&amp;map)</td><td>void</td><td>map的引用</td><td>清空并,重新赋值map</td><td>map.clone_from(&amp;map2);</td></tr><tr><td>clone_into(&amp;mut map)</td><td>void</td><td>&amp;mut map</td><td>清空入参中的map, 并把当前map中的key,value赋值给入参的map对象</td><td>map.clone_into(&amp;mut map2);</td></tr><tr><td>len()</td><td>void</td><td>usize</td><td>获取长度</td><td>let len:usize &#x3D; map.len();</td></tr><tr><td>capacity()</td><td>void</td><td>usize</td><td>获取容量</td><td>let len:usize &#x3D; map.capacity();</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
          <category> collections </category>
          
          <category> HashMap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> collections </tag>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年08月27日 错误处理(panic!)</title>
      <link href="/2023/08/27/2023/202308/2023-08-27-02.%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/"/>
      <url>/2023/08/27/2023/202308/2023-08-27-02.%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><p>错误是软件中不可否认的事实，所以 Rust 有一些处理出错情况的特性。在许多情况下，Rust 要求你承认错误的可能性，并在你的代码编译前采取一些行动。这一要求使你的程序更加健壮，因为它可以确保你在将代码部署到生产环境之前就能发现错误并进行适当的处理。</p><p>Rust 将错误分为两大类：</p><ul><li>可恢复的（recoverable）错误</li><li>不可恢复的（unrecoverable）错误</li></ul><p>大多数语言并不区分这两种错误，并采用类似异常这样方式统一处理他们。Rust 没有<code>异常</code>。rust通过Result,panic!处理错误;</p><ul><li><code>Result&lt;T, E&gt;</code> 类型，用于处理可恢复的错误;</li><li><code>panic!</code> 宏，在程序遇到不可恢复的错误时停止执行;</li></ul><h3 id="panic-宏"><a href="#panic-宏" class="headerlink" title="panic! 宏"></a><code>panic!</code> 宏</h3><p>panic! 用于处理不可恢复的错误,</p><p>调用栈: 当panic发生, </p><ul><li>rust会默认展开调用栈(工作量大), Rust会沿着调用栈往回走,清理每个函数中的数据;</li><li>终止调用栈, 不进行数据清理, 停止程序;</li></ul><blockquote><p>修改为终止程序可以通过设置Cargo.toml 中的<code>panic = &#39;abort&#39;</code>实现</p></blockquote><figure class="highlight toml"><table><tr><td class="code"><pre><code class="hljs toml"><span class="hljs-comment"># release设置程序发生恐慌panic,终止程序</span><br><span class="hljs-section">[profile.release]</span><br><span class="hljs-attr">panic</span> = <span class="hljs-string">&#x27;abort&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="panic示例"><a href="#panic示例" class="headerlink" title="panic示例"></a>panic示例</h4><ul><li>调用panic!宏</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>()&#123;<br>    <span class="hljs-built_in">panic!</span>(<span class="hljs-string">&quot;错误啦....&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>数组越界</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>()&#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>    v[<span class="hljs-number">3</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Result-枚举"><a href="#Result-枚举" class="headerlink" title="Result&lt;T, E&gt; 枚举"></a><code>Result&lt;T, E&gt;</code> 枚举</h3><p>rust中Result枚举结构, T 和 E 是泛型类型参数；</p><ul><li>T 代表成功时返回的 Ok 成员中的数据的类型;</li><li>E 代表失败时返回的 Err 成员中的错误的类型;</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Result</span>&lt;T, E&gt;&#123;<br>    <span class="hljs-title function_ invoke__">Ok</span>(T), <span class="hljs-comment">//成功返回的数据</span><br>    <span class="hljs-title function_ invoke__">Err</span>(E), <span class="hljs-comment">//失败返回的数据</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>示例打开文件</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::fs::File;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>()&#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">file</span> = File::<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-string">&quot;hello.txt&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">f</span> = <span class="hljs-keyword">match</span> file &#123;<br>        <span class="hljs-title function_ invoke__">Ok</span>(file) =&gt; file,<br>        <span class="hljs-title function_ invoke__">Err</span>(error) =&gt; <span class="hljs-built_in">panic!</span>(<span class="hljs-string">&quot;文件访问失败,&#123;:?&#125;&quot;</span>, error),<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="匹配具体错误"><a href="#匹配具体错误" class="headerlink" title="匹配具体错误"></a>匹配具体错误</h4><p>通过error中的kind方法获取ErrorKind枚举, 下面示例通过匹配是否为文件不存在错误, 如果是则创建文件, 不是则panic;</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::&#123;fs::File, io::ErrorKind&#125;;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">file_name</span> = <span class="hljs-string">&quot;hello.txt&quot;</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">file</span> = <span class="hljs-keyword">match</span> File::<span class="hljs-title function_ invoke__">open</span>(file_name) &#123;<br>        <span class="hljs-title function_ invoke__">Ok</span>(file) =&gt; file,<br>        <span class="hljs-title function_ invoke__">Err</span>(error) =&gt; <span class="hljs-keyword">match</span> error.<span class="hljs-title function_ invoke__">kind</span>() &#123;<br>            <span class="hljs-comment">//匹配文件不存在</span><br>            ErrorKind::NotFound =&gt; <span class="hljs-title function_ invoke__">crate_file</span>(file_name),<br>            _ =&gt; <span class="hljs-built_in">panic!</span>(<span class="hljs-string">&quot;打开文件失败, 文件名称:&#123;&#125;&quot;</span>, file_name),<br>        &#125;,<br>    &#125;;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建文件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">crate_file</span>(name: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> File &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">match</span> File::<span class="hljs-title function_ invoke__">create</span>(name) &#123;<br>        <span class="hljs-title function_ invoke__">Ok</span>(file) =&gt; file,<br>        <span class="hljs-title function_ invoke__">Err</span>(_) =&gt; <span class="hljs-built_in">panic!</span>(<span class="hljs-string">&quot;创建文件失败, 文件名称:&#123;&#125;&quot;</span>, name),<br>    &#125;;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>通过闭包改进代码</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::&#123;fs::File, io::ErrorKind&#125;;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">file_name</span> = <span class="hljs-string">&quot;hello.txt&quot;</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">file</span> = File::<span class="hljs-title function_ invoke__">open</span>(file_name).<span class="hljs-title function_ invoke__">unwrap_or_else</span>(|error| &#123;<br>        <span class="hljs-keyword">if</span> error.<span class="hljs-title function_ invoke__">kind</span>() == ErrorKind::NotFound &#123;<br>            <span class="hljs-title function_ invoke__">crate_file</span>(file_name)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">panic!</span>(<span class="hljs-string">&quot;打开文件失败, 文件名称:&#123;&#125;&quot;</span>, file_name)<br>        &#125;<br>    &#125;);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 创建文件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">crate_file</span>(name: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> File &#123;<br>    File::<span class="hljs-title function_ invoke__">create</span>(name)<br>        .<span class="hljs-title function_ invoke__">unwrap_or_else</span>(|error| <span class="hljs-built_in">panic!</span>(<span class="hljs-string">&quot;创建文件失败, 文件名称:&#123;&#125;, 异常信息:&#123;:?&#125;&quot;</span>, name, error))<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="处理错误与panic-简写"><a href="#处理错误与panic-简写" class="headerlink" title="处理错误与panic!简写"></a>处理错误与panic!简写</h4><p>失败时 panic 的简写：<code>unwrap</code> 和 <code>expect</code></p><pre><code>1. 使用`unwrap`来简写</code></pre><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::fs::File;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">greeting_file</span> = File::<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-string">&quot;hello.txt&quot;</span>).<span class="hljs-title function_ invoke__">unwrap</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><pre><code>2. 使用 `expect` 来简写</code></pre><blockquote><p>使用expect可以自定义panic的信息</p></blockquote><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::fs::File;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">greeting_file</span> = File::<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-string">&quot;hello.txt&quot;</span>)<br>        .<span class="hljs-title function_ invoke__">expect</span>(<span class="hljs-string">&quot;hello.txt should be included in this project&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="传播错误"><a href="#传播错误" class="headerlink" title="传播错误"></a>传播错误</h4><p>当编写一个其实先会调用一些可能会失败的操作的函数时，除了在这个函数中处理错误外，还可以选择让调用者知道这个错误并决定该如何处理。这被称为 传播（propagating）错误，这样能更好的控制代码调用，因为比起你代码所拥有的上下文，调用者可能拥有更多信息或逻辑来决定应该如何处理错误。</p><p>示例展示了一个从文件中读取用户名的函数。如果文件不存在或不能读取，这个函数会将这些错误返回给调用它的代码：</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::fs::File;<br><span class="hljs-keyword">use</span> std::io::&#123;<span class="hljs-keyword">self</span>, Read&#125;;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br><br>    <span class="hljs-meta">#![allow(unused)]</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">read_username_from_file</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-type">String</span>, io::Error&gt; &#123;<br>        <span class="hljs-comment">//打开文件</span><br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">username_file_result</span> = File::<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-string">&quot;hello.txt&quot;</span>);<br>        <span class="hljs-comment">//判断打开文件是否成功</span><br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">username_file</span> = <span class="hljs-keyword">match</span> username_file_result &#123;<br>            <span class="hljs-title function_ invoke__">Ok</span>(file) =&gt; file,<br>            <span class="hljs-title function_ invoke__">Err</span>(e) =&gt; <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">Err</span>(e),<br>        &#125;;<br>        <span class="hljs-comment">//创建字符串</span><br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">username</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">new</span>();<br><br>        <span class="hljs-comment">//读取文件内容到字符串中</span><br>        <span class="hljs-keyword">match</span> username_file.<span class="hljs-title function_ invoke__">read_to_string</span>(&amp;<span class="hljs-keyword">mut</span> username) &#123;<br>            <span class="hljs-title function_ invoke__">Ok</span>(_) =&gt; <span class="hljs-title function_ invoke__">Ok</span>(username),<br>            <span class="hljs-title function_ invoke__">Err</span>(e) =&gt; <span class="hljs-title function_ invoke__">Err</span>(e),<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>传播错误的简写 <code>?</code> 运算符</li></ul><blockquote><p><code>?</code>运算符只能在返回<code>Result</code>或<code>Option</code>（或实现<code>FromRemidual</code>的其他类型）的函数中使用;</p></blockquote><p>如果Result是Ok:Ok中的值就是表达式的结果,然后继续执行程序; 如果Result是Err, Err就是<code>整个函数</code>的返回值, 就像使用了return;</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::&#123;fs::File, io::&#123;Read, <span class="hljs-keyword">self</span>&#125;&#125;;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">line</span> = <span class="hljs-title function_ invoke__">read_file</span>(<span class="hljs-string">&quot;Cargo.toml&quot;</span>).<span class="hljs-title function_ invoke__">unwrap</span>();<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;line&#125;&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">read_file_1</span>(name: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-type">String</span>, io::Error&gt; &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">file</span> = File::<span class="hljs-title function_ invoke__">open</span>(name)?;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">line</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">new</span>();<br>    file.<span class="hljs-title function_ invoke__">read_to_string</span>(&amp;<span class="hljs-keyword">mut</span> line)?;<br>    <span class="hljs-title function_ invoke__">Ok</span>(line)<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">read_file_2</span>(name: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-type">String</span>, io::Error&gt; &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">line</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">new</span>();<br>    File::<span class="hljs-title function_ invoke__">open</span>(name)?.<span class="hljs-title function_ invoke__">read_to_string</span>(&amp;<span class="hljs-keyword">mut</span> line)?;<br>    <span class="hljs-title function_ invoke__">Ok</span>(line)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>?</code>与 <code>from</code> 函数</li></ul><blockquote><p>Trait std::convert::From中的from函数 用于错误之间的转换, 被<code>?</code>所应用的错误,会隐式的被from函数处理, 当<code>?</code>调用from函数时, 收到的错误类型被转换为由当前函数返回类型所指定的错误类型; <strong><code>用于:针对不同的错误类型,要求返回同一种错误类型</code></strong></p></blockquote><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::&#123;<br>    error::Error,<br>    fs::File,<br>&#125;;<br><br><span class="hljs-comment">// `Box&lt;dyn Error&gt;`可以理解为返回任何可能的错误类型 </span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;(), <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> Error&gt;&gt; &#123;<br>    File::<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-string">&quot;123.txt&quot;</span>)?;<br>    <span class="hljs-title function_ invoke__">Ok</span>(())<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>try</code> 关键字</li></ul><h3 id="附录Result常用方法"><a href="#附录Result常用方法" class="headerlink" title="附录Result常用方法"></a>附录Result常用方法</h3><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><table><thead><tr><th>方法</th><th>参数</th><th>返回值</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>unwrap()</td><td>void</td><td>T</td><td>返回成功的值, 否则panic</td><td><code>File::open("123.txt").unwrap();</code></td></tr><tr><td>unwrap_err()</td><td>void</td><td>E</td><td>返回错误</td><td><code>File::open("123.txt").unwrap_err();</code></td></tr><tr><td>unwrap_or()</td><td>void</td><td>default:T</td><td>操作失败,使用默认值T</td><td><code>File::open("123.txt").unwrap_or(file);</code></td></tr><tr><td>unwrap_or_else(处理函数)</td><td>处理函数(闭包)</td><td>T</td><td>返回成功的值, 否则panic</td><td><code>File::create(name).unwrap_or_else(&#124;error&#124;panic!("创建文件失败, 文件名称:&#123;&#125;, 异常信息:&#123;:?&#125;", name, error));</code></td></tr><tr><td>expect(msg)</td><td>void</td><td>&amp;str</td><td>返回成功的值, 否则panic, 可以指定panic的信息</td><td><code>//文件不存在panic, 文件存在返回文件信息</br>File::open("123.txt").expect("打开文件失败");</code></td></tr><tr><td>expect_err(msg)</td><td>void</td><td>&amp;str</td><td>返回失败的值, 否则panic, 可以指定panic的信息</td><td><code>//文件存在panic, 文件不存在返回Err</br>let file = File::open("123.txt").expect_err("打开文件失败");</code></td></tr><tr><td>map(处理函数)</td><td>处理函数</td><td>Result</td><td>如果成功将成功的值交由处理函数再次处理, 处理后返回Result对象</td><td><code>//加2</br>let sum = "2".parse::&lt;i32&gt;().map(&#124;num&#124; num + 2);</br>println!("&#123;&#125;", sum.unwrap());</code></td></tr><tr><td>map_or(处理函数)</td><td>默认值, 处理函数</td><td>响应值</td><td>如果result为的结果为失败,返回默认值, 否则将成功的值通过处理函数处理,返回处理后的值</td><td><code>//加2 成功</br>let sum = "2".parse::&lt;i32&gt;().map_or(100, &#124;num&#124; num + 2);</br>println!("&#123;&#125;", sum.unwrap());</br>//加2 失败</br>let sum = "二".parse::&lt;i32&gt;().map_or(100, &#124;num&#124; num + 2);</br>println!("&#123;&#125;", sum.unwrap());</code></td></tr><tr><td>and_then(处理函数-&gt;Result)</td><td>处理函数-&gt;Result</td><td>Result</td><td>如果成功将成功的值交由处理函数再次处理, 处理后返回Result对象</td><td><code>//加2</br>let sum = "2".parse::&lt;i32&gt;().and_then(&#124;num&#124;Ok(num + 2));</br>println!("&#123;&#125;", sum.unwrap());</code></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
          <category> panic!与Result </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> panic! </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年08月24日 字符串(String)&quot;</title>
      <link href="/2023/08/24/2023/202308/2023-08-24.%E5%AD%97%E7%AC%A6%E4%B8%B2(String)/"/>
      <url>/2023/08/24/2023/202308/2023-08-24.%E5%AD%97%E7%AC%A6%E4%B8%B2(String)/</url>
      
        <content type="html"><![CDATA[<h2 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串(String)"></a>字符串(String)</h2><p>Rust 的核心语言中只有一种字符串类型：字符串 slice str，它通常以被借用的形式出现，&amp;str.</p><ul><li>byte集合<code>Vec&lt;u8&gt;</code></li></ul><h3 id="Rust中其他类型字符串"><a href="#Rust中其他类型字符串" class="headerlink" title="Rust中其他类型字符串"></a>Rust中其他类型字符串</h3><p>Rust的标准库中同时包含了其他一系列的字符串类型，比如OsString、OsStr、CString及CStr。</p><ul><li>String后缀 一般表示拥有使用权;</li><li>Str后缀 一般表示是可借用的变体;</li><li>这些字符串类型可以使用不同的编码，或者不同的内存布局来存储文本</li></ul><h3 id="创建字符串"><a href="#创建字符串" class="headerlink" title="创建字符串"></a>创建字符串</h3><ul><li>通过String::new() 创建</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">str</span>: <span class="hljs-type">String</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">new</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>通过String::from(&amp;str) 创建</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">str</span>: <span class="hljs-type">String</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;你好,Rust&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>通过&amp;str.to_string()创建</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">str</span>: <span class="hljs-type">String</span> = <span class="hljs-string">&quot;hello world&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h3><h4 id="更新字符串"><a href="#更新字符串" class="headerlink" title="更新字符串"></a>更新字符串</h4><ul><li>通过<code>push()</code>方法拼接</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">str</span>: <span class="hljs-type">String</span> = <span class="hljs-string">&quot;123&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>();<br><span class="hljs-type">str</span>.<span class="hljs-title function_ invoke__">push_str</span>(<span class="hljs-string">&quot;1111&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>通过运算符 <code>+</code></li></ul><blockquote><p>str &#x3D; str1 + str2;</p></blockquote><ol><li>str1 会失去使用权;</li><li>str2 必须是借用;</li></ol><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">str1</span> = <span class="hljs-string">&quot;hello&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>();<br><span class="hljs-keyword">let</span> <span class="hljs-variable">str2</span> = <span class="hljs-string">&quot;world&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>();<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, str1 + <span class="hljs-string">&quot; &quot;</span> + &amp;str2);<br></code></pre></td></tr></table></figure><ul><li>通过<code>format!()</code>宏拼接</li></ul><p>通过<code>format!()</code>拼接后,参与拼接的参数不会失去使用权;</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">str1</span> = <span class="hljs-string">&quot;hello&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>();<br><span class="hljs-keyword">let</span> <span class="hljs-variable">str2</span> = <span class="hljs-string">&quot;world&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>();<br><span class="hljs-keyword">let</span> <span class="hljs-variable">str3</span> = <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;&#123;str1&#125; &#123;str2&#125;&quot;</span>);<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;,&#123;&#125;,&#123;&#125;&quot;</span>, str1, str2, str3);<br><span class="hljs-comment">//输出:hello,world,hello world</span><br></code></pre></td></tr></table></figure><ul><li>通过<code>chars()</code>获取字符串字符数组</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">for</span> <span class="hljs-variable">char</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;你好&quot;</span>.<span class="hljs-title function_ invoke__">chars</span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;char&#125;&quot;</span>)<br>&#125;<br><span class="hljs-comment">//输出:你好</span><br></code></pre></td></tr></table></figure><ul><li>通过<code>bytes()</code>获取字符串的byte数组</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">for</span> <span class="hljs-variable">byte</span> <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;你好&quot;</span>.<span class="hljs-title function_ invoke__">bytes</span>() &#123;<br>    <span class="hljs-built_in">print!</span>(<span class="hljs-string">&quot;&#123;byte&#125;-&quot;</span>)<br>&#125;<br><span class="hljs-comment">//输出:228-189-160-229-165-189-</span><br></code></pre></td></tr></table></figure><ul><li>获取标量值长度</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;获取字符串的原始字节&quot;</span>).<span class="hljs-title function_ invoke__">chars</span>().<span class="hljs-title function_ invoke__">count</span>());<br>    <span class="hljs-comment">//输出:10</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">hello</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;नमस्ते&quot;</span>);<br>    <span class="hljs-comment">//न म स्ते</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, hello.<span class="hljs-title function_ invoke__">chars</span>().<span class="hljs-title function_ invoke__">count</span>())<br>    <span class="hljs-comment">//输出:6</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>获取字符个数(类似于java的length方法)</li></ul><p>在 Rust 中获取字符串的字形簇（grapheme clusters）长度;</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">string</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;获取字符串的原始字节&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">length</span> = string::<span class="hljs-title function_ invoke__">graphemes</span>(<span class="hljs-literal">true</span>).<span class="hljs-title function_ invoke__">count</span>();<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;字符串的字形簇长度为: &#123;&#125;&quot;</span>, length);<br>    <span class="hljs-comment">//输出:10</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="追加"><a href="#追加" class="headerlink" title="追加"></a>追加</h4><h3 id="附录String常用方法"><a href="#附录String常用方法" class="headerlink" title="附录String常用方法"></a>附录String常用方法</h3><h4 id="创建String"><a href="#创建String" class="headerlink" title="创建String"></a>创建String</h4><table><thead><tr><th>用法</th><th>示例</th><th>示例</th></tr></thead><tbody><tr><td>String::new()</td><td>创建空String</td><td>let str:String &#x3D; String::new();</td></tr><tr><td>String::from(&amp;str)</td><td>用from,通过字符串字面值</td><td>let str:String &#x3D; String::from(“123”);</td></tr><tr><td>&amp;str.to_string()</td><td>字符串字面值的to_string方法创建</td><td>let str:String &#x3D; “123”.to_string();</td></tr></tbody></table><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><table><thead><tr><th>方法</th><th>参数</th><th>返回值</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>push_str(&amp;str)</td><td>&amp;str</td><td>void</td><td>向尾部追加字符串切片</td><td>str.push_str(“你好”);</td></tr><tr><td>push(char)</td><td>char</td><td>void</td><td>向尾部追加字符</td><td>str.push(‘你’);</td></tr><tr><td>运算符 +</td><td></td><td></td><td>通过运算符拼接字符串(注意+号左边的元素会失去使用权, 右边的元素必须是字符串的引用)</td><td>let str3 &#x3D; String::from(“hello “) + “world”;</td></tr><tr><td>format!(“{str}”)</td><td>String</td><td>String</td><td>通过format!宏拼接字符串, 参与拼接的对象不会失去使用权</td><td>let str1 &#x3D; String::from(“hello”); <br/> let str2 &#x3D; String::from(“world!”); <br/> let str3 &#x3D; format!(“{str1} {str2}”);</td></tr><tr><td>chars()</td><td>void</td><td>Chars&lt;’_&gt;</td><td>获取标量值数组</td><td>let chars &#x3D; str3.chars(); <br/>    for char in chars {<br/> &nbsp;&nbsp;&nbsp;&nbsp;println!(“{char}”);<br/>    }</td></tr><tr><td>bytes()</td><td>void</td><td>usize</td><td>获取字符串的原始字节</td><td>for b in “Зд”.bytes() {<br/>&nbsp;&nbsp;&nbsp;&nbsp;println!(“{b}”);<br/>}</td></tr><tr><td>size()</td><td>void</td><td>usize</td><td>获取Vec<u8>元素个数</td><td>String::from(“你好!”).size();</td></tr><tr><td>capacity()</td><td>void</td><td>usize</td><td>获取Vec<u8>占用的容量</td><td>String::from(“你好!”).capacity();</td></tr><tr><td>split(Pattern)</td><td>Pattern分隔符</td><td>Split</td><td>根据分隔符切分字符串</td><td>let str &#x3D; String::from(“hello world”);<br/>let arr &#x3D; str.split(“ “);<br/>for v in arr { <br/>&nbsp;&nbsp;&nbsp;&nbsp;println!(“{v}”);<br/>}</td></tr><tr><td>split_whitespace()</td><td>void</td><td>Split</td><td>根据空格切分字符串</td><td>let str &#x3D; String::from(“hello world”);<br/>let arr &#x3D; str.split_whitespace();<br/>for v in arr { <br/>&nbsp;&nbsp;&nbsp;&nbsp;println!(“{v}”);<br/>}</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
          <category> collections </category>
          
          <category> 字符串(String) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> collections </tag>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年08月22日 集合(collections)-Vector&quot;</title>
      <link href="/2023/08/22/2023/202308/2023-08-22.%E9%9B%86%E5%90%88(collections)-Vector/"/>
      <url>/2023/08/22/2023/202308/2023-08-22.%E9%9B%86%E5%90%88(collections)-Vector/</url>
      
        <content type="html"><![CDATA[<h2 id="集合-collections"><a href="#集合-collections" class="headerlink" title="集合(collections)"></a>集合(collections)</h2><p>Rust 标准库中包含一系列被称为 集合（collections）的非常有用的数据结构。<br>Rust 的标准集合库提供了最常见的通用编程数据结构的高效实现。通过使用标准实现，两个库应该可以在不进行大量数据转换的情况下进行通信。</p><p>Rust 的集合可以分为四大类：</p><ul><li>序列(Sequences)：Vec, VecDeque,LinkedList</li><li>地图(Map)：HashMap,BTreeMap</li><li>列表(Sets)：HashSet,BTreeSet</li><li>杂项(Misc)：BinaryHeap</li></ul><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><blockquote><p>vector 允许我们在一个单独的数据结构中储存多于一个的值，它在内存中彼此相邻地排列所有的值。vector 只能储存相同类型的值。</p></blockquote><h4 id="创建Vector"><a href="#创建Vector" class="headerlink" title="创建Vector"></a>创建Vector</h4><ul><li><p>使用 <code>Vec::new</code> 创建</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">vec</span>:<span class="hljs-type">Vec</span>&lt;<span class="hljs-type">i32</span>&gt; = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">new</span>();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用<code>vec!</code>宏创建</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>()&#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用<code>Vec::from</code>创建</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>()&#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">vec2</span> = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">from</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>指定容量创建 <code>Vec::with_capacity</code></p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>()&#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">vec2</span> = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">with_capacity</span>(<span class="hljs-number">5</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><ul><li><p>push方法</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">vec</span>:<span class="hljs-type">Vec</span>&lt;<span class="hljs-type">i32</span>&gt; = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">new</span>();<br>    vec.<span class="hljs-title function_ invoke__">push</span>(<span class="hljs-number">1</span>);<br>    vec.<span class="hljs-title function_ invoke__">push</span>(<span class="hljs-number">2</span>);<br>    vec.<span class="hljs-title function_ invoke__">push</span>(<span class="hljs-number">3</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>insert方法(指定下标插入)</p></li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">vec</span>:<span class="hljs-type">Vec</span>&lt;<span class="hljs-type">i32</span>&gt; = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">new</span>();<br>    vec.<span class="hljs-title function_ invoke__">insert</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="读取-vector-的元素"><a href="#读取-vector-的元素" class="headerlink" title="读取 vector 的元素"></a>读取 vector 的元素</h4><ul><li>通过下标获取</li><li>通过get方法获取</li><li>通过pop移除获取</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">vec</span>: <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">i32</span>&gt; = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">with_capacity</span>(<span class="hljs-number">100</span>);<br>    vec.<span class="hljs-title function_ invoke__">extend</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>].<span class="hljs-title function_ invoke__">iter</span>());<br>    <span class="hljs-comment">//获取第一个元素</span><br>    <span class="hljs-built_in">assert_eq!</span>(vec[<span class="hljs-number">0</span>], <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//使用get方法获取第一个元素</span><br>    <span class="hljs-built_in">assert_eq!</span>(vec.<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-number">0</span>), <span class="hljs-title function_ invoke__">Some</span>(&amp;<span class="hljs-number">1_i32</span>));<br>    <span class="hljs-comment">//使用pop移除最后一个元素    </span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">value</span> = vec.<span class="hljs-title function_ invoke__">pop</span>();<br>    <span class="hljs-keyword">match</span> value &#123;<br>        <span class="hljs-title function_ invoke__">Some</span>(value) =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, value),<br>        _ =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;空&quot;</span>),<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="遍历-vector-中的元素"><a href="#遍历-vector-中的元素" class="headerlink" title="遍历 vector 中的元素"></a>遍历 vector 中的元素</h4><ul><li>使用for循环</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">vec</span>: <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">i32</span>&gt; = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">with_capacity</span>(<span class="hljs-number">100</span>);<br>vec.<span class="hljs-title function_ invoke__">extend</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>].<span class="hljs-title function_ invoke__">iter</span>());<br><span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> &amp;vec &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;i&#125;&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>修改vec中的值</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">v</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br>    <span class="hljs-comment">//方式1</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> &amp;<span class="hljs-keyword">mut</span> v &#123;<br>        *i += <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">//方式2</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..v.<span class="hljs-title function_ invoke__">len</span>() &#123;<br>        v[i] = v[i] + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, v);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>变量并修改值(*号表示解引用)</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">vec</span>: <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">i32</span>&gt; = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">with_capacity</span>(<span class="hljs-number">100</span>);<br>    vec.<span class="hljs-title function_ invoke__">extend</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>].<span class="hljs-title function_ invoke__">iter</span>());<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">value</span> <span class="hljs-keyword">in</span> &amp;<span class="hljs-keyword">mut</span> vec &#123;<br>        *value += <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">value</span> <span class="hljs-keyword">in</span> &amp;vec &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, value)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="使用枚举来储存多种类型"><a href="#使用枚举来储存多种类型" class="headerlink" title="使用枚举来储存多种类型"></a>使用枚举来储存多种类型</h4><p>使用枚举来让vec实现类似于java中的<code>List&lt;Object&gt;</code></p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Object</span> &#123;<br>    <span class="hljs-title function_ invoke__">Integer</span>(<span class="hljs-type">i32</span>),    <br>    <span class="hljs-title function_ invoke__">String</span>(<span class="hljs-type">String</span>),    <br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">vec</span>: <span class="hljs-type">Vec</span>&lt;Object&gt; = <span class="hljs-type">Vec</span>::<span class="hljs-title function_ invoke__">with_capacity</span>(<span class="hljs-number">100</span>);<br>    vec.<span class="hljs-title function_ invoke__">push</span>(Object::<span class="hljs-title function_ invoke__">Integer</span>(<span class="hljs-number">100</span>));<br>    vec.<span class="hljs-title function_ invoke__">push</span>(Object::<span class="hljs-title function_ invoke__">String</span>(<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello world&quot;</span>)));<br>    <span class="hljs-comment">//打印</span><br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">value</span> <span class="hljs-keyword">in</span> &amp;vec &#123;<br>        <span class="hljs-keyword">match</span> value &#123;<br>            Object::<span class="hljs-title function_ invoke__">Integer</span>(v) =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, v),<br>            Object::<span class="hljs-title function_ invoke__">String</span>(v) =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, v),<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="附录Vector常用方法"><a href="#附录Vector常用方法" class="headerlink" title="附录Vector常用方法"></a>附录Vector常用方法</h3><h4 id="创建vec"><a href="#创建vec" class="headerlink" title="创建vec"></a>创建vec</h4><table><thead><tr><th>用法</th><th>示例</th><th>示例</th></tr></thead><tbody><tr><td>Vec::new()</td><td>创建空vec</td><td>let vec:Vec<usize> &#x3D; Vec::new();</td></tr><tr><td>vec![元素]</td><td>创建vec</td><td>let vec:Vec<usize> &#x3D; vec![1,2,3];</td></tr><tr><td>Vec::from(iter)</td><td>通过迭代器创建vec</td><td>let vec &#x3D; Vec::from([1,2,3]);</td></tr><tr><td>String.into_bytes()</td><td>字符串转vec</td><td>let v1: Vec<u8> &#x3D; s.into_bytes();</td></tr><tr><td>[1,2,3].into()</td><td>数组转vec</td><td>let v1: Vec<i32> &#x3D; [1,2,3].into();</td></tr><tr><td>[1,2,3].into()</td><td>数组转vec</td><td>let v1: Vec<i32> &#x3D; [10;10].into_iter().collect();</td></tr><tr><td>Vec::with_capacity(capacity)</td><td>指定容量创建的vec</td><td>let v1: Vec<i32> &#x3D; Vec::with_capacity(10);</td></tr></tbody></table><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><table><thead><tr><th>方法</th><th>参数</th><th>返回值</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>push</td><td>value</td><td>void</td><td>向尾部添加元素</td><td>v.push(5);</td></tr><tr><td>vec[index]</td><td>index(下标)</td><td>value</td><td>读取 vector 的元素(index从0开始) ,超出范围会panick</td><td>let v:i32 &#x3D; vec[1];</td></tr><tr><td>get</td><td>index(下标)</td><td>Option&lt;&amp;Value&gt;</td><td>读取 vector 的元素(index从0开始),超出范围不会panick</td><td>let third: Option&lt;&amp;i32&gt; &#x3D; v.get(2);</td></tr><tr><td>get_mut</td><td>index(下标)</td><td>Option&lt;&amp;mut Value&gt;</td><td>读取 vector 的元素(index从0开始)</td><td>let third: Option&lt;&amp;mut i32&gt; &#x3D; v.get_mut(2);</td></tr><tr><td>len</td><td>void</td><td>usize</td><td>获取长度(数据)</td><td>let len:usize &#x3D; vec.len();</td></tr><tr><td>capacity</td><td>void</td><td>usize</td><td>获取Vec容量</td><td>let len:usize &#x3D; vec.capacity();</td></tr><tr><td>pop</td><td>void</td><td>Option&lt;&amp;value&gt;</td><td>删除最后一个元素并返回，如果为空则返回“无”</td><td>let data:Option&lt;&amp;value&gt; &#x3D; vec.pop();</td></tr><tr><td>extend</td><td>iter</td><td>void</td><td>添加元素</td><td>vec.extend([1,2,3].iter());</td></tr><tr><td>resize</td><td>new_len, value</td><td>void</td><td>指定长度并赋初始值</td><td>vec.resize(5, 0);</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
          <category> collections </category>
          
          <category> Vector </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> collections </tag>
            
            <tag> Vector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年08月20日 路径(Path)&quot;</title>
      <link href="/2023/08/20/2023/202308/2023-08-20.%E8%B7%AF%E5%BE%84(Path)/"/>
      <url>/2023/08/20/2023/202308/2023-08-20.%E8%B7%AF%E5%BE%84(Path)/</url>
      
        <content type="html"><![CDATA[<h2 id="路径-Path"><a href="#路径-Path" class="headerlink" title="路径(Path)"></a>路径(Path)</h2><blockquote><p>类似于在文件系统中使用路径进行导航的方式，为了在Rust的模块树中找到某个条目，我们同样需要使用路径。比如，在调用某个函数时，我们必须要知晓它的路径。</p></blockquote><p>路径有两种形式：</p><ul><li>使用单元包名或字面量crate从根节点开始的绝对路径。</li><li>使用self、super或内部标识符从当前模块开始的相对路径。</li></ul><p>绝对路径与相对路径都由至少一个标识符组成，标识符之间使用双冒号（::）分隔。</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">mod</span> front_of_house &#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">mod</span> hosting &#123;<br>        <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">add_to_waitlist</span>() &#123;&#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">eat_at_restaurant</span>() &#123;<br>    <span class="hljs-comment">// 绝对路径</span><br>    crate::front_of_house::hosting::<span class="hljs-title function_ invoke__">add_to_waitlist</span>();<br>    <span class="hljs-comment">// 相对路径</span><br>    front_of_house::hosting::<span class="hljs-title function_ invoke__">add_to_waitlist</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>私有边界</p><ul><li>模块不仅可以组织代码,还可以定义私有边界;</li><li>如果想把函数或者struct 等设置为私有(private), 可以把它放在某个模块中.</li><li>Rust中的所有条目（函数、方法、结构体、枚举、模块及常量）默认都是私有的。</li><li>父级模块无法访问子模块中的私有条目。</li><li>子模块中可以使用所有父模块中的条目。</li></ul><h3 id="使用pub关键字来暴露路径"><a href="#使用pub关键字来暴露路径" class="headerlink" title="使用pub关键字来暴露路径"></a>使用pub关键字来暴露路径</h3><blockquote><p>使用pub关键字来将某些条目标记为公共的，从而使子模块中的这些部分被暴露到祖先模块中。</p></blockquote><h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h3><blockquote><p>使用super关键字开始构造相对路径</p></blockquote><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">serve_order</span>() &#123;&#125;<br><br><span class="hljs-keyword">mod</span> back_of_house &#123;<br>    <span class="hljs-keyword">use</span> crate::serve_order;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">fix_incorrect_order</span>() &#123;<br>        <span class="hljs-comment">//相对路径访问cook_order</span><br>        <span class="hljs-title function_ invoke__">cook_order</span>();<br>        <span class="hljs-comment">//相对路径访问cook_order</span><br>        self::<span class="hljs-title function_ invoke__">cook_order</span>();<br>        <span class="hljs-comment">//使用绝对路径访问serve_order</span><br>        crate::back_of_house::<span class="hljs-title function_ invoke__">cook_order</span>();<br><br>        <span class="hljs-comment">//使用相对路径访问serve_order</span><br>        super::<span class="hljs-title function_ invoke__">serve_order</span>();<br>        <span class="hljs-comment">//使用相对路径访问serve_order</span><br>        <span class="hljs-title function_ invoke__">serve_order</span>();<br>        <span class="hljs-comment">//使用绝对路径访问serve_order</span><br>        crate::<span class="hljs-title function_ invoke__">serve_order</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">cook_order</span>() &#123;&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="pub-struct"><a href="#pub-struct" class="headerlink" title="pub struct"></a>pub struct</h4><ul><li>pub 放在struct前表明 struct是公共的, struct的字段默认是私有的</li><li>struct中的字段需要单独设置pub关键字来变成公共的</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">mod</span> modules &#123;<br>    <span class="hljs-meta">#[derive(Debug)]</span><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">User</span> &#123;<br>        <span class="hljs-keyword">pub</span> name: <span class="hljs-type">String</span>,<br>        <span class="hljs-keyword">pub</span> age: <span class="hljs-type">u8</span>,<br>    &#125;<br><br>    <span class="hljs-keyword">impl</span> <span class="hljs-title class_">User</span> &#123;<br>        <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">minority</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">bool</span> &#123;<br>            <span class="hljs-keyword">self</span>.age &lt; <span class="hljs-number">18</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">crate_user</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">user</span>: modules::User = crate::modules::User &#123;<br>        name: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;张三&quot;</span>),<br>        age: <span class="hljs-number">18</span>,<br>    &#125;;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:#?&#125;, 是否是未成年:&#123;&#125;&quot;</span>, user, user.<span class="hljs-title function_ invoke__">minority</span>());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="pub-enum"><a href="#pub-enum" class="headerlink" title="pub enum"></a>pub enum</h4><ul><li>pub放在enum前,表明这个枚举是公共的, enum的变体(实例)也是公共的</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">mod</span> back_of_house&#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Appetizer</span>&#123;<br>        Soup,<br>        Salad<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">test</span>()&#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = crate::back_of_house::Appetizer::Salad;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="use-关键字"><a href="#use-关键字" class="headerlink" title="use 关键字"></a>use 关键字</h3><ul><li>基于路径来调用函数的写法看上去会有些重复与冗长。</li></ul> <figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">mod</span> front_of_house &#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">mod</span> hosting &#123;<br>        <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">add_to_waitlist</span>() &#123;&#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 使用use关键字</span><br><span class="hljs-keyword">use</span> crate::front_of_house::hosting;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">eat_at_restaurant</span>() &#123;<br>    hosting::<span class="hljs-title function_ invoke__">add_to_waitlist</span>();<br>    hosting::<span class="hljs-title function_ invoke__">add_to_waitlist</span>();<br>    hosting::<span class="hljs-title function_ invoke__">add_to_waitlist</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用as关键字来提供新的名称</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">mod</span> front_of_house &#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">mod</span> hosting &#123;<br>        <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">add_to_waitlist</span>() &#123;&#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 使用use关键字</span><br><span class="hljs-keyword">use</span> crate::front_of_house::hosting <span class="hljs-keyword">as</span> abc;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">eat_at_restaurant</span>() &#123;<br>    abc::<span class="hljs-title function_ invoke__">add_to_waitlist</span>();<br>    abc::<span class="hljs-title function_ invoke__">add_to_waitlist</span>();<br>    abc::<span class="hljs-title function_ invoke__">add_to_waitlist</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用pub use重导出名称<br>当我们使用use关键字将名称引入作用域时，这个名称会以私有的方式在新的作用域中生效。为了让外部代码能够访问到这些名称，我们可以通过组合使用pub与use实现。这项技术也被称作重导出（re-exporting），因为我们不仅将条目引入了作用域，而且使该条目可以被外部代码从新的作用域引入自己的作用域。</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">mod</span> front_of_house &#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">mod</span> hosting &#123;<br>        <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">add_to_waitlist</span>() &#123;&#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用pub use导出(外部代码就可以访问hosting)</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">use</span> crate::front_of_house::hosting;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">eat_at_restaurant</span>() &#123;<br>    hosting::<span class="hljs-title function_ invoke__">add_to_waitlist</span>();<br>    hosting::<span class="hljs-title function_ invoke__">add_to_waitlist</span>();<br>    hosting::<span class="hljs-title function_ invoke__">add_to_waitlist</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="使用外部包-package"><a href="#使用外部包-package" class="headerlink" title="使用外部包(package)"></a>使用外部包(package)</h3><ol><li>需要在cargo.toml中的文件添加需要导入的包</li></ol><blockquote><p>在Cargo.toml 中添加rand作为依赖会指派Cargo从crates.io上下载rand及相关的依赖包，并使rand对当前的项目可用。</p></blockquote><figure class="highlight toml"><table><tr><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[dependencies]</span><br><span class="hljs-attr">rand</span> = <span class="hljs-string">&quot;0.5.5&quot;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>使用rand<figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> rand::Rng;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">secret_number</span> = rand::<span class="hljs-title function_ invoke__">thread_rng</span>().<span class="hljs-title function_ invoke__">gen_range</span>((<span class="hljs-number">0</span>..<span class="hljs-number">100</span>));<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="使用嵌套的路径来清理众多use语句"><a href="#使用嵌套的路径来清理众多use语句" class="headerlink" title="使用嵌套的路径来清理众多use语句"></a>使用嵌套的路径来清理众多use语句</h3><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::cmp::Ordering;<br><span class="hljs-keyword">use</span> std::io;<br><span class="hljs-comment">// 使用嵌套路径</span><br><span class="hljs-keyword">use</span> std::&#123;cmp::Ordering, io&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::io::Write;<br><span class="hljs-keyword">use</span> std::io;<br><span class="hljs-comment">// 使用嵌套路径</span><br><span class="hljs-keyword">use</span> std::io::&#123;<span class="hljs-keyword">self</span>, Write&#125;;<br></code></pre></td></tr></table></figure><h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符*"></a>通配符*</h4><p>假如你想要将所有定义在某个路径中的公共条目都导入作用域，那么可以在指定路径时在后面使用*通配符：</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::collections::*;<br>``<br><br>### 将模块拆分为不同的文件<br><br>- 模块定义时,如果模块名后面是<span class="hljs-string">&quot;;&quot;</span>, 而不是代码块, rust会从与模块名相同的文件中加载模块内容;<br><br><br>``` rust front_of_house.rs<br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">mod</span> hosting &#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">add_to_waitlist</span>() &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight rust"><figcaption><span>lib.rs</span></figcaption><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">mod</span> front_of_house;<br><br><span class="hljs-comment">// 使用pub use导出</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">use</span> crate::front_of_house::hosting;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">eat_at_restaurant</span>() &#123;<br>    hosting::<span class="hljs-title function_ invoke__">add_to_waitlist</span>();<br>    hosting::<span class="hljs-title function_ invoke__">add_to_waitlist</span>();<br>    hosting::<span class="hljs-title function_ invoke__">add_to_waitlist</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>如果是多个模块拆分</li></ul><figure class="highlight rust"><figcaption><span>src/front_of_house/hosting.rs</span></figcaption><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">add_to_waitlist</span>() &#123;&#125;<br></code></pre></td></tr></table></figure><figure class="highlight rust"><figcaption><span>src/front_of_house.rs</span></figcaption><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">mod</span> hosting;<br></code></pre></td></tr></table></figure><pre><code class="rust">mod front_of_house;// 使用pub use导出pub use crate::front_of_house::hosting;pub fn eat_at_restaurant() &#123;    hosting::add_to_waitlist();    hosting::add_to_waitlist();    hosting::add_to_waitlist();&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
          <category> 路径(Path) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> 路径 </tag>
            
            <tag> Path </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年08月20日 包(Package)和Create和模块(Module)&quot;</title>
      <link href="/2023/08/20/2023/202308/2023-08-20.%E5%8C%85(Package)%E5%92%8CCreate%E5%92%8CModule/"/>
      <url>/2023/08/20/2023/202308/2023-08-20.%E5%8C%85(Package)%E5%92%8CCreate%E5%92%8CModule/</url>
      
        <content type="html"><![CDATA[<h2 id="模块系统"><a href="#模块系统" class="headerlink" title="模块系统"></a>模块系统</h2><p>Rust提供了一系列的功能来帮助我们管理代码，包括决定哪些细节是暴露的、哪些细节是私有的，以及不同的作用域内存在哪些名称。这些功能有时被统称为模块系统（module system），它们包括：</p><pre><code>• 包（package） ：一个用于构建、测试并分享单元包的Cargo功能。• 单元包（crate） ：一个用于生成库或可执行文件的树形模块结构。• 模块（module） 及use关键字： 它们被用于控制文件结构、作用域及路径的私有性。• 路径（path） ：一种用于命名条目的方法，这些条目包括结构体、函数和模块等。</code></pre><p><img src="https://s2.loli.net/2023/08/22/5mhWl6CDycNRGVF.png"></p><h2 id="包-Package-和Create"><a href="#包-Package-和Create" class="headerlink" title="包(Package)和Create"></a>包(Package)和Create</h2><ul><li>Create的类型:binary(二进制), library(库)</li><li>Create Root(入库文件): 是源代码文件, rust编译器从这儿开始, 组成Crate的Module;</li><li>一个Package包含1个Cargo.toml文件, 它描述了如何构建这些Crates; 一个Package只能包含0个或1个library crate(库crate ), 可以有任何数量的binary crate(二进制 crate), 但必须至少有1个crate(不管是binary crate还是library crate);</li></ul><h3 id="Cargo的惯例"><a href="#Cargo的惯例" class="headerlink" title="Cargo的惯例"></a>Cargo的惯例</h3><ul><li><p>项目中src&#x2F;main.rs </p><ol><li>是一个binary crate(二进制crate)的crate root(根);</li><li>crate名与package名相同(即项目名称)</li></ol></li><li><p>项目中src&#x2F;lib.rs</p><ol><li>package包含一个library crate(库crate)</li><li>library crate 的crate root</li><li>crate名与package名相同(即项目名称)</li></ol></li><li><p>cargo会把这些crate root文件交给rustc 来构建library 或 binary</p></li><li><p>一个Package可以同时包含src&#x2F;main.rs和src&#x2F;lib.rs</p><ol><li>一个binary crate, 一个library crate</li><li>crate名与package名相同(即项目名称)</li></ol></li><li><p>一个Package可以有多个binary crate(二进制crate)</p><ul><li>文件放在src&#x2F;lib 文件夹中</li><li>每个文件是单独的binary crate(二进制crate)</li></ul></li></ul><h3 id="Carge的作用"><a href="#Carge的作用" class="headerlink" title="Carge的作用"></a>Carge的作用</h3><ul><li>可以将相关功能组合到一个作用域内, 便于在项目间进行共享,防止冲突</li></ul><h3 id="定义module来控制作用域和私有性"><a href="#定义module来控制作用域和私有性" class="headerlink" title="定义module来控制作用域和私有性"></a>定义module来控制作用域和私有性</h3><h4 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h4><blockquote><p>在一个crate内,将代码进行分组, 增加可读性, 复用性, 控制项目的私有性(public, private)</p></blockquote><ul><li><strong>从 crate 根节点开始</strong>: 当编译一个 crate, 编译器首先在 crate 根文件（通常，对于一个库 crate 而言是src&#x2F;lib.rs，对于一个二进制 crate 而言是src&#x2F;main.rs）中寻找需要被编译的代码。</li><li><strong>声明模块</strong>: 在 crate 根文件中，你可以声明一个新模块；比如，你用mod garden声明了一个叫做garden的模块。编译器会在下列路径中寻找模块代码：<ul><li>内联，在大括号中，当mod garden后方不是一个分号而是一个大括号</li><li>在文件 src&#x2F;garden.rs</li><li>在文件 src&#x2F;garden&#x2F;mod.rs</li></ul></li><li><strong>声明子模块</strong>: 在除了 crate 根节点以外的其他文件中，你可以定义子模块。比如，你可能在src&#x2F;garden.rs中定义了mod vegetables;。编译器会在以父模块命名的目录中寻找子模块代码：<ul><li>内联，在大括号中，当mod vegetables后方不是一个分号而是一个大括号</li><li>在文件 src&#x2F;garden&#x2F;vegetables.rs</li><li>在文件 src&#x2F;garden&#x2F;vegetables&#x2F;mod.rs</li></ul></li><li><strong>模块中的代码路径</strong>: 一旦一个模块是你 crate 的一部分，你可以在隐私规则允许的前提下，从同一个 crate 内的任意地方，通过代码路径引用该模块的代码。举例而言，一个 garden vegetables 模块下的Asparagus类型可以在crate::garden::vegetables::Asparagus被找到。</li><li><strong>私有 vs 公用</strong>: 一个模块里的代码默认对其父模块私有。为了使一个模块公用，应当在声明时使用pub mod替代mod。为了使一个公用模块内部的成员公用，应当在声明前使用pub。</li><li><strong>use 关键字</strong>: 在一个作用域内，use关键字创建了一个成员的快捷方式，用来减少长路径的重复。在任何可以引用crate::garden::vegetables::Asparagus的作用域，你可以通过 use crate::garden::vegetables::Asparagus;创建一个快捷方式，然后你就可以在作用域中只写Asparagus来使用该类型。</li></ul><h4 id="创建module"><a href="#创建module" class="headerlink" title="创建module"></a>创建module</h4><pre><code>- 创建module 使用 `mod` 关键字- module可嵌套- 可包含其他项(struct, enum, 常量, trait, 函数等)的定义</code></pre><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">mod</span> modules&#123;<br>    <span class="hljs-keyword">mod</span> module_one&#123;<br>        <br>    &#125;<br>    <span class="hljs-keyword">mod</span> module_two&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
          <category> 包(Package)和Create和模块(Module) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> 包 </tag>
            
            <tag> Package </tag>
            
            <tag> Create </tag>
            
            <tag> 模块 </tag>
            
            <tag> Module </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年08月19日 枚举与match表达式</title>
      <link href="/2023/08/19/2023/202308/2023-08-19.%E6%9E%9A%E4%B8%BE%E4%B8%8Ematch%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2023/08/19/2023/202308/2023-08-19.%E6%9E%9A%E4%B8%BE%E4%B8%8Ematch%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="枚举-Enum"><a href="#枚举-Enum" class="headerlink" title="枚举(Enum)"></a>枚举(Enum)</h2><p>枚举类型，通常也被简称为枚举，它允许我们列举所有可能的值来定义一个类型。</p><h3 id="定义枚举"><a href="#定义枚举" class="headerlink" title="定义枚举"></a>定义枚举</h3><ul><li>使用enmu关键字定义枚举, 使用ip地址示例</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">IpAddr</span> &#123;<br>    IP_V4,<br>    IP_V6<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>实例枚举值</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v4</span> = IpAddr::IP_V4;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>枚举值储存数据 通过IpAddr 保存Ip地址</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">IpAddr</span> &#123;<br>    <span class="hljs-title function_ invoke__">IP_V4</span>(<span class="hljs-type">String</span>),<br>    <span class="hljs-title function_ invoke__">IP_V6</span>(<span class="hljs-type">String</span>)<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">v4</span> = IpAddr::<span class="hljs-title function_ invoke__">IP_V4</span>(<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>));<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><blockquote><p>枚举可以拥有不同数量和类型的内嵌数据</p></blockquote><h3 id="Option枚举及其在空值处理方面的优势"><a href="#Option枚举及其在空值处理方面的优势" class="headerlink" title="Option枚举及其在空值处理方面的优势"></a>Option枚举及其在空值处理方面的优势</h3><p>Rust并没有像许多其他语言一样支持空值。空值 （Null）本身是一个值，但它的含义却是没有值。在设计有空值的语言中，一个变量往往处于这两种状态：空值或非空值;</p><p>空值的问题在于，当你尝试像使用非空值那样使用空值时，就会触发某种程度上的错误。因为空或非空的属性被广泛散布在程序中，所以你很难避免引起类似的问题。</p><p>但是不管怎么说，空值本身所尝试表达的概念仍然是有意义的：它代表了因为某种原因而变为无效或缺失的值。</p><p>引发这些问题的关键并不是概念本身，而是那些具体的实现措施。因此，Rust中虽然没有空值，但却提供了一个拥有类似概念的枚举，我们可以用它来标识一个值无效或缺失。<br>这个枚举就是Option<T>，它在标准库中被定义为如下所示的样子：</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Option</span>&lt;T&gt; &#123;<br>    <span class="hljs-title function_ invoke__">Some</span>(T),<br>    <span class="hljs-literal">None</span>,<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>()&#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">some_number</span> = <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">5</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">some_string</span> = <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-string">&quot;a string&quot;</span>);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">absent_number</span>: <span class="hljs-type">Option</span>&lt;<span class="hljs-type">i32</span>&gt; = <span class="hljs-literal">None</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="match表达式"><a href="#match表达式" class="headerlink" title="match表达式"></a>match表达式</h2><p>Rust中有一个异常强大的控制流运算符：match，它允许将一个值与一系列的模式相比较，并根据匹配的模式执行相应代码。模式可由字面量、变量名、通配符和许多其他东西组成；类似于java中的switch表达式,但rust中的match更强大;</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">IpAddr</span> &#123;<br>    IP_V4,<br>    IP_V6,<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">ip</span> = IpAddr::IP_V4;<br>    <span class="hljs-keyword">match</span> ip &#123;<br>        IpAddr::IP_V4 =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;ipv4地址&quot;</span>),<br>        IpAddr::IP_V6 =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;ipv6地址&quot;</span>),<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="绑定值匹配"><a href="#绑定值匹配" class="headerlink" title="绑定值匹配"></a>绑定值匹配</h4><p>匹配分支另外一个有趣的地方在于它们可以绑定被匹配对象的部分值，而这也正是我们用于从枚举变体中提取值的方法。</p><p>示例:获取匹配到ip的地址</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">IpAddr</span> &#123;<br>    <span class="hljs-title function_ invoke__">IP_V4</span>(<span class="hljs-type">String</span>),<br>    <span class="hljs-title function_ invoke__">IP_V6</span>(<span class="hljs-type">String</span>),<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">ip</span> = IpAddr::<span class="hljs-title function_ invoke__">IP_V4</span>(<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>));<br>    <span class="hljs-keyword">match</span> ip &#123;<br>        IpAddr::<span class="hljs-title function_ invoke__">IP_V4</span>(addr) =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;ipv4地址:&#123;&#125;&quot;</span>, addr),<br>        IpAddr::<span class="hljs-title function_ invoke__">IP_V6</span>(addr) =&gt; <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;ipv6地址:&#123;&#125;&quot;</span>, addr),<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="匹配Option"><a href="#匹配Option" class="headerlink" title="匹配Option"></a>匹配Option<T></h4><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">plus_one</span>(x: <span class="hljs-type">Option</span>&lt;<span class="hljs-type">i32</span>&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Option</span>&lt;<span class="hljs-type">i32</span>&gt; &#123;<br>    <span class="hljs-keyword">match</span> x &#123;<br>        <span class="hljs-literal">None</span> =&gt; <span class="hljs-literal">None</span>,<br>        <span class="hljs-title function_ invoke__">Some</span>(i) =&gt; <span class="hljs-title function_ invoke__">Some</span>(i+<span class="hljs-number">1</span>)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">num1</span> = <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">5</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">num2</span> = <span class="hljs-title function_ invoke__">plus_one</span>(num1);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">num3</span> = <span class="hljs-title function_ invoke__">plus_one</span>(<span class="hljs-literal">None</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="匹配必须穷举所有的可能"><a href="#匹配必须穷举所有的可能" class="headerlink" title="匹配必须穷举所有的可能"></a>匹配必须穷举所有的可能</h3><p>match表达式中还有另外一个需要注意的特性。你可以先来看下面这个存在bug、无法编译的plus_one函数版本:</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">plus_one</span>(x: <span class="hljs-type">Option</span>&lt;<span class="hljs-type">i32</span>&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Option</span>&lt;<span class="hljs-type">i32</span>&gt; &#123;<br>    <span class="hljs-keyword">match</span> x &#123;<br>        <span class="hljs-title function_ invoke__">Some</span>(i) =&gt; <span class="hljs-title function_ invoke__">Some</span>(i + <span class="hljs-number">1</span>),<br>    &#125;<br>&#125;<br>error[E0004]: non-exhaustive patterns: `<span class="hljs-literal">None</span>` not covered                                                                     <br>   -<span class="hljs-punctuation">-&gt;</span> src\main.rs:<span class="hljs-number">2</span>:<span class="hljs-number">11</span><br>    |<br><span class="hljs-number">2</span>   |     <span class="hljs-keyword">match</span> x &#123;<br>    |           ^ pattern `<span class="hljs-literal">None</span>` not covered<br>    |<br>note: `<span class="hljs-type">Option</span>&lt;<span class="hljs-type">i32</span>&gt;` defined here<br></code></pre></td></tr></table></figure><p>使用<code>_</code>通配符匹配未列举的类型(类似于java中switch中的default)</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">plus_one</span>(x: <span class="hljs-type">Option</span>&lt;<span class="hljs-type">i32</span>&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Option</span>&lt;<span class="hljs-type">i32</span>&gt; &#123;<br>    <span class="hljs-keyword">match</span> x &#123;<br>        <span class="hljs-title function_ invoke__">Some</span>(i) =&gt; <span class="hljs-title function_ invoke__">Some</span>(i + <span class="hljs-number">1</span>),<br>        _ =&gt; <span class="hljs-literal">None</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="简单控制流if-let"><a href="#简单控制流if-let" class="headerlink" title="简单控制流if let"></a>简单控制流if let</h3><p>if let能让我们通过一种不那么烦琐的语法结合使用if与let，并处理那些只用关心某一种匹配而忽略其他匹配的情况。</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">sum</span>: <span class="hljs-type">i32</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">num</span> = <span class="hljs-title function_ invoke__">Some</span>(<span class="hljs-number">5</span>);<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Some</span>(i) = num &#123;<br>        sum = i + <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;num 不是一个数字&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">print!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, sum);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
          <category> 枚举与match表达式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> 枚举 </tag>
            
            <tag> match </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年08月19日 struct</title>
      <link href="/2023/08/19/2023/202308/2023-08-19.%E7%BB%93%E6%9E%84%E4%BD%93(struct)/"/>
      <url>/2023/08/19/2023/202308/2023-08-19.%E7%BB%93%E6%9E%84%E4%BD%93(struct)/</url>
      
        <content type="html"><![CDATA[<h2 id="结构体-struct"><a href="#结构体-struct" class="headerlink" title="结构体(struct)"></a>结构体(struct)</h2><p>结构体，是一种自定义数据类型，它允许我们命名多个相关的值并将它们组成一个有机的结合体. 类似已java中的类;</p><h3 id="定义结构体"><a href="#定义结构体" class="headerlink" title="定义结构体"></a>定义结构体</h3><ul><li>使用<code>struct</code>关键字定义结构体, 并为整个struct命名<figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Struct</span>名称&#123;<br>    字段名称:字段类型,<br>    ..:..,<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">User</span> &#123;<br>    username: <span class="hljs-type">String</span>,<br>    email: <span class="hljs-type">String</span>,<br>    sign_in_count: <span class="hljs-type">u64</span>,<br>    active: <span class="hljs-type">bool</span>,<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>实例化结构体</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">User</span> &#123;<br>    username: <span class="hljs-type">String</span>,<br>    email: <span class="hljs-type">String</span>,<br>    sign_in_count: <span class="hljs-type">u64</span>,<br>    active: <span class="hljs-type">bool</span>,<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>()&#123;<br> <span class="hljs-keyword">let</span> <span class="hljs-variable">user</span> = User&#123;<br>    username: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;zhangsan&quot;</span>),<br>    email: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;zhangsan@mail.com&quot;</span>),<br>    sign_in_count: <span class="hljs-number">0</span>,<br>    active: <span class="hljs-literal">false</span>,<br> &#125;;<br> <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, user);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>修改结构体数据</p></li></ul><p>要修改结构体的数据需要结构体实例可变(使用<code>mut</code>修饰), 一旦实例可变，那么实例中的所有字段都将是可变的, Rust不允许我们单独声明某一部分字段的可变性.</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">user</span> = User &#123;<br>        username: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;zhangsan&quot;</span>),<br>        email: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;zhangsan@mail.com&quot;</span>),<br>        sign_in_count: <span class="hljs-number">0</span>,<br>        active: <span class="hljs-literal">false</span>,<br>    &#125;;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, user);<br><br>    <span class="hljs-comment">//修改username 为 lisi</span><br>    user.username = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;lisi&quot;</span>));<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, user);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>为<code>User</code> 这个<code>struct</code>实现类似于String::from的 User::new方法</p><ul><li>在变量名与字段名相同时使用简化版的字段初始化方法</li></ul></li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">impl</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(username: <span class="hljs-type">String</span>, email: <span class="hljs-type">String</span>, sign_in_count: <span class="hljs-type">u64</span>, active: <span class="hljs-type">bool</span>) <span class="hljs-punctuation">-&gt;</span> User &#123;<br>        User &#123;<br>            username,<br>            email,<br>            sign_in_count,<br>            active,<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">user</span> = User::<span class="hljs-title function_ invoke__">new</span>(<br>        <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;zhangsan&quot;</span>),<br>        <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;zhangsan@mail.com&quot;</span>),<br>        <span class="hljs-number">0</span>,<br>        <span class="hljs-literal">false</span>,<br>    );<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, user);<br><br>    <span class="hljs-comment">//修改username 为 lisi</span><br>    user.username = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;lisi&quot;</span>));<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, user);<br>&#125;<br></code></pre></td></tr></table></figure><pre><code>- 使用结构体更新语法根据其他实例创建新实例 使用 `..实例`</code></pre><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">user</span> = User::<span class="hljs-title function_ invoke__">new</span>(<br>        <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;zhangsan&quot;</span>),<br>        <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;zhangsan@mail.com&quot;</span>),<br>        <span class="hljs-number">0</span>,<br>        <span class="hljs-literal">false</span>,<br>    );<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">user2</span> = User &#123;<br>        username: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;lisi&quot;</span>),<br>        email: <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;lisi@mail.com&quot;</span>),<br>        ..user<br>    &#125;;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, user);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;:?&#125;&quot;</span>, user2);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="使用结构体示例"><a href="#使用结构体示例" class="headerlink" title="使用结构体示例"></a>使用结构体示例</h3><p>编写一个用于计算长方形面积的程序</p><ul><li>定义<code>Rectangle</code>类<figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[derive(Debug)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>    <span class="hljs-comment">//宽</span><br>    width: <span class="hljs-type">u32</span>,<br>    <span class="hljs-comment">//高</span><br>    height: <span class="hljs-type">u32</span>,<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>方法与函数十分相似：它们都使用fn关键字及一个名称来进行声明；它们都可以拥有参数和返回值；另外，它们都包含了一段在调用时执行的代码。但是，方法与函数依然是两个不同的概念，因为方法总是被定义在某个结构体（或者枚举类型、trait对象，我们会在第6章和第17章分别介绍它们）的上下文中，并且它们的第一个参数永远都是self，用于指代调用该方法的结构体实例。</p><ul><li>为<code>Rectangle</code>实现方法</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 实现计算面积的方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">area</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">u32</span> &#123;<br>        <span class="hljs-keyword">self</span>.height * <span class="hljs-keyword">self</span>.width<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用多个impl块定义其他方法</li></ul><blockquote><p>关联函数只要用于构造器</p></blockquote><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Rectangle</span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 通过关联函数, 创建一个长方形</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(width: <span class="hljs-type">u32</span>, height: <span class="hljs-type">u32</span>) <span class="hljs-punctuation">-&gt;</span> Rectangle &#123;<br>        Rectangle &#123; width, height &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建一个正方形</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">square</span>(size: <span class="hljs-type">u32</span>) <span class="hljs-punctuation">-&gt;</span> Rectangle &#123;<br>        Rectangle::<span class="hljs-title function_ invoke__">new</span>(size, size)<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断矩形形是否为正方形</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">isSquare</span>(&amp;<span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">bool</span> &#123;<br>        <span class="hljs-keyword">self</span>.width == <span class="hljs-keyword">self</span>.height<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="结构体的示例"><a href="#结构体的示例" class="headerlink" title="结构体的示例"></a>结构体的示例</h3><ul><li><p>空结构体(Unit-Like Struct)</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">NoneStruct</span>;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">none</span> = NoneStruct;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>元组结构体 (Tulp Stuct)</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Color</span>(<span class="hljs-type">i32</span>,<span class="hljs-type">i32</span>,<span class="hljs-type">i32</span>);<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">color</span> = <span class="hljs-title function_ invoke__">Color</span>(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="struct使用权"><a href="#struct使用权" class="headerlink" title="struct使用权"></a>struct使用权</h3><ul><li>struct实例拥有所有数据,只要struct实例是有效的,那么里面的字段数据也是有效的;</li><li>如果是针对引用类型需要在struct中定义引用类型的声明周期;</li></ul>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
          <category> 结构体(struct) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> struct </tag>
            
            <tag> 结构体 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年07月26日 Java获取系统名称</title>
      <link href="/2023/07/26/2023/202307/2022-07-26-JAVA%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E5%90%8D%E7%A7%B0/"/>
      <url>/2023/07/26/2023/202307/2022-07-26-JAVA%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E5%90%8D%E7%A7%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="Java获取系统名称"><a href="#Java获取系统名称" class="headerlink" title="Java获取系统名称"></a>Java获取系统名称</h3><ul><li>java获取操作系统名称</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>判断是否为windows</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">osName</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>);<br><span class="hljs-keyword">if</span>(osName.toLowerCase(Locale.ROOT).startsWith(<span class="hljs-string">&quot;win&quot;</span>))&#123;<br>    System.out.println(<span class="hljs-string">&quot;windows系统&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;其他系统:&quot;</span>+osName);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 系统名称 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 系统名称 </tag>
            
            <tag> OS_NAME </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年05月27日 所有权</title>
      <link href="/2023/05/27/2023/202305/2023-05-27-01.%E6%89%80%E6%9C%89%E6%9D%83(%E5%A0%86%E5%86%85%E5%AD%98VS%E6%A0%88%E5%86%85%E5%AD%98)/"/>
      <url>/2023/05/27/2023/202305/2023-05-27-01.%E6%89%80%E6%9C%89%E6%9D%83(%E5%A0%86%E5%86%85%E5%AD%98VS%E6%A0%88%E5%86%85%E5%AD%98)/</url>
      
        <content type="html"><![CDATA[<h1 id="所有权"><a href="#所有权" class="headerlink" title="所有权"></a>所有权</h1><blockquote><p>Rust 的核心功能（之一）是 所有权（ownership）, 所有权可以让rust无需GC就可以保证程序的安全运行;</p></blockquote><h2 id="Stack-栈内存-VS-Heap-堆内存"><a href="#Stack-栈内存-VS-Heap-堆内存" class="headerlink" title="Stack(栈内存) VS Heap(堆内存)"></a>Stack(栈内存) VS Heap(堆内存)</h2><h3 id="Stack-栈内存"><a href="#Stack-栈内存" class="headerlink" title="Stack(栈内存)"></a>Stack(栈内存)</h3><blockquote><p>栈以放入值的顺序存储值并以相反顺序取出值。这也被称作 后进先出LIFO（last in, first out）;</p></blockquote><ul><li>增加数据叫做进栈（pushing onto the stack）;</li><li>而移出数据叫做 出栈（popping off the stack）; </li><li>栈内存中的所有数据都必须占用已知且固定的大小;</li></ul><h3 id="Heap-堆内存"><a href="#Heap-堆内存" class="headerlink" title="Heap(堆内存)"></a>Heap(堆内存)</h3><blockquote><p>用以存放编译时大小未知或大小可能变化的数据;</p></blockquote><ul><li>当你把数据放入heap时，你会请求一定数量的空间;</li><li>操作系统在heap里找到一块足够大的空间，把它标记为在用，并返回一个指针，也就是这个空间的地址;这个过程就叫做在heap上分配空间,简称<code>&quot;分配&quot;</code>;</li></ul><h3 id="储存数据"><a href="#储存数据" class="headerlink" title="储存数据"></a>储存数据</h3><ul><li>把值压到 stack上不叫分配; 因为指针是已知固定大小的，可以把指针存放在 stack上; 但如果想要实际数据，你必须使用指针来定位。</li><li>把数据压到 stack上要比在heap上分配快得多; 因为操作系统不需要寻找用来存储新数据的空间，那个位置永远都在stack的顶端。</li><li>在heap上分配空间需要做更多的工作, 操作系统首先需要找到一个足够大的空间来存放数据，然后要做好记录方便下次分配。</li></ul><h3 id="访问数据"><a href="#访问数据" class="headerlink" title="访问数据"></a>访问数据</h3><ul><li>访问 heap 中的数据要比访问 stack 中的数据慢，因为需要通过指针才能找到heap中的数据; 对于现代的处理器来说，由于缓存的缘故，如果指令在内存中跳转的次数越少，那么速度就越快。</li><li>如果数据存放的距离比较近，那么处理器的处理速度就会更快一些 (stack上);</li><li>如果数据之间的距离比较远，那么处理速度就会慢一些 (heap上),在 heap上分配大量的空间也是需要时间的;</li></ul><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><blockquote><p>当代码调用函数时,值被传入到函数(也包括指向heap的指针)。函数本地的变量被压到stack上。当函数结束后，这些值会从stock上弹出;</p></blockquote><h3 id="所有权存在的原因"><a href="#所有权存在的原因" class="headerlink" title="所有权存在的原因"></a>所有权存在的原因</h3><ul><li>所有权解决的问题<ul><li>跟踪代码的哪些部分正在使用heap的哪些数据</li><li>最小化 heap上的重复数据量</li><li>清理heap上未使用的数据以避免空间不足.</li></ul></li><li>一旦你懂的了所有权，那么就不需要经常去想stack或heap了<br>但是知道管理 heap 数据是所有权存在的原因，这有助于解释它为什么会这样工作.</li></ul><h2 id="所有权规则"><a href="#所有权规则" class="headerlink" title="所有权规则"></a>所有权规则</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">1. Rust 中的每一个值都有一个 所有者（owner）。<br>2. 值在任一时刻有且只有一个所有者。<br>3. 当所有者（变量）离开作用域，这个值将被丢弃。<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
          <category> 所有权 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> 所有权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年05月27日 所有权(内存分配)</title>
      <link href="/2023/05/27/2023/202305/2023-05-27-02.%E6%89%80%E6%9C%89%E6%9D%83(%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D)/"/>
      <url>/2023/05/27/2023/202305/2023-05-27-02.%E6%89%80%E6%9C%89%E6%9D%83(%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D)/</url>
      
        <content type="html"><![CDATA[<h1 id="所有权-内存分配"><a href="#所有权-内存分配" class="headerlink" title="所有权(内存分配)"></a>所有权(内存分配)</h1><h2 id="所有权规则"><a href="#所有权规则" class="headerlink" title="所有权规则"></a>所有权规则</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">1. Rust 中的每一个值都有一个 所有者（owner）。<br>2. 值在任一时刻有且只有一个所有者。<br>3. 当所有者（变量）离开作用域，这个值将被丢弃。<br></code></pre></td></tr></table></figure><h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><blockquote><p>变量的作用域, 当 <code>变量</code> 进入作用域时，它就是有效的。这一直持续到离开作用域为止。</p></blockquote><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>()&#123;             <span class="hljs-comment">// s 在这里无效，它尚未声明</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-string">&quot;hello&quot;</span>;   <span class="hljs-comment">// 从此处起，s 是有效的</span><br>    <span class="hljs-comment">// 使用 s</span><br>&#125;                      <span class="hljs-comment">// 此作用域已结束，s 不再有效</span><br></code></pre></td></tr></table></figure><h2 id="内存与分配"><a href="#内存与分配" class="headerlink" title="内存与分配"></a>内存与分配</h2><ul><li>字符串字面值，在编译时就知道它的内容了，其文本内容直接被硬编码到最终的可执行文件里;<ul><li>速度快、高效。是因为其不可变性;</li></ul></li><li>Sting类型，为了支持可变性，需要在heap上分配内存来保存编译时未知的文本内容;<ul><li>操作系统必须在运行时来请求内存<ul><li>这步通过调用String:fom 来实现</li></ul></li><li>当用完String 之后，需要使用某种方式将内存返回给操作系统<ul><li>在拥有GC的语言中(Java, Go)，GC会跟踪并清理不再使用的内存;</li><li>没有GC(C,C++)，就需要我们去识别内存何时不再使用，并调用代码将它返回.<ul><li>如果忘了，那就浪费内存;</li><li>如果提前做了，变量就会非法;</li><li>如果做了两次，也是Bug。必须一次分配对应一次释放;</li></ul></li></ul></li></ul></li><li>Rust采用了不同的方式:对于某个值来说当拥有它的变量走出作用范围时，内存会立即自动的交还给操作系统(调用drop函数)。</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>&#123;<br>  <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>); <span class="hljs-comment">// 从此处起，s 是有效的</span><br>  <span class="hljs-comment">// 使用 s</span><br>&#125;                                <span class="hljs-comment">// 此作用域已结束，</span><br>                                 <span class="hljs-comment">// s 不再有效</span><br></code></pre></td></tr></table></figure><h3 id="变量与数据交互的方式（一）：移动"><a href="#变量与数据交互的方式（一）：移动" class="headerlink" title="变量与数据交互的方式（一）：移动"></a>变量与数据交互的方式（一）：移动</h3><ul><li>多个变量可以采取不同的方式与同一数据进行交互;</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = x;<br></code></pre></td></tr></table></figure><ul><li>整数是已知且固定大小的简单的值,所以说x,y对于的值5被压入到stack中;</li></ul><h4 id="String-类型的移动"><a href="#String-类型的移动" class="headerlink" title="String 类型的移动"></a>String 类型的移动</h4><p>示例:</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">s1</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br><span class="hljs-keyword">let</span> <span class="hljs-variable">s2</span> = s1;                    <span class="hljs-comment">//这步只是copy了s1在栈上的内容,并没有复制堆上的内容;</span><br></code></pre></td></tr></table></figure><blockquote><p>存放在堆内存的变量move后就会失效, 即s1失效了,无法再次访问;</p></blockquote><h3 id="变量与数据交互的方式（二）：克隆"><a href="#变量与数据交互的方式（二）：克隆" class="headerlink" title="变量与数据交互的方式（二）：克隆"></a>变量与数据交互的方式（二）：克隆</h3><ul><li>heap数据复制</li></ul><blockquote><p>需要深度复制 String 中堆上的数据，而不仅仅是栈上的数据，可以使用一个叫做 clone 的通用函数;</p></blockquote><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">s1</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br><span class="hljs-keyword">let</span> <span class="hljs-variable">s2</span> = s1.<span class="hljs-title function_ invoke__">clone</span>();<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;s1 = &#123;&#125;, s2 = &#123;&#125;&quot;</span>, s1, s2);<br></code></pre></td></tr></table></figure><ul><li>stack数据复制</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">5</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = x;<br><span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;,&#123;&#125;&quot;</span>, x, y);<br></code></pre></td></tr></table></figure><ul><li>copy trait(可以理解为实现了copy这个接口)，可以用于像整数这样完全存放在stack上面的类型;</li><li>如果一个类型实现了copy 这个 trait，那么旧的变量在赋值后仍然可用;</li><li>如果一个类型或者该类型的一部分实现了drop trait，那么Rust不允许让它再去实现 copy trait 了;</li></ul><blockquote><p>实现copy trait的类型</p></blockquote><ul><li>任何简单标量的组合类型都可以是copy的;</li><li>任何需要分配内存或某种资源的都不是copy的;</li><li>一些拥有 copy trait 的类型:<ul><li>所有的整数类型，例如u32,i32;</li><li>bool</li><li>char</li><li>所有的浮点类型，例如f32</li><li>Tuple (元组)，如果其所有的字段都是Copy的, 比如，(i32, i32) 实现了 Copy，但 (i32, String) 就没有。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
          <category> 所有权 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存分配 </tag>
            
            <tag> Rust </tag>
            
            <tag> 所有权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年05月27日 所有权与函数</title>
      <link href="/2023/05/27/2023/202305/2023-05-27-03.%E6%89%80%E6%9C%89%E6%9D%83%E4%B8%8E%E5%87%BD%E6%95%B0/"/>
      <url>/2023/05/27/2023/202305/2023-05-27-03.%E6%89%80%E6%9C%89%E6%9D%83%E4%B8%8E%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="所有权与函数"><a href="#所有权与函数" class="headerlink" title="所有权与函数"></a>所有权与函数</h2><blockquote><p>将值传递给函数与给变量赋值的原理相似。向函数传递值可能会移动或者复制，就像赋值语句一样;</p></blockquote><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>);  <span class="hljs-comment">// s 进入作用域</span><br><br>    <span class="hljs-title function_ invoke__">takes_ownership</span>(s);             <span class="hljs-comment">// s 的值移动到函数里 ...</span><br>                                    <span class="hljs-comment">// ... 所以到这里不再有效</span><br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">5</span>;                      <span class="hljs-comment">// x 进入作用域</span><br><br>    <span class="hljs-title function_ invoke__">makes_copy</span>(x);                  <span class="hljs-comment">// x 应该移动函数里，</span><br>                                    <span class="hljs-comment">// 但 i32 是 Copy 的，</span><br>                                    <span class="hljs-comment">// 所以在后面可继续使用 x</span><br><br>&#125; <span class="hljs-comment">// 这里，x 先移出了作用域，然后是 s。但因为 s 的值已被移走，</span><br>  <span class="hljs-comment">// 没有特殊之处</span><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">takes_ownership</span>(some_string: <span class="hljs-type">String</span>) &#123; <span class="hljs-comment">// some_string 进入作用域</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, some_string);<br>&#125; <span class="hljs-comment">// 这里，some_string 移出作用域并调用 `drop` 方法。</span><br>  <span class="hljs-comment">// 占用的内存被释放</span><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">makes_copy</span>(some_integer: <span class="hljs-type">i32</span>) &#123; <span class="hljs-comment">// some_integer 进入作用域</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, some_integer);<br>&#125; <span class="hljs-comment">// 这里，some_integer 移出作用域。没有特殊之处</span><br><br></code></pre></td></tr></table></figure><h2 id="返回值与作用域"><a href="#返回值与作用域" class="headerlink" title="返回值与作用域"></a>返回值与作用域</h2><blockquote><p>返回值也可以转移所有权;</p></blockquote><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s1</span> = <span class="hljs-title function_ invoke__">gives_ownership</span>();         <span class="hljs-comment">// gives_ownership 将返回值</span><br>                                        <span class="hljs-comment">// 转移给 s1</span><br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s2</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>);     <span class="hljs-comment">// s2 进入作用域</span><br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s3</span> = <span class="hljs-title function_ invoke__">takes_and_gives_back</span>(s2);  <span class="hljs-comment">// s2 被移动到</span><br>                                        <span class="hljs-comment">// takes_and_gives_back 中，</span><br>                                        <span class="hljs-comment">// 它也将返回值移给 s3</span><br>&#125; <span class="hljs-comment">// 这里，s3 移出作用域并被丢弃。s2 也移出作用域，但已被移走，</span><br>  <span class="hljs-comment">// 所以什么也不会发生。s1 离开作用域并被丢弃</span><br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">gives_ownership</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;             <span class="hljs-comment">// gives_ownership 会将</span><br>                                             <span class="hljs-comment">// 返回值移动给</span><br>                                             <span class="hljs-comment">// 调用它的函数</span><br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">some_string</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;yours&quot;</span>); <span class="hljs-comment">// some_string 进入作用域。</span><br><br>    some_string                              <span class="hljs-comment">// 返回 some_string </span><br>                                             <span class="hljs-comment">// 并移出给调用的函数</span><br>                                             <span class="hljs-comment">// </span><br>&#125;<br><br><span class="hljs-comment">// takes_and_gives_back 将传入字符串并返回该值</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">takes_and_gives_back</span>(a_string: <span class="hljs-type">String</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123; <span class="hljs-comment">// a_string 进入作用域</span><br>                                                      <span class="hljs-comment">// </span><br><br>    a_string  <span class="hljs-comment">// 返回 a_string 并移出给调用的函数</span><br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>变量的所有权总是遵循相同的模式：将值赋给另一个变量时移动它。当持有heap中数据值的变量离开作用域时，其值将通过 drop 被清理掉，除非数据被移动为另一个变量所有。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
          <category> 所有权 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> 函数 </tag>
            
            <tag> 所有权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年05月27日 引用与借用</title>
      <link href="/2023/05/27/2023/202305/2023-05-27-04.%E5%BC%95%E7%94%A8%E4%B8%8E%E5%80%9F%E7%94%A8/"/>
      <url>/2023/05/27/2023/202305/2023-05-27-04.%E5%BC%95%E7%94%A8%E4%B8%8E%E5%80%9F%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="引用与借用"><a href="#引用与借用" class="headerlink" title="引用与借用"></a>引用与借用</h2><blockquote><p>如果我们想要函数使用一个值但不获取所有权该怎么办呢？如果我们还要接着使用它的话，每次都传进去再返回来就有点烦人了，除此之外，我们也可能想返回函数体中产生的一些数据。</p></blockquote><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s1</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>    <span class="hljs-keyword">let</span> (s2, len) = <span class="hljs-title function_ invoke__">calculate_length</span>(s1);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;The length of &#x27;&#123;&#125;&#x27; is &#123;&#125;.&quot;</span>, s2, len);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">calculate_length</span>(s: <span class="hljs-type">String</span>) <span class="hljs-punctuation">-&gt;</span> (<span class="hljs-type">String</span>, <span class="hljs-type">usize</span>) &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">length</span> = s.<span class="hljs-title function_ invoke__">len</span>(); <span class="hljs-comment">// len() 返回字符串的长度</span><br>    (s, length)<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>针对上面的示例, Rust 对此提供了一个不用获取所有权就可以使用值的功能，叫做<code>引用</code>references）。</p></blockquote><blockquote><p>引用（reference）像一个指针，因为它是一个地址，我们可以由此访问储存于该地址的属于其他变量的数据。 与指针不同，引用确保指向某个特定类型的有效值。</p></blockquote><blockquote><p>** <code>&amp;</code> 符号就表示引用:允许你引用某些值而不取得其所有权<br>**</p></blockquote><p>改写上面的示例</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>()&#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s1</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">len</span> = <span class="hljs-title function_ invoke__">str_len</span>(&amp;s1);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125; 的长度是:&#123;&#125;&quot;</span>, s1, len);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">str_len</span>(s1: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">usize</span> &#123;<br>    <span class="hljs-keyword">return</span> s1.<span class="hljs-title function_ invoke__">len</span>();<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意：与使用 <code>&amp;</code> 引用相反的操作是 解引用（dereferencing），它使用解引用运算符<code>*</code>。</p></blockquote><h3 id="借用"><a href="#借用" class="headerlink" title="借用"></a>借用</h3><blockquote><p>我们把引用作为函数参数这个行为叫做借用, 和变量一样，引用默认也是不可变的不能修改, 可以在引用符号后加 mut关键字使之可以修改;</p></blockquote><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>()&#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s1</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Hello&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">len</span> = <span class="hljs-title function_ invoke__">str_len</span>(&amp;s1);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125; 的长度是:&#123;&#125;&quot;</span>, s1, len);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">s2</span> = <span class="hljs-title function_ invoke__">apd_str</span>(&amp;<span class="hljs-keyword">mut</span> s1);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">len</span> = <span class="hljs-title function_ invoke__">str_len</span>(&amp;s2);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125; 的长度是:&#123;&#125;&quot;</span>, s2, len);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">apd_str</span>(s1: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-type">String</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-type">String</span> &#123;<br>    s1.<span class="hljs-title function_ invoke__">push_str</span>(<span class="hljs-string">&quot; World&quot;</span>);<br>    s1<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">str_len</span>(s1: &amp;<span class="hljs-type">String</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">usize</span> &#123;<br>    <span class="hljs-keyword">return</span> s1.<span class="hljs-title function_ invoke__">len</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>可变引用有一个重要的限制<ol><li><code>在特定作用域内，对某一块数据，只能有一个可变的引用。</code><ul><li>这样做的好处是可在编译时防止数据竞争</li></ul></li><li><code>不可以同时拥有一个不可变的引用和一个不变的引用。</code> </li><li><code>多个不可变的引用是可以的。</code></li></ol></li><li>以下三种行为下会发生数据竞争.<ul><li>两个或多个指针同时访问同一个数据</li><li>至少有一个指针用于写入数据</li><li>没有使用任何机制来同步对数据的访问</li></ul></li><li>可以通过创建新的作用域，来允许非同时的创建多个可变引用;</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">s</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>    &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">r1</span> = &amp;<span class="hljs-keyword">mut</span> s;<br>    &#125; <span class="hljs-comment">// r1 在这里离开了作用域，所以我们完全可以创建一个新的引用</span><br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">r2</span> = &amp;<span class="hljs-keyword">mut</span> s;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="悬垂引用（Dangling-References）"><a href="#悬垂引用（Dangling-References）" class="headerlink" title="悬垂引用（Dangling References）"></a>悬垂引用（Dangling References）</h3><blockquote><p>在具有指针的语言中，很容易通过释放内存时保留指向它的指针而错误地生成一个 悬垂指针（dangling pointer），所谓悬垂指针是其指向的内存可能已经被分配给其它持有者。相比之下，在 Rust 中编译器确保引用永远也不会变成悬垂状态：当你拥有一些数据的引用，编译器确保数据不会在其引用之前离开作用域。</p></blockquote><h3 id="引用规则"><a href="#引用规则" class="headerlink" title="引用规则"></a>引用规则</h3><ul><li>在任何给定的时刻，只能满足下列条件之一:<ul><li>一个可变的引用;</li><li>任意数量不可变的引用;</li></ul></li><li>引用必须必须有效;</li></ul>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
          <category> 引用与借用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> 引用 </tag>
            
            <tag> 借用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年05月27日 切片(Slice)</title>
      <link href="/2023/05/27/2023/202305/2023-05-27-05.%E5%88%87%E7%89%87(Slice)/"/>
      <url>/2023/05/27/2023/202305/2023-05-27-05.%E5%88%87%E7%89%87(Slice)/</url>
      
        <content type="html"><![CDATA[<h2 id="切片-Slice"><a href="#切片-Slice" class="headerlink" title="切片(Slice)"></a>切片(Slice)</h2><blockquote><p>slice 允许你引用集合中一段连续的元素序列，而不用引用整个集合。slice 是一类引用，所以它没有所有权。</p></blockquote><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">str</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Some errors have detailed explanations: E0308, E0599.&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">len</span> = <span class="hljs-title function_ invoke__">first_word</span>(&amp;<span class="hljs-type">str</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;首次出现空格的位置是:&#123;&#125;&quot;</span>, <span class="hljs-type">str</span>, len);<br>    <span class="hljs-comment">//使用切片</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;的第一个单词:&#123;&#125;&quot;</span>, <span class="hljs-type">str</span>, &amp;<span class="hljs-type">str</span>[<span class="hljs-number">0</span>..len]);<br>    <span class="hljs-comment">//使用方法</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;的第一个单词:&#123;&#125;&quot;</span>, <span class="hljs-type">str</span>, <span class="hljs-type">str</span>.<span class="hljs-title function_ invoke__">split_at</span>(len - <span class="hljs-number">1</span>).<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 返回第一个空格所在位置</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">first_word</span>(s: &amp;<span class="hljs-type">String</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">usize</span> &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">arr</span> = s.<span class="hljs-title function_ invoke__">as_bytes</span>();<br>    <span class="hljs-title function_ invoke__">for</span> (index, &amp;item) <span class="hljs-keyword">in</span> arr.<span class="hljs-title function_ invoke__">iter</span>().<span class="hljs-title function_ invoke__">enumerate</span>() &#123;<br>        <span class="hljs-keyword">if</span> item == <span class="hljs-string">b&#x27; &#x27;</span> &#123;<br>            <span class="hljs-keyword">return</span> index + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-number">0</span><br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>使用字符串切片返回</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">str</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">from</span>(<span class="hljs-string">&quot;Some errors have detailed explanations: E0308, E0599.&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">word</span> = <span class="hljs-title function_ invoke__">first_word</span>(&amp;<span class="hljs-type">str</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;的第一个单词:&#123;&#125;&quot;</span>, <span class="hljs-type">str</span>, word);<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">first_word</span>(s: &amp;<span class="hljs-type">String</span>) <span class="hljs-punctuation">-&gt;</span> &amp;<span class="hljs-type">str</span> &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">arr</span> = s.<span class="hljs-title function_ invoke__">as_bytes</span>();<br>    <span class="hljs-title function_ invoke__">for</span> (index, &amp;item) <span class="hljs-keyword">in</span> arr.<span class="hljs-title function_ invoke__">iter</span>().<span class="hljs-title function_ invoke__">enumerate</span>() &#123;<br>        <span class="hljs-keyword">if</span> item == <span class="hljs-string">b&#x27; &#x27;</span> &#123;<br>            <span class="hljs-keyword">return</span> &amp;s[..index];<br>        &#125;<br>    &#125;<br>    &amp;s<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p><strong>字符串字面值就是字符串切片</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
          <category> 切片 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> 切片 </tag>
            
            <tag> Slice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年05月24日 函数</title>
      <link href="/2023/05/24/2023/202305/2023-05-24-01.%E5%87%BD%E6%95%B0/"/>
      <url>/2023/05/24/2023/202305/2023-05-24-01.%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul><li>声明函数使用<code>fn</code>关键字;</li><li>Rust代码使用蛇形命名法 （snake case）来作为规范函数和变量名称的风格。蛇形命名法只使用小写的字母进行命名，并以下画线分隔单词。</li></ul><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> 函数名(参数:类型...) <span class="hljs-punctuation">-&gt;</span> 返回值类型&#123;<br>  函数体<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>声明函数使用<code>fn</code>关键字, 如之前使用的main函数;</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>()&#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;hello world!&quot;</span>);<br>    <span class="hljs-comment">//调用函数another_function</span><br>    <span class="hljs-title function_ invoke__">another_function</span>();<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 声明函数another_function</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">another_function</span>()  &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Another Function...&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>函数的参数(parameters形态, arguments实参);</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;hello world!&quot;</span>);<br>    <span class="hljs-comment">//调用函数another_function, 1,2 parameters</span><br>    <span class="hljs-title function_ invoke__">another_function</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>&#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 声明函数another_function</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">another_function</span>(x: <span class="hljs-type">u32</span>, y: <span class="hljs-type">u32</span>) &#123; <span class="hljs-comment">//x, y arguments</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;Another Function...&quot;</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;x is :&#123;&#125;, y is:&#123;&#125;&quot;</span>, x, y);<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>函数的语句与表达式</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span> = &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = <span class="hljs-number">100</span>;<br>        a + <span class="hljs-number">100</span><br>    &#125;;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;x is :&#123;&#125;, y is:&#123;&#125;&quot;</span>, x, y);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>函数的返回值</li></ul><blockquote><p>函数可以向调用它的代码返回值。虽然你不用为这个返回值命名，但需要在箭头符号（-&gt;）的后面声明它的类型。在Rust中，函数的返回值等同于函数体最后一个表达式的值。你可以使用return关键字并指定一个值来提前从函数中返回，但大多数函数都隐式地返回了最后的表达式;</p></blockquote><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">f</span> = <span class="hljs-title function_ invoke__">five</span>();<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;f is :&#123;&#125;&quot;</span>, f);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">g</span> = <span class="hljs-title function_ invoke__">fivex</span>();<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;f is :&#123;&#125;&quot;</span>, g);<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">five</span>()<span class="hljs-punctuation">-&gt;</span><span class="hljs-type">usize</span>&#123;<br>    <span class="hljs-number">5</span><br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">fivex</span>()<span class="hljs-punctuation">-&gt;</span><span class="hljs-type">usize</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">5</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
          <category> 函数 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> 函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年05月24日 控制流-IF表达式</title>
      <link href="/2023/05/24/2023/202305/2023-05-24-02.%E6%8E%A7%E5%88%B6%E6%B5%81IF/"/>
      <url>/2023/05/24/2023/202305/2023-05-24-02.%E6%8E%A7%E5%88%B6%E6%B5%81IF/</url>
      
        <content type="html"><![CDATA[<h1 id="控制流-IF表达式"><a href="#控制流-IF表达式" class="headerlink" title="控制流-IF表达式"></a>控制流-IF表达式</h1><ul><li>IF表达式允许您根据<code>条件</code>来选择执行不同的代码分支;<ul><li>这个条件必须是<code>bool类型</code>;</li></ul></li><li>IF表达式中,与条件相关联的代码块称作分支 （arm）;</li><li>IF表达式中可以添加一个可选的else表达式, 组成if .. else ..表达式;</li></ul><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">if</span> 条件 &#123;<br>    todo!();<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> 条件 &#123;<br>    todo!();<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    todo!();<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>示例1 (if .. else…)</li></ol><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>()&#123;<br>    <span class="hljs-keyword">if</span> <span class="hljs-number">1</span>==<span class="hljs-number">1</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;1=1&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;1&lt;&gt;1&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>示例2(if .. else if … else…)</li></ol><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">number</span> = <span class="hljs-number">6</span>;<br>    <span class="hljs-keyword">if</span> number % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;number is divisible by 4&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> number % <span class="hljs-number">3</span> == <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;number is divisible by 3&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> number % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;number is divisible by 2&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;number is divisible by 2 or 3 or 4&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>过多的else if表达式可能会使我们的代码变得杂乱无章。在第6章会介绍Rust中另外一个强大的分支结构语法match，它可以被用来应对这种情况。</p></blockquote><ul><li>if表达式的返回值(if表达式的返回值必须一致);</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">number</span> = <span class="hljs-number">6</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">tips</span> = <span class="hljs-keyword">if</span> number % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-string">&quot;number is divisible by 4&quot;</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> number % <span class="hljs-number">3</span> == <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-string">&quot;number is divisible by 3&quot;</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> number % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-string">&quot;number is divisible by 2&quot;</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-string">&quot;number is divisible by 2 or 3 or 4&quot;</span><br>    &#125;;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>,tips);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
          <category> 控制流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> 控制流 </tag>
            
            <tag> IF表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年05月24日 控制流-循环(loop,while,for)</title>
      <link href="/2023/05/24/2023/202305/2023-05-24-03.%E6%8E%A7%E5%88%B6%E6%B5%81%E5%BE%AA%E7%8E%AF/"/>
      <url>/2023/05/24/2023/202305/2023-05-24-03.%E6%8E%A7%E5%88%B6%E6%B5%81%E5%BE%AA%E7%8E%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="控制流-循环-loop-while-for"><a href="#控制流-循环-loop-while-for" class="headerlink" title="控制流-循环(loop,while,for)"></a>控制流-循环(loop,while,for)</h1><blockquote><p>rust提供了3种循环 <code>loop</code>, <code>while</code>, <code>for</code></p></blockquote><h2 id="loop循环"><a href="#loop循环" class="headerlink" title="loop循环"></a>loop循环</h2><blockquote><p>loop关键字告诉rust反复执行一段代码,直到程序停止(遇见break关键字, Ctrl+C);</p></blockquote><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>()&#123;<br>    <span class="hljs-keyword">loop</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;执行中....&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li>打印1加到100 的值</li></ol><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-comment">//打印1+100的值</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">total</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">i</span> = <span class="hljs-number">1</span>;<br>    total = <span class="hljs-keyword">loop</span> &#123;<br>        total += i;<br>        <span class="hljs-keyword">if</span> i == <span class="hljs-number">100</span> &#123;<br>            <span class="hljs-keyword">break</span> total;<br>        &#125;<br>        i += <span class="hljs-number">1</span>;<br>    &#125;;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, total)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="循环标签：在多个循环之间消除歧义-break-continue"><a href="#循环标签：在多个循环之间消除歧义-break-continue" class="headerlink" title="循环标签：在多个循环之间消除歧义 break, continue"></a>循环标签：在多个循环之间消除歧义 break, continue</h3><blockquote><p>如果存在嵌套循环，break 和 continue 应用于此时最内层的循环。你可以选择在一个循环上指定一个 循环标签（loop label），然后将标签与 break 或 continue 一起使用，使这些关键字应用于已标记的循环而不是最内层的循环。</p></blockquote><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">count</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//必须以&#x27;开头</span><br>    <span class="hljs-symbol">&#x27;counting_up</span>: <span class="hljs-keyword">loop</span> &#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;count = &#123;count&#125;&quot;</span>);<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">remaining</span> = <span class="hljs-number">10</span>;<br><br>        <span class="hljs-keyword">loop</span> &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;remaining = &#123;remaining&#125;&quot;</span>);<br>            <span class="hljs-keyword">if</span> remaining == <span class="hljs-number">9</span> &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> count == <span class="hljs-number">2</span> &#123;<br>                <span class="hljs-keyword">break</span> <span class="hljs-symbol">&#x27;counting_up</span>;<br>            &#125;<br>            remaining -= <span class="hljs-number">1</span>;<br>        &#125;<br>        count += <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;End count = &#123;count&#125;&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><ul><li>每次执行循环体之前判断下条件</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123; <br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">number</span> = <span class="hljs-number">3</span>; <br>    <span class="hljs-keyword">while</span> number != <span class="hljs-number">0</span> &#123; <br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;!&quot;</span>, number); <br>        number = number - <span class="hljs-number">1</span>; <br>    &#125; <br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;LIFTOFF!!!&quot;</span>); <br>&#125; <br></code></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123; <br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>]; <br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">index</span> = <span class="hljs-number">0</span>; <br> <br>    <span class="hljs-keyword">while</span> index &lt; a.<span class="hljs-title function_ invoke__">len</span>() &#123; <br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;the value is: &#123;&#125;&quot;</span>, a[index]); <br> <br>        index = index + <span class="hljs-number">1</span>; <br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><ul><li>可以使用while或loop来遍历集合,效率低且容易出错;</li><li>使用for循环 简洁, 紧凑;</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">number</span> <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>..<span class="hljs-number">4</span>).<span class="hljs-title function_ invoke__">rev</span>()&#123;<br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;!&quot;</span>, number); <br>    &#125; <br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;LIFTOFF!!!&quot;</span>); <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123; <br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">a</span> = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>]; <br> <br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">element</span> <span class="hljs-keyword">in</span> a.<span class="hljs-title function_ invoke__">iter</span>() &#123; <br>        <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;the value is: &#123;&#125;&quot;</span>, element); <br>    &#125; <br>&#125; <br></code></pre></td></tr></table></figure><h3 id="补充-Range"><a href="#补充-Range" class="headerlink" title="补充 Range"></a>补充 Range</h3><blockquote><p>Range来实现这一目的，它被用来生成从一个数字开始到另一个数字结束之前的所有数字序列;</p></blockquote><ul><li>(1..5) 生成 1,2,3,4的数字序列;</li><li>(1..&#x3D;5) 生成 1,2,3,4,5的数字序列;</li><li>rev() 方法翻转序列;</li></ul>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
          <category> 控制流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> 控制流 </tag>
            
            <tag> 循环 </tag>
            
            <tag> loop </tag>
            
            <tag> while </tag>
            
            <tag> for </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年05月23日 数据类型(复合类型)</title>
      <link href="/2023/05/23/2023/202305/2023-05-23-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B(%E5%A4%8D%E5%90%88%E7%B1%BB%E5%9E%8B)/"/>
      <url>/2023/05/23/2023/202305/2023-05-23-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B(%E5%A4%8D%E5%90%88%E7%B1%BB%E5%9E%8B)/</url>
      
        <content type="html"><![CDATA[<h1 id="数据类型-复合类型"><a href="#数据类型-复合类型" class="headerlink" title="数据类型(复合类型)"></a>数据类型(复合类型)</h1><ul><li>复合类型 （compound type）可以将多个不同类型的值组合为一个类型。Rust提供了两种内置的基础复合类型：元组 （tuple）和数组 （array）。</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123; <br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">tup</span>: (<span class="hljs-type">i32</span>, <span class="hljs-type">f64</span>, <span class="hljs-type">u8</span>) = (<span class="hljs-number">500</span>, <span class="hljs-number">6.4</span>, <span class="hljs-number">1</span>); <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="元组类型-tuple"><a href="#元组类型-tuple" class="headerlink" title="元组类型(tuple)"></a>元组类型(tuple)</h2><ul><li>可以把多个不同类型值组合进一个tuple类型中;</li><li>tuple长度是固定的,声明完成结束后就无法修改;</li><li>使用.标记法访问tuple的元素(默认0开始);</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">tup</span>: (<span class="hljs-type">i32</span>, <span class="hljs-type">f64</span>, <span class="hljs-type">u8</span>) = (<span class="hljs-number">500</span>, <span class="hljs-number">6.4</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//访问tuple元素</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;,&#123;&#125;,&#123;&#125;&quot;</span>, tup.<span class="hljs-number">0</span>, tup.<span class="hljs-number">1</span>, tup.<span class="hljs-number">2</span>);<br>    <span class="hljs-comment">//解构</span><br>    <span class="hljs-keyword">let</span> (x, y, z) = tup;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;x:&#123;&#125;, y:&#123;&#125;, z:&#123;&#125;&quot;</span>, x, y, z);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="数组类型-存放在栈内存上"><a href="#数组类型-存放在栈内存上" class="headerlink" title="数组类型(存放在栈内存上)"></a>数组类型(存放在栈内存上)</h2><ul><li>可以把多个相同类型值组合进一个数组类型中;</li><li>数组长度是固定的,声明完成结束后就无法修改;</li><li>使用.标记法访问tuple的元素(默认0开始);</li></ul><p>数组定义<br>let 变量名:[类型;长度] &#x3D; [值]</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">let</span> <span class="hljs-variable">a</span>:[<span class="hljs-type">i32</span>;<span class="hljs-number">5</span>] = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure><p>如果数组中的每个值都相同可以使用<code>let a[i32;5] = [3;5]</code>; 即 <code>let a:[i32;5] = [3,3,3,3,3]</code></p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">a</span>:[<span class="hljs-type">i32</span>;<span class="hljs-number">5</span>] = [<span class="hljs-number">3</span>;<span class="hljs-number">5</span>];<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;&quot;</span>,a[<span class="hljs-number">0</span>],a[<span class="hljs-number">1</span>],a[<span class="hljs-number">2</span>],a[<span class="hljs-number">3</span>],a[<span class="hljs-number">4</span>]);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">a</span>:[<span class="hljs-type">i32</span>;<span class="hljs-number">5</span>] = [<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>];<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;&quot;</span>,a[<span class="hljs-number">0</span>],a[<span class="hljs-number">1</span>],a[<span class="hljs-number">2</span>],a[<span class="hljs-number">3</span>],a[<span class="hljs-number">4</span>]);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">color</span> = [<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;green&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span>];<br>    <span class="hljs-comment">//访问数组元素</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;,&#123;&#125;,&#123;&#125;&quot;</span>, color[<span class="hljs-number">0</span>], color.<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_ invoke__">unwrap</span>(), color.<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-number">2</span>).<span class="hljs-title function_ invoke__">unwrap</span>());<br>    <span class="hljs-comment">//解构</span><br>    <span class="hljs-keyword">let</span> [x, y, z] = color;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;x:&#123;&#125;, y:&#123;&#125;, z:&#123;&#125;&quot;</span>, x, y, z);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="数组越界"><a href="#数组越界" class="headerlink" title="数组越界"></a>数组越界</h4><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust">error: this operation will panic at runtime<br> -<span class="hljs-punctuation">-&gt;</span> src\main.rs:<span class="hljs-number">5</span>:<span class="hljs-number">51</span><br>  |<br><span class="hljs-number">5</span> |     <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;,&#123;&#125;&quot;</span>,a[<span class="hljs-number">0</span>],a[<span class="hljs-number">1</span>],a[<span class="hljs-number">2</span>],a[<span class="hljs-number">3</span>],a[<span class="hljs-number">5</span>]);<br>  |                                                   ^^^^ index out of bounds: the length is <span class="hljs-number">5</span> but the index is <span class="hljs-number">5</span><br>  |<br>  = note: `<span class="hljs-meta">#[deny(unconditional_panic)]</span>` on by default<br><br>error: could not compile `hello_cargo` due to previous error<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
          <category> 数据类型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> 数据类型 </tag>
            
            <tag> 复合类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年05月23日 数据类型(标量类型)</title>
      <link href="/2023/05/23/2023/202305/2023-05-23-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B(%E6%A0%87%E9%87%8F%E7%B1%BB%E5%9E%8B)/"/>
      <url>/2023/05/23/2023/202305/2023-05-23-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B(%E6%A0%87%E9%87%8F%E7%B1%BB%E5%9E%8B)/</url>
      
        <content type="html"><![CDATA[<h1 id="数据类型-标量类型"><a href="#数据类型-标量类型" class="headerlink" title="数据类型(标量类型)"></a>数据类型(标量类型)</h1><ul><li>rust包含:标量类型 （scalar）和复合类型 （compound）;</li><li>如果编译器无法自动推导出变量的类型，为了避免混淆，需要我们手动地添加类型标注;</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">guess</span> = <span class="hljs-string">&quot;42&quot;</span>.<span class="hljs-title function_ invoke__">parse</span>().<span class="hljs-title function_ invoke__">expect</span>(<span class="hljs-string">&quot;not a number...&quot;</span>);<br>    <span class="hljs-comment">//expect表示解析错误提示</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="标量类型"><a href="#标量类型" class="headerlink" title="标量类型"></a>标量类型</h2><ul><li>标量 类型是单个值类型的统称。Rust中内建了4种基础的标量类型：整数、浮点数、布尔值及字符;</li></ul><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h3><ul><li><p>整数 是指那些没有小数部分的数字;</p><table><thead><tr><th>长度</th><th>有符号(i开头)</th><th>无符号(u开头)</th></tr></thead><tbody><tr><td>8-bit</td><td>i8</td><td>u8</td></tr><tr><td>16-bit</td><td>i16</td><td>u16</td></tr><tr><td>32-bit</td><td>i32</td><td>u32</td></tr><tr><td>64-bit</td><td>i64</td><td>u64</td></tr><tr><td>arch</td><td>isize</td><td>usize</td></tr></tbody></table><blockquote><p>isize和usize两种特殊的整数类型，它们的长度取决于程序运行的目标平台。在64位架构上，它们就是64位的，而在32位架构上，它们就是32位的;</p></blockquote></li><li><p>有符号的取值范围: <code>-(2^n - 1) ~ 2^n-1 - 1</code>;</p></li><li><p>有符号的取值范围: <code>0 ~ 2^n - 1</code>;</p></li></ul><h4 id="整数的字面值"><a href="#整数的字面值" class="headerlink" title="整数的字面值"></a>整数的字面值</h4><table><thead><tr><th>整数字面量</th><th>示例</th></tr></thead><tbody><tr><td>Decimal</td><td>98_222</td></tr><tr><td>Hex</td><td>0xff_aa</td></tr><tr><td>Octal</td><td>0o77_777</td></tr><tr><td>Binary</td><td>0b1111_0000</td></tr><tr><td>Byte(u8 only)</td><td>b’A’</td></tr></tbody></table><blockquote><p>除了Byte，其余所有的字面量都可以使用类型后缀，比如57u8，代表一个使用了u8类型的整数57。同时你也可以使用_作为分隔符以方便读数，比如1_000。</p></blockquote><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">i</span> = <span class="hljs-number">100_199u32</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;the num i is:&#123;&#125;&quot;</span>, i);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">i</span> = <span class="hljs-number">0x100_FFAAi128</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;the num i is:&#123;&#125;&quot;</span>, i);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">i</span> = <span class="hljs-number">0o70_123u32</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;the num i is:&#123;&#125;&quot;</span>, i);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">i</span> = <span class="hljs-number">0b1111_0000i32</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;the num i is:&#123;&#125;&quot;</span>, i);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">i</span> = <span class="hljs-string">b&#x27;X&#x27;</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;the bytes i is:&#123;&#125;&quot;</span>, i);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="整数溢出"><a href="#整数溢出" class="headerlink" title="整数溢出"></a><strong>整数溢出</strong></h4><p>假设你有一个u8类型的变量，它可以存储从0到255的数字。当你尝试将该变量修改为某个超出范围的值（比如256）时，就会发生整数溢出。Rust在这一行为中拥有某些有趣的规则。如果你在调试（debug）模式下进行编译，那么Rust就会在程序中包含整数溢出的运行时检测代码，并在整数溢出发生时触发程序的panic。</p><p>如果你在编译时使用了带有–release标记的发布（release）模式，那么Rust就不会包含那些可能会触发panic的检查代码。作为替代，Rust会在溢出发生时执行二进制补码环绕。简而言之，任何超出类型最大值的数值都会被“环绕”为类型最小值。以u8为例，256会变为0，257会变为1，以此类推。虽然程序不会发生panic，但变量中实际存储的值也许会让你大吃一惊。那些依赖于整数溢出时环绕行为的代码应该被视作错误代码。假如你确实希望显式地进行环绕行为，那么你可以使用标准库中的类型Wrapping。</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>()&#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">i</span> = <span class="hljs-number">256u8</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;the num i is:&#123;&#125;&quot;</span>, i);<br>&#125;<br> -<span class="hljs-punctuation">-&gt;</span> src\main.rs:<span class="hljs-number">2</span>:<span class="hljs-number">13</span><br>  |<br><span class="hljs-number">2</span> |     <span class="hljs-keyword">let</span> <span class="hljs-variable">i</span> = <span class="hljs-number">256u8</span>;<br>  |             ^^^^^<br>  |<br>  = note: the literal `<span class="hljs-number">256u8</span>` does not fit into the <span class="hljs-keyword">type</span> `<span class="hljs-type">u8</span>` whose range is `<span class="hljs-number">0</span>..=<span class="hljs-number">255</span>`<br>  = note: `<span class="hljs-meta">#[deny(overflowing_literals)]</span>` on by default<br></code></pre></td></tr></table></figure><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h3><ul><li><p>浮点类型就是带有小数的数字。这两种类型是f32和f64，它们分别占用32位和64位空间, rust默认推导为f64;</p></li><li><p>f32, 32位 单精度;</p></li><li><p>f64, 64位 双精度;</p></li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">2.0</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;this is num x:&#123;&#125; type is:f64&quot;</span>, x);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">y</span>: <span class="hljs-type">f32</span> = <span class="hljs-number">3.0</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;this is num x:&#123;&#125; type is:f32&quot;</span>, y);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><ul><li>true和false，它会占据单个字节的空间大小</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">b</span> = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">c</span>: <span class="hljs-type">bool</span> = <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字符-char"><a href="#字符-char" class="headerlink" title="字符(char)"></a>字符(char)</h3><ul><li>字符类型的字面量使用单引号(‘)</li><li>char类型占4字节，是一个Unicode标量值;</li><li>Unicode标量可以描述从U+0000到U+D7FF以及从U+E000到U+10FFFF范围内的所有值(拼音字母、中文、日文、韩文、零长度空白字符，甚至是emoji表情);</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123; <br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">c</span> = <span class="hljs-string">&#x27;z&#x27;</span>; <br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">z</span> = &#x27;😂&#x27;; <br> &#125; <br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
          <category> 数据类型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> 数据类型 </tag>
            
            <tag> 标量类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年05月10日 Rust注释</title>
      <link href="/2023/05/10/2023/202305/2023-05-10-%E6%B3%A8%E9%87%8A/"/>
      <url>/2023/05/10/2023/202305/2023-05-10-%E6%B3%A8%E9%87%8A/</url>
      
        <content type="html"><![CDATA[<h3 id="Rust注释"><a href="#Rust注释" class="headerlink" title="Rust注释"></a>Rust注释</h3><p>在Rust中，注释必须使用两道斜杠开始，并持续到本行结尾。对于那些超过一行的注释，你需要像下面这样在每一行前面都加上;</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>()&#123;<br>    <span class="hljs-comment">//打印一个数</span><br>    <span class="hljs-comment">//这个数是5</span><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, <span class="hljs-number">5</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h4><p>用于生成文档</p><ol><li>生成html文档;</li><li>显示公共api的文档注释,即告知使用者api怎么使用</li><li>使用<code>///</code></li><li>支持Markdown格式</li><li>放在在被说明条目之前</li></ol><ul><li>示例给方法add添加文档注释</li></ul><figure class="highlight rs"><table><tr><td class="code"><pre><code class="hljs rs"><span class="hljs-comment">///</span><br><span class="hljs-comment">/// # Examples</span><br><span class="hljs-comment">/// ```</span><br><span class="hljs-comment">/// let x = 10;</span><br><span class="hljs-comment">/// let y = 20;</span><br><span class="hljs-comment">/// assert_eq!(30, hello_cargo::add(x,y));</span><br><span class="hljs-comment">/// ```</span><br><span class="hljs-comment">/// # Panics</span><br><span class="hljs-comment">/// x, y 不是数字</span><br><span class="hljs-comment">/// # Errors错误</span><br><span class="hljs-comment">/// x, y 超出范围</span><br><span class="hljs-comment">/// # Safety不安全调用</span><br><span class="hljs-comment">/// 无</span><br><span class="hljs-comment">/// </span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">add</span>(x:<span class="hljs-type">i32</span>, y:<span class="hljs-type">i32</span>)<span class="hljs-punctuation">-&gt;</span><span class="hljs-type">i32</span>&#123;<br>    x+y<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>使用 cargo doc生成文档, 生成的文档在target&#x2F;doc文件夹中;</p></blockquote><blockquote><p>使用 cargo doc –open 生成文档并打开;</p></blockquote><p><img src="https://s2.loli.net/2023/10/23/VWSje9rq6Ocp5Li.png"></p><h5 id="文档注释作为测试"><a href="#文档注释作为测试" class="headerlink" title="文档注释作为测试"></a>文档注释作为测试</h5><blockquote><p>在文档注释中增加示例可以帮助用户理解代码库的使用方式。除此之外，cargo test会在执行时将文档注释中的代码示例作为测试去运行。</p></blockquote><figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd">PS D:\delelop\rust_1.<span class="hljs-number">72</span>.<span class="hljs-number">1</span>\workspace\hello_cargo&gt; cargo test<br><span class="hljs-function">warning: <span class="hljs-title">unused</span> <span class="hljs-title">manifest</span> <span class="hljs-title">key</span>: <span class="hljs-title">profile.release.rand</span></span><br><span class="hljs-function">   <span class="hljs-title">Compiling</span> <span class="hljs-title">hello_cargo</span> <span class="hljs-title">v0</span>.1.0 (<span class="hljs-title">D</span>:\<span class="hljs-title">delelop</span>\<span class="hljs-title">rust_1</span>.72.1\<span class="hljs-title">workspace</span>\<span class="hljs-title">hello_cargo</span>)</span><br><span class="hljs-function">    <span class="hljs-title">Finished</span> <span class="hljs-title">test</span> [<span class="hljs-title">unoptimized</span> + <span class="hljs-title">debuginfo</span>] <span class="hljs-title">target</span>(<span class="hljs-title">s</span>) <span class="hljs-title">in</span> 0.48<span class="hljs-title">s</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">running</span> 0 <span class="hljs-title">tests</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">test</span> <span class="hljs-title">result</span>: <span class="hljs-title">ok</span>. 0 <span class="hljs-title">passed</span>; 0 <span class="hljs-title">failed</span>; 0 <span class="hljs-title">ignored</span>; 0 <span class="hljs-title">measured</span>; 0 <span class="hljs-title">filtered</span> <span class="hljs-title">out</span>; <span class="hljs-title">finished</span> <span class="hljs-title">in</span> 0.00<span class="hljs-title">s</span></span><br><span class="hljs-function">     <span class="hljs-title">Running</span> <span class="hljs-title">unittests</span> <span class="hljs-title">src</span>\<span class="hljs-title">main.rs</span> (<span class="hljs-title">target</span>\<span class="hljs-title">debug</span>\<span class="hljs-title">deps</span>\<span class="hljs-title">hello_cargo</span>-<span class="hljs-title">eedceaa576eb67a8.exe</span>)</span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">running</span> 0 <span class="hljs-title">tests</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"></span><br><span class="hljs-function">   <span class="hljs-title">Doc</span>-<span class="hljs-title">tests</span> <span class="hljs-title">hello_cargo</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">running</span> 1 <span class="hljs-title">test</span></span><br><span class="hljs-function"><span class="hljs-title">test</span> <span class="hljs-title">src</span>\<span class="hljs-title">lib.rs</span> - <span class="hljs-title">add</span> (<span class="hljs-title">line</span> 14) ... <span class="hljs-title">ok</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">test</span> <span class="hljs-title">result</span>: <span class="hljs-title">ok</span>. 1 <span class="hljs-title">passed</span>; 0 <span class="hljs-title">failed</span>; 0 <span class="hljs-title">ignored</span>; 0 <span class="hljs-title">measured</span>; 0 <span class="hljs-title">filtered</span> <span class="hljs-title">out</span>; <span class="hljs-title">finished</span> <span class="hljs-title">in</span> 0.60<span class="hljs-title">s</span></span><br></code></pre></td></tr></table></figure><h5 id="文档注释2"><a href="#文档注释2" class="headerlink" title="文档注释2- //!"></a>文档注释2- <code>//!</code></h5><blockquote><p>**<code>//!</code>**，它可以为包裹当前注释的外层条目（而不是紧随注释之后的条目）添加文档。这种文档注释通常被用在包的根文件（也就是惯例上的 src&#x2F;libs.rs ）或模块的根文件上，分别为整个包或整个模块提供文档。</p></blockquote><ul><li>给lib.rs添加注释</li></ul><figure class="highlight rs"><table><tr><td class="code"><pre><code class="hljs rs"><span class="hljs-comment">//! # hello_cargo</span><br><span class="hljs-comment">//!</span><br><span class="hljs-comment">//! hello_cargo是一系列工具的集合</span><br><span class="hljs-comment">//! </span><br><span class="hljs-comment">//! 这些工具被用来简化特定的计算操作</span><br><span class="hljs-comment">//! </span><br><span class="hljs-keyword">mod</span> front_of_house;<br><br><span class="hljs-comment">// 使用pub use导出</span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">use</span> crate::front_of_house::hosting;<br><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">eat_at_restaurant</span>() &#123;<br>    hosting::<span class="hljs-title function_ invoke__">add_to_waitlist</span>();<br>    hosting::<span class="hljs-title function_ invoke__">add_to_waitlist</span>();<br>    hosting::<span class="hljs-title function_ invoke__">add_to_waitlist</span>();<br>&#125;<br><br><span class="hljs-comment">///</span><br><span class="hljs-comment">/// # Examples</span><br><span class="hljs-comment">/// ```</span><br><span class="hljs-comment">/// let x = 10;</span><br><span class="hljs-comment">/// let y = 20;</span><br><span class="hljs-comment">/// assert_eq!(30, hello_cargo::add(x,y));</span><br><span class="hljs-comment">/// ```</span><br><span class="hljs-comment">/// # Panics</span><br><span class="hljs-comment">/// x, y 不是数字</span><br><span class="hljs-comment">/// # Errors错误</span><br><span class="hljs-comment">/// x, y 超出范围</span><br><span class="hljs-comment">/// # Safety不安全调用</span><br><span class="hljs-comment">/// 无</span><br><span class="hljs-comment">/// </span><br><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">add</span>(x:<span class="hljs-type">i32</span>, y:<span class="hljs-type">i32</span>)<span class="hljs-punctuation">-&gt;</span><span class="hljs-type">i32</span>&#123;<br>    x+y<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/10/23/XqekYInyUBfrC6N.png"></p><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><table><thead><tr><th>常用的(文档注释)章节</th><th>描述</th></tr></thead><tbody><tr><td>Examples</td><td>给代码添加示例代码</td></tr><tr><td>Panics</td><td>指出函数可能引发panic的场景。不想触发panic的调用者应当确保自己的代码不会在这些场景下调用该函数</td></tr><tr><td>Errors</td><td>当函数返回Result作为结果时，这个区域会指出可能出现的错误，以及造成这些错误的具体原因，它可以帮助调用者在编写代码时为不同的错误采取不同的措施</td></tr><tr><td>Safety</td><td>当函数使用了unsafe关键字时，这个区域会指出当前函数不安全的原因，以及调用者应当确保的使用前提</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
          <category> 注释 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> 注释 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年05月02日 Rust变量与可变性</title>
      <link href="/2023/05/02/2023/202305/2023-05-02-%E5%8F%98%E9%87%8F%E4%B8%8E%E5%8F%AF%E5%8F%98%E6%80%A7/"/>
      <url>/2023/05/02/2023/202305/2023-05-02-%E5%8F%98%E9%87%8F%E4%B8%8E%E5%8F%AF%E5%8F%98%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="Rust变量与可变性"><a href="#Rust变量与可变性" class="headerlink" title="Rust变量与可变性"></a>Rust变量与可变性</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li>声明变量使用<code>let</code>关键字<figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>()&#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">i</span> = <span class="hljs-number">10</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;this num i is :&#123;&#125;&quot;</span>, i);<br>&#125;<br></code></pre></td></tr></table></figure></li><li>默认情况下声明的变量是不可以修改的(不可变的), 可以在变量名称前面加 <code>mut</code> 关键字 使用可变</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>()&#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">i</span> = <span class="hljs-number">10</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;this num i is :&#123;&#125;&quot;</span>, i);<br>    i = <span class="hljs-number">100</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;this num i is :&#123;&#125;&quot;</span>, i);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="常量-constant"><a href="#常量-constant" class="headerlink" title="常量(constant)"></a>常量(constant)</h2><ul><li>常量是永远不可变的</li><li>常量不可以使用<code>mut</code>关键字</li><li>声明常量使用<code>const</code>关键字, 类型必须被标注;</li><li>常量可以在如何作用域中声明,包含全局作用域;</li><li>常量只可以帮到到常量表达式,无法绑定到导函数的调用结果或只能在运行时才能计算出的值;</li><li>在程序运行期间,常量在其声明的作用域内一直有效;</li><li>rust中常量名大写 eg:</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">const</span> MAX_POINTS: <span class="hljs-type">i32</span> = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;常量MAX_POINTS的值:&#123;&#125;&quot;</span>, MAX_POINTS);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="隐藏-shadowing"><a href="#隐藏-shadowing" class="headerlink" title="隐藏(shadowing)"></a>隐藏(shadowing)</h2><ul><li>rust中可以使用相同的名字声明新的变量, 新的变量就会shadow(隐藏)之前声明的同名变量;</li><li>由于重复使用<code>let</code>关键字会创建出新的变量，所以我们可以在复用变量名称的同时改变它的类型;</li></ul><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-number">5</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;the value of x is &#123;&#125;&quot;</span>, x);<br>    <span class="hljs-comment">//隐藏x</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = x + <span class="hljs-number">1</span>; <br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;the value of x is &#123;&#125;&quot;</span>, x);<br>    <span class="hljs-comment">//变更x 的类型</span><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">x</span> = <span class="hljs-string">&quot;hello rust&quot;</span>;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;the value of x is &#123;&#125;&quot;</span>, x);<br>    <br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">x</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">new</span>();<br>    x.<span class="hljs-title function_ invoke__">push_str</span>(<span class="hljs-string">&quot;push&quot;</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;the value of x is &#123;&#125;&quot;</span>, x);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
          <category> 变量 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> 变量 </tag>
            
            <tag> 可变性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年05月01日 Rust安装与Cargo</title>
      <link href="/2023/05/01/2023/202305/2023-05-01-Rust%E5%AE%89%E8%A3%85/"/>
      <url>/2023/05/01/2023/202305/2023-05-01-Rust%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h3 id="Rust安装"><a href="#Rust安装" class="headerlink" title="Rust安装"></a>Rust安装</h3><h4 id="Rust安装-1"><a href="#Rust安装-1" class="headerlink" title="Rust安装"></a>Rust安装</h4><p>官网: <a href="https://www.rust-lang.org/">https://www.rust-lang.org</a></p><ul><li>linux or Mac</li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">curl https://sh.rustip.rs -sSf|sh<br></code></pre></td></tr></table></figure><ul><li>windows</li></ul><blockquote><p>官网下载安装文件</p></blockquote><ul><li>Windows Subsystem for Linux(linux 子系统)</li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">curl --proto <span class="hljs-string">&#x27;=https&#x27;</span> --tlsv1.2 -sSf https://sh.rustup.rs | sh<br></code></pre></td></tr></table></figure><h4 id="安装验证-查看版本"><a href="#安装验证-查看版本" class="headerlink" title="安装验证(查看版本)"></a>安装验证(查看版本)</h4><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">rustc --version<br></code></pre></td></tr></table></figure><p>输出: rustc 1.69.0 (84c898d65 2023-04-16)</p><blockquote><p>结果格式 <code>rustc x.y.z(abcabcabc yyyy-mm-dd)</code>;<br>显示版本号 x.y.z, commit hash, commit日期</p></blockquote><h4 id="更新与卸载"><a href="#更新与卸载" class="headerlink" title="更新与卸载"></a>更新与卸载</h4><ul><li>更新</li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">rustup update<br></code></pre></td></tr></table></figure><ul><li>卸载</li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">rustup self uninstall<br></code></pre></td></tr></table></figure><h4 id="本地文档"><a href="#本地文档" class="headerlink" title="本地文档"></a>本地文档</h4><p>安装rust的时候,会安装本地文档, 可离线浏览; 运行<code>rustup doc</code> 打开;</p><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">rustup doc<br></code></pre></td></tr></table></figure><h3 id="rust版本管理工具cargo"><a href="#rust版本管理工具cargo" class="headerlink" title="rust版本管理工具cargo"></a>rust版本管理工具cargo</h3><h4 id="查看版本号"><a href="#查看版本号" class="headerlink" title="查看版本号"></a>查看版本号</h4><blockquote><p>cargo –version</p></blockquote><h4 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h4><ol><li>cargo build 构建</li><li>cargo run编译并允许</li><li>cargo check 检查</li><li>cargo build –release 构建发布(发布用)</li><li>cargo update 更新包</li></ol>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
          <category> cargo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Cargo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023年05月01日 Rust常见错误与使用</title>
      <link href="/2023/05/01/2023/202305/2023-05-01-Rust%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/05/01/2023/202305/2023-05-01-Rust%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="Rust常见错误"><a href="#Rust常见错误" class="headerlink" title="Rust常见错误"></a>Rust常见错误</h3><ol><li>Blocking waiting for file lock on package cache</li></ol><p>解决方法:<br>    删除 用户目录下的 .cargo&#x2F;.package-cache文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">rm -rf ~/.cargo/.package-cache<br></code></pre></td></tr></table></figure><h3 id="Rust-使用说明"><a href="#Rust-使用说明" class="headerlink" title="Rust 使用说明"></a>Rust 使用说明</h3><ol><li><p>rust使用use导入包</p><figure class="highlight rust"><table><tr><td class="code"><pre><code class="hljs rust"><span class="hljs-comment">// 导入io库</span><br><span class="hljs-keyword">use</span> std::io;<br></code></pre></td></tr></table></figure></li><li><p>rust中的变量 和 引用都是不可变的, 可使用mut关键字使之可以修改</p></li><li><p>cargo 中文源配置</p><ol><li>打开用户目录的.cargo目录, 创建config文件(如果有就不用创建);</li><li>新增国内源; <figure class="highlight toml"><table><tr><td class="code"><pre><code class="hljs toml"><span class="hljs-section">[source.crates-io]</span><br><span class="hljs-attr">registry</span> = <span class="hljs-string">&quot;https://github.com/rust-lang/crates.io-index&quot;</span><br><span class="hljs-comment"># 指定镜像</span><br><span class="hljs-attr">replace-with</span> = <span class="hljs-string">&#x27;sjtu&#x27;</span> <span class="hljs-comment"># 如：tuna、sjtu、ustc，或者 rustcc</span><br><br><span class="hljs-comment"># 注：以下源配置一个即可，无需全部</span><br><br><span class="hljs-comment"># 中国科学技术大学</span><br><span class="hljs-section">[source.ustc]</span><br><span class="hljs-attr">registry</span> = <span class="hljs-string">&quot;https://mirrors.ustc.edu.cn/crates.io-index&quot;</span><br><br><span class="hljs-comment"># 上海交通大学</span><br><span class="hljs-section">[source.sjtu]</span><br><span class="hljs-attr">registry</span> = <span class="hljs-string">&quot;https://mirrors.sjtug.sjtu.edu.cn/git/crates.io-index/&quot;</span><br><br><span class="hljs-comment"># 清华大学</span><br><span class="hljs-section">[source.tuna]</span><br><span class="hljs-attr">registry</span> = <span class="hljs-string">&quot;https://mirrors.tuna.tsinghua.edu.cn/git/crates.io-index.git&quot;</span><br><br><span class="hljs-comment"># rustcc社区</span><br><span class="hljs-section">[source.rustcc]</span><br><span class="hljs-attr">registry</span> = <span class="hljs-string">&quot;https://code.aliyun.com/rustcc/crates.io-index.git&quot;</span><br><br><span class="hljs-section">[target.x86_64-unknown-linux-musl]</span><br><span class="hljs-attr">linker</span> = <span class="hljs-string">&quot;rust-lld&quot;</span><br></code></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> 错误 </tag>
            
            <tag> 使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年09月10日 linux 防火墙,网卡</title>
      <link href="/2022/09/10/2022/202209/2022-09-10-linux%20%E9%98%B2%E7%81%AB%E5%A2%99,%E7%BD%91%E5%8D%A1/"/>
      <url>/2022/09/10/2022/202209/2022-09-10-linux%20%E9%98%B2%E7%81%AB%E5%A2%99,%E7%BD%91%E5%8D%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="linux-centos7"><a href="#linux-centos7" class="headerlink" title="linux(centos7)"></a>linux(centos7)</h3><h4 id="防火墙相关命令"><a href="#防火墙相关命令" class="headerlink" title="防火墙相关命令"></a>防火墙相关命令</h4><ol><li>关闭防火墙</li></ol><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">systemctl stop firewalld.service<br></code></pre></td></tr></table></figure><ol start="2"><li>禁止防火墙开机启动</li></ol><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">systemctl <span class="hljs-built_in">disable</span> firewalld.service<br></code></pre></td></tr></table></figure><ol start="3"><li>放行端口</li></ol><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">firewall-cmd --zone=public --add-port=80/tcp --permanent<br></code></pre></td></tr></table></figure><ol start="4"><li>重启</li></ol><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">firewall-cmd --reload<br></code></pre></td></tr></table></figure><ol start="5"><li><p>开启防火墙</p><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">systemctl start firewalld<br></code></pre></td></tr></table></figure></li><li><p>重启防火墙</p></li></ol><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">systemctl restart firewalld<br></code></pre></td></tr></table></figure><ol start="7"><li>重载规则</li></ol><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">firewall-cmd --reload<br></code></pre></td></tr></table></figure><ol start="8"><li>查看已配置规则</li></ol><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">firewall-cmd --list-all<br></code></pre></td></tr></table></figure><ol start="9"><li>指定端口和ip访问</li></ol><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">firewall-cmd --permanent --add-rich-rule=<span class="hljs-string">&quot;rule family=&quot;</span>ipv4<span class="hljs-string">&quot; source address=&quot;</span>192.168.31.101<span class="hljs-string">&quot;</span><br><span class="hljs-string">port protocol=&quot;</span>tcp<span class="hljs-string">&quot; port=&quot;</span>80<span class="hljs-string">&quot; accept&quot;</span><br></code></pre></td></tr></table></figure><ol start="10"><li>移除规则</li></ol><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">firewall-cmd --permanent --remove-rich-rule=<span class="hljs-string">&quot;rule family=&quot;</span>ipv4<span class="hljs-string">&quot; source</span><br><span class="hljs-string">address=&quot;</span>192.168.31.101<span class="hljs-string">&quot; port port=&quot;</span>80<span class="hljs-string">&quot; protocol=&quot;</span>tcp<span class="hljs-string">&quot; accept&quot;</span><br></code></pre></td></tr></table></figure><h4 id="网络相关命令"><a href="#网络相关命令" class="headerlink" title="网络相关命令"></a>网络相关命令</h4><ol><li>查看IP</li></ol><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">ip addr<br></code></pre></td></tr></table></figure><ol start="2"><li>修改网卡</li></ol><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /etc/sysconfig/network-scripts<br>vi ifcfg-*<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 防火墙 </tag>
            
            <tag> 网卡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年02月10日 Redis集群扩容</title>
      <link href="/2022/02/10/2022/202202/2022-02-10-Redis%E9%9B%86%E7%BE%A4%E6%89%A9%E5%AE%B9/"/>
      <url>/2022/02/10/2022/202202/2022-02-10-Redis%E9%9B%86%E7%BE%A4%E6%89%A9%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><p>本文在<a href="https://blog.aiwiown.com/2022/02/Redis%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/">搭建的redis集群</a>的基础上对集群进行扩容;</p><p><img src="https://s2.loli.net/2022/02/10/7Uq6KOE5Xmt8pQ4.png"></p><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><ol><li>服务器(centos 7): 192.168.5.57(6382,6383)</li><li>Redis版本<code>redis-5.0.14</code></li><li>安装目录<code>/data/redis</code> 目录</li><li>关闭防火墙(或者打开6382,6383,16382,16383端口) 16382,16383端口内部通信端口(集群节点gossip通信端口(默认是在redis端口号上加1W))</li><li>安装gcc</li></ol><h4 id="扩容步骤-本次在57上安装"><a href="#扩容步骤-本次在57上安装" class="headerlink" title="扩容步骤(本次在57上安装)"></a>扩容步骤(本次在57上安装)</h4><ul><li>创建配置文件</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入config目录</span><br>cd /data/redis-5.0.14/config/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建配置文件(6382.conf,6383.conf)</span><br>touch 6382.conf 6383.conf<br></code></pre></td></tr></table></figure><ul><li>编写配置文件 <a href="https://blog.aiwiown.com/2022/01/Redis5.X%E9%85%8D%E7%BD%AE/">redis.conf</a></li></ul><p>编写配置文件并创建配置文件中相关目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建数据存储目录</span><br>mkdir -p /data/redis-5.0.14/datas/6382/ /data/redis-5.0.14/datas/6383/<br></code></pre></td></tr></table></figure><blockquote><p><code>6382.conf</code> 配置文件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs conf"># 后台启动<br>daemonize yes<br># 端口<br>port 6382<br># pid文件(启动进程号) 不需要手动创建<br>pidfile /data/redis-5.0.14/config/6382.pid<br># 数据文件存放路径<br>dir /data/redis-5.0.14/datas/6382/<br><br># 一定要注释绑定ip配置, 或者不注释,配置多个,本次演示注释<br># bind 127.0.0.1<br># 关闭保护模式<br>protected-mode no<br># 开启aof持久化<br>appendonly yes<br><br># 配置redis访问密码<br>requirepass redis123<br># 配置集群间密码访问<br>masterauth redis123<br><br># 开启集群模式<br>cluster-enabled yes<br># 集群节点信息集群组建成功redis会自动写入(不需要手动创建)<br>cluster-config-file nodes-6382.conf<br># redis节点通信超时时间毫秒<br>cluster-node-timeout 10000<br></code></pre></td></tr></table></figure><blockquote><p><code>6383.conf</code> 配置文件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs conf"># 后台启动<br>daemonize yes<br># 端口<br>port 6383<br># pid文件(启动进程号) 不需要手动创建<br>pidfile /data/redis-5.0.14/config/6383.pid<br># 数据文件存放路径<br>dir /data/redis-5.0.14/datas/6383/<br><br># 一定要注释绑定ip配置, 或者不注释,配置多个,本次演示注释<br># bind 127.0.0.1<br># 关闭保护模式<br>protected-mode no<br># 开启aof持久化<br>appendonly yes<br><br># 配置redis访问密码<br>requirepass redis123<br># 配置集群间密码访问<br>masterauth redis123<br><br># 开启集群模式<br>cluster-enabled yes<br># 集群节点信息集群组建成功redis会自动写入(不需要手动创建)<br>cluster-config-file nodes-6383.conf<br># redis节点通信超时时间毫秒<br>cluster-node-timeout 10000<br></code></pre></td></tr></table></figure><blockquote><p>启动redis实例(6382,6383)</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">/data/redis-5.0.14/src/redis-server /data/redis-5.0.14/config/6382.conf<br>/data/redis-5.0.14/src/redis-server /data/redis-5.0.14/config/6383.conf<br></code></pre></td></tr></table></figure><ul><li>新增Redis实例</li></ul><ol><li>相关命令 <ul><li>create 创建集群</li><li>check 检查集群状况</li><li>info 查看集群信息</li><li>reshard 重新分片</li><li>add-node 添加一个节点至集群(第一个参数为新节点的ip:port,第二个参数为集群中任意一个已经存在的节点的ip:port)</li><li>del-node 移除一个节点</li></ul></li></ol><blockquote><p> &#x2F;data&#x2F;redis-5.0.14&#x2F;src&#x2F;redis-cli –cluster help</p></blockquote><p><img src="https://s2.loli.net/2022/02/10/yEQ67B5HPjrioYW.png"></p><ul><li>配置6382为主节点</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">新增6382节点至集群(默认为master节点)</span><br>/data/redis-5.0.14/src/redis-cli -a redis123 --cluster add-node 192.168.5.57:6382 192.168.5.57:6380<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/10/sZQzLpoVvPlJi3e.png"></p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看集群状态</span><br>/data/redis-5.0.14/src/redis-cli -a redis123 -c -h 192.168.5.57 -p 6380<br></code></pre></td></tr></table></figure><p>查看集群状态<br><img src="https://s2.loli.net/2022/02/10/Dk4vYQXVSf8Fo9g.png"></p><p>已加入6382但未分配槽位(slot), 需要使用reshard命令分配(随机连接一个节点)</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">为6382分配槽位</span><br>/data/redis-5.0.14/src/redis-cli -a redis123 --cluster reshard 192.168.5.55:6380<br>第一次输入需要分配多少个槽位至新节点:1024<br>第二次输入需要移动到那个节点新节点:eb49a672ddc057c2099a1e31b28f94063f5a0589<br>第三次输入:all<br>第四次输入:yes<br></code></pre></td></tr></table></figure><p>查看集群状态<br><img src="https://s2.loli.net/2022/02/10/dvG1QuWmPYctekq.png"></p><ul><li>配置6383为6382的从节点</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># 新增6383节点至集群(默认为master节点)<br>/data/redis-5.0.14/src/redis-cli -a redis123 --cluster add-node 192.168.5.57:6383 192.168.5.57:6380<br></code></pre></td></tr></table></figure><p>查看集群状态<br><img src="https://s2.loli.net/2022/02/10/lW9yFu63xNckRpV.png"></p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">连接6383节点</span><br>/data/redis-5.0.14/src/redis-cli -a redis123 -c -h 192.168.5.57 -p 6383<br><span class="hljs-meta prompt_"># </span><span class="language-bash">执行replicate命令 cluster replicate masterId</span><br>CLUSTER REPLICATE eb49a672ddc057c2099a1e31b28f94063f5a0589<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/10/fj2kAsCIHG8eKhi.png"></p><p>查看集群状态<br><img src="https://s2.loli.net/2022/02/10/fuAXLxsmJ5q1Wej.png"></p><h4 id="移除节点步骤"><a href="#移除节点步骤" class="headerlink" title="移除节点步骤"></a>移除节点步骤</h4><h5 id="移除副本-83-使用del-node-节点ip-端口-节点ID"><a href="#移除副本-83-使用del-node-节点ip-端口-节点ID" class="headerlink" title="移除副本(83) 使用del-node 节点ip:端口 节点ID"></a>移除副本(83) 使用del-node 节点ip:端口 节点ID</h5><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">/data/redis-5.0.14/src/redis-cli -a redis123 --cluster del-node 192.168.5.57:6383 d9ff03e39779682f294cb84e8dc8213ae2731eb1<br></code></pre></td></tr></table></figure><p>查看集群状态<br><img src="https://s2.loli.net/2022/02/10/nBtEP3jca97mKW2.png"></p><h5 id="移除master-82"><a href="#移除master-82" class="headerlink" title="移除master(82)"></a>移除master(82)</h5><ol><li>移除master时需要先把6382里的hash槽放入到其他的可用主节点中去;</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">移除槽位</span><br>/data/redis-5.0.14/src/redis-cli -a redis123 --cluster reshard 192.168.5.57:6382<br>第一次输入:1024<br>第二次输入(需要把槽位数据移动到那个节点57:6380):2d74accc409c09cfed3273328adb713198ee92f7<br>第三次输入(需要移除的节点ID):eb49a672ddc057c2099a1e31b28f94063f5a0589<br>第四次输入:done<br>第五次输入:yes<br></code></pre></td></tr></table></figure><p>查看集群状态<br><img src="https://s2.loli.net/2022/02/10/325ed9yKml6RZfF.png"></p><ol start="2"><li>移除6382节点</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">/data/redis-5.0.14/src/redis-cli -a redis123 --cluster del-node 192.168.5.57:6382 eb49a672ddc057c2099a1e31b28f94063f5a0589<br></code></pre></td></tr></table></figure><p>查看集群状态<br><img src="https://s2.loli.net/2022/02/10/xGvHSD3qmnflbQk.png"></p><p>——————————————–<del>&gt;分割线&lt;</del>——————————————–</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> Redis </category>
          
          <category> 集群 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 集群 </tag>
            
            <tag> 集群扩容 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年02月10日 Redis集群选举</title>
      <link href="/2022/02/10/2022/202202/2022-02-10-Redis%E9%9B%86%E7%BE%A4%E9%80%89%E4%B8%BE/"/>
      <url>/2022/02/10/2022/202202/2022-02-10-Redis%E9%9B%86%E7%BE%A4%E9%80%89%E4%B8%BE/</url>
      
        <content type="html"><![CDATA[<h4 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h4><p>见上文搭建的redis集群</p><p>Redis集群会将所有的数据划分为16384个数据槽位(slots), 每个节点负责存储部分数据, 当redis客户端连接redis集群时会先拉取redis集群配置槽位信息(如配置文件中的node-xxx.conf配置文件信息),这样客户端写入或是查询数据会先根据key计算相应的槽位进而获取相关的连接<br><img src="https://s2.loli.net/2022/02/10/okSfvhlYDRT5xiC.png"></p><h5 id="槽位计算方法"><a href="#槽位计算方法" class="headerlink" title="槽位计算方法"></a>槽位计算方法</h5><blockquote><p><strong>槽位数 &#x3D; CRC16(key) % 16384</strong></p></blockquote><h4 id="Redis集群选举与内部通信"><a href="#Redis集群选举与内部通信" class="headerlink" title="Redis集群选举与内部通信"></a>Redis集群选举与内部通信</h4><h5 id="Redis集群内部通信-gossip-ˈɡɒsɪp-保证AP"><a href="#Redis集群内部通信-gossip-ˈɡɒsɪp-保证AP" class="headerlink" title="Redis集群内部通信(gossip[ˈɡɒsɪp] 保证AP)"></a>Redis集群内部通信(gossip[ˈɡɒsɪp] 保证AP)</h5><p><img src="https://www.iteblog.com/pic/distributed_system/gossip.gif"></p><p>gossip通信端口(服务的端口号+10000), 如redis默认端口6379, gossip通信端口则为16379</p><h5 id="Redis集群选举"><a href="#Redis集群选举" class="headerlink" title="Redis集群选举"></a>Redis集群选举</h5><p>当slave发现自己的master变为FAIL状态时,便尝试进行Failover,以期成为新的master.由于挂掉的master可能会有多个slave,从而存在多个slave竞争成为master节点的过程,其过程如下:</p><ol><li>slave发现自己的master变为FAIL;</li><li>将自己记录的集群currentEpoch加1,并广播FAILOVER_AUTH_REQUEST信息;</li><li>其他节点收到该信息,只有master响应,判断请求者的合法性,并发送FAILOVER_AUTH_ACK,对每一个epoch只发送一次ack;</li><li>尝试failover的slave收集master返回的FAILOVER_AUTH_ACK</li><li>slave收到超过半数master的ack后变成新Master;</li><li>slave广播Pong消息通知其他集群节点;</li></ol><p>从节点并不是在主节点一进入FAIL状态就马上尝试发起选举,而是有一定延迟,一定的延迟确保我们等待FAIL状态在集群中传播,slave如果立即尝试选举,其它masters或许尚未意识到FAIL状态,可能会拒绝投票;</p><h6 id="延迟计算公式"><a href="#延迟计算公式" class="headerlink" title="延迟计算公式"></a>延迟计算公式</h6><blockquote><p>DELAY &#x3D; 500ms + random(0 ~ 500ms) + SLAVE_RANK * 1000ms</p></blockquote><p>SLAVE_RANK表示此slave已经从master复制数据的总量的rank;Rank越小代表已复制的数据越新.这种方式下,持有最新数据的slave将会首先发起选举(理论上)</p><h6 id="多个master节点问题"><a href="#多个master节点问题" class="headerlink" title="多个master节点问题"></a>多个master节点问题</h6><p>由于网络抖动造成其中一个主节点与其他节点通信失败,导致slave发起选举会造成同一集群下会存在2个或master节点 为了避免出现这样的情况可以在配置文件中加入以下配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs conf"># 写数据成功最少同步的slave数量(此配置会影响redis集群的可用性,建议慎重配置)<br>min-replicas-to-write 1<br></code></pre></td></tr></table></figure><h6 id="集群一个master故障是否提供服务"><a href="#集群一个master故障是否提供服务" class="headerlink" title="集群一个master故障是否提供服务"></a>集群一个master故障是否提供服务</h6><p>配置cluster-require-full-coverage为no时,表示一个master节点故障下线且没有相应的从库进行故障恢复时,集群仍然可用,如果为yes则集群不可用;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs conf">cluster-require-full-coverage no<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h6 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h6><ol><li><a href="https://www.cnblogs.com/duanxz/p/5229352.html">CAP原则(CAP定理)、BASE理论</a></li><li><a href="https://www.iteblog.com/archives/2505.html">分布式原理：一文了解 Gossip 协议</a></li><li><a href="https://blog.csdn.net/qq_34002221/article/details/85042536">Redis 5 集群选举原理分析</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> Redis </category>
          
          <category> 集群 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 集群 </tag>
            
            <tag> 集群选举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年02月09日 Redis 集群安装</title>
      <link href="/2022/02/09/2022/202202/2022-02-09-Redis%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/"/>
      <url>/2022/02/09/2022/202202/2022-02-09-Redis%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><ol><li>服务器(centos 7): 192.168.5.55(6380,6381),192.168.5.56(6380,6381),192.168.5.57(6380,6381)</li><li>Redis版本<code>redis-5.0.14</code></li><li>安装目录<code>/data/redis</code> 目录</li><li>关闭防火墙(或者打开6380,6381,16380,16381端口) 16380,16381端口内部通信端口(集群节点gossip通信端口(默认是在redis端口号上加1W))</li><li>安装gcc</li></ol><h5 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h5><blockquote><p>本次安装采用关闭防火墙方式(关闭55,56,57的防火墙)</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">临时关闭防火墙</span><br>systemctl stop firewalld<br><span class="hljs-meta prompt_"># </span><span class="language-bash">禁止开机启动</span><br>systemctl disable firewalld<br></code></pre></td></tr></table></figure><h5 id="安装gcc"><a href="#安装gcc" class="headerlink" title="安装gcc"></a>安装gcc</h5><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">安装gcc<br>yum install gcc<br></code></pre></td></tr></table></figure><h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h4><ul><li>创建安装目录,上传安装包,创建配置文件</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建安装目录</span><br>mkdir -p /data<br><span class="hljs-meta prompt_"># </span><span class="language-bash">上传安装包 或在线下载(wget http://download.redis.io/releases/redis-5.0.14.tar.gz)</span><br>rz -y 选择安装文件redis-5.0.14.tar.gz (如果不存在rz 命令 运行yum install lrzsz)<br><span class="hljs-meta prompt_"># </span><span class="language-bash">编译安装 进入到解压好的redis‐5.0.14目录下,进行编译与安装</span><br>make<br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压缩</span><br>tar -zxvf redis-5.0.14.tar.gz<br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建配置文件目录</span><br>cd redis-5.0.14<br><span class="hljs-meta prompt_"># </span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-built_in">mkdir</span> config</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入配置文件目录创建配置文件</span><br>cd config<br>touch 6380.conf 6381.conf<br></code></pre></td></tr></table></figure><ul><li>编写配置文件 <a href="https://blog.aiwiown.com/2022/01/Redis5.X%E9%85%8D%E7%BD%AE/">redis.conf</a></li></ul><p>编写配置文件并创建配置文件中相关目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建数据存储目录</span><br>mkdir -p /data/redis-5.0.14/datas/6380/ /data/redis-5.0.14/datas/6381/<br></code></pre></td></tr></table></figure><blockquote><p><code>6380.conf</code> 配置文件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs conf"># 后台启动<br>daemonize yes<br># 端口<br>port 6380<br># pid文件(启动进程号) 不需要手动创建<br>pidfile /data/redis-5.0.14/config/6380.pid<br># 数据文件存放路径<br>dir /data/redis-5.0.14/datas/6380/<br><br># 一定要注释绑定ip配置, 或者不注释,配置多个,本次演示注释<br># bind 127.0.0.1<br># 关闭保护模式<br>protected-mode no<br># 开启aof持久化<br>appendonly yes<br><br># 配置redis访问密码<br>requirepass redis123<br># 配置集群间密码访问<br>masterauth redis123<br><br># 开启集群模式<br>cluster-enabled yes<br># 集群节点信息集群组建成功redis会自动写入(不需要手动创建)<br>cluster-config-file nodes-6380.conf<br># redis节点通信超时时间毫秒<br>cluster-node-timeout 10000<br></code></pre></td></tr></table></figure><blockquote><p><code>6381.conf</code> 配置文件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs conf"># 后台启动<br>daemonize yes<br># 端口<br>port 6381<br># pid文件(启动进程号)<br>pidfile /data/redis-5.0.14/config/6381.pid<br># 数据文件存放路径<br>dir /data/redis-5.0.14/datas/6381/<br><br># 一定要注释绑定ip配置, 或者不注释,配置多个,本次演示注释<br># bind 127.0.0.1<br># 关闭保护模式<br>protected-mode no<br># 开启aof持久化<br>appendonly yes<br><br># 配置redis访问密码<br>requirepass redis123<br># 配置集群间密码访问<br>masterauth redis123<br><br># 开启集群模式<br>cluster-enabled yes<br># 集群节点信息集群组建成功redis会自动写入<br>cluster-config-file nodes-6381.conf<br># redis节点通信超时时间毫秒<br>cluster-node-timeout 10000<br></code></pre></td></tr></table></figure><ul><li>复制安装文件至56,57服务器(使用<a href="https://www.runoob.com/linux/linux-comm-scp.html">scp命令</a>)</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">复制至56</span><br>scp -r /data root@192.168.5.56:/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">复制至57</span> <br>scp -r /data root@192.168.5.57:/<br></code></pre></td></tr></table></figure><ul><li>分别在55,56,57服务器启动redis服务</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动服务</span><br>/data/redis-5.0.14/src/redis-server /data/redis-5.0.14/config/6380.conf<br>/data/redis-5.0.14/src/redis-server /data/redis-5.0.14/config/6381.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看是否启动</span><br>ps -ef|grep redis<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/09/Rpkb8GFVwf3gOxr.png"></p><ul><li>组建集群</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">随便选取一台执行(-a 密码 --cluster-replicas 副本个数) <br>/data/redis-5.0.14/src/redis-cli -a redis123 --cluster create 192.168.5.55:6380 192.168.5.55:6381 192.168.5.56:6380 192.168.5.56:6381 192.168.5.57:6380 192.168.5.57:6381 --cluster-replicas 1<br>Warning: Using a password with &#x27;-a&#x27; or &#x27;-u&#x27; option on the command line interface may not be safe.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Performing <span class="hljs-built_in">hash</span> slots allocation on 6 nodes...</span><br>Master[0] -&gt; Slots 0 - 5460<br>Master[1] -&gt; Slots 5461 - 10922<br>Master[2] -&gt; Slots 10923 - 16383<br>Adding replica 192.168.5.56:6381 to 192.168.5.55:6380<br>Adding replica 192.168.5.57:6381 to 192.168.5.56:6380<br>Adding replica 192.168.5.55:6381 to 192.168.5.57:6380<br>M: de97776b4df00cfc37faa0f09915ac7c324b0199 192.168.5.55:6380<br>   slots:[0-5460] (5461 slots) master<br>S: 0d765947e1da43ffb18ff1e8ad4bdc651e430bb0 192.168.5.55:6381<br>   replicates 2d74accc409c09cfed3273328adb713198ee92f7<br>M: 5058621690a86ad524293672dbd8c39deba1c40d 192.168.5.56:6380<br>   slots:[5461-10922] (5462 slots) master<br>S: 55921ef7e6d266e79e6c3e29418920ee21828bbc 192.168.5.56:6381<br>   replicates de97776b4df00cfc37faa0f09915ac7c324b0199<br>M: 2d74accc409c09cfed3273328adb713198ee92f7 192.168.5.57:6380<br>   slots:[10923-16383] (5461 slots) master<br>S: 315ff303fc0924cc1c10c2f55fd6907b42d11406 192.168.5.57:6381<br>   replicates 5058621690a86ad524293672dbd8c39deba1c40d<br>Can I set the above configuration? (type &#x27;yes&#x27; to accept): yes<br>Can I set the above configuration? (type &#x27;yes&#x27; to accept): yes      <br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Nodes configuration updated</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Assign a different config epoch to each node</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Sending CLUSTER MEET messages to <span class="hljs-built_in">join</span> the cluster</span><br>Waiting for the cluster to join<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Performing Cluster Check (using node 192.168.5.55:6380)</span><br>M: de97776b4df00cfc37faa0f09915ac7c324b0199 192.168.5.55:6380<br>   slots:[0-5460] (5461 slots) master<br>   1 additional replica(s)<br>S: 55921ef7e6d266e79e6c3e29418920ee21828bbc 192.168.5.56:6381<br>   slots: (0 slots) slave<br>   replicates de97776b4df00cfc37faa0f09915ac7c324b0199<br>S: 0d765947e1da43ffb18ff1e8ad4bdc651e430bb0 192.168.5.55:6381<br>   slots: (0 slots) slave<br>   replicates 2d74accc409c09cfed3273328adb713198ee92f7<br>M: 2d74accc409c09cfed3273328adb713198ee92f7 192.168.5.57:6380<br>   slots:[10923-16383] (5461 slots) master<br>   1 additional replica(s)<br>M: 5058621690a86ad524293672dbd8c39deba1c40d 192.168.5.56:6380<br>   slots:[5461-10922] (5462 slots) master<br>   1 additional replica(s)<br>S: 315ff303fc0924cc1c10c2f55fd6907b42d11406 192.168.5.57:6381<br>   slots: (0 slots) slave<br>   replicates 5058621690a86ad524293672dbd8c39deba1c40d<br>[OK] All nodes agree about slots configuration.<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check <span class="hljs-keyword">for</span> open slots...</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; Check slots coverage...</span><br>[OK] All 16384 slots covered.<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/02/09/fg7RXpktoQ46d1S.png" alt="组建集群"><br><img src="https://s2.loli.net/2022/02/09/D1hE9f3i42LxuMF.png" alt="集群组建结果"></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> Redis </category>
          
          <category> 集群 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 集群 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年01月26日 MongoDB文件(GridFS)</title>
      <link href="/2022/01/26/2022/202201/2022-01-26-MongoDB%E6%96%87%E4%BB%B6(GridFS)/"/>
      <url>/2022/01/26/2022/202201/2022-01-26-MongoDB%E6%96%87%E4%BB%B6(GridFS)/</url>
      
        <content type="html"><![CDATA[<h3 id="MongoDB文件"><a href="#MongoDB文件" class="headerlink" title="MongoDB文件"></a>MongoDB文件</h3><h4 id="mongo-shell"><a href="#mongo-shell" class="headerlink" title="mongo shell"></a>mongo shell</h4><blockquote><p>shell mongofile使用 </p></blockquote><p>命令: mongofiles <options> <command> <filename or _id></p><ul><li><p>command</p><ul><li>list      列出所有文件,’filename’ 是一个可选前缀,列出的文件名必须以;</li><li>search    查找所有文件,’filename’ 是列出的文件名必须包含的子字符串;</li><li>put       添加一个文件名为 ‘filename’ 的文件</li><li>put_id    添加一个文件名为 ‘filename’和给定’_id’的文件</li><li>get       获取文件名为’filename’的文件</li><li>get_id    获取具有给定 ‘_id’ 的文件</li><li>delete    删除所有文件名为’filename’的文件</li><li>delete_id 删除具有给定 ‘_id’ 的文件</li></ul></li><li><p>options</p><ul><li>h host</li><li>p port(端口)</li><li>u 用户名</li><li>p 密码</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">上传文件</span><br>.\bin\mongofiles.exe -h 127.0.0.1 -p 27017 -d aiwiown_gridfs put C:/Users/admin/Desktop/post改造.csv<br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取文件</span><br>.\bin\mongofiles.exe -h 127.0.0.1 -p 27017 -d aiwiown_gridfs get C:/Users/admin/Desktop/post改造.csv<br><span class="hljs-meta prompt_"># </span><span class="language-bash">列出文件列表</span><br>.\bin\mongofiles.exe -h 127.0.0.1 -p 27017 -d aiwiown_gridfs list<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除文件</span><br>.\bin\mongofiles.exe -h 127.0.0.1 -p 27017 -d aiwiown_gridfs delete C:/Users/admin/Desktop/post改造.csv<br></code></pre></td></tr></table></figure><h4 id="mongo-java-sdk"><a href="#mongo-java-sdk" class="headerlink" title="mongo-java-sdk"></a>mongo-java-sdk</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">MongoClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MongoClient</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br>    <span class="hljs-type">DB</span> <span class="hljs-variable">aiwiownGridfsDatabase</span> <span class="hljs-operator">=</span> client.getDB(<span class="hljs-string">&quot;aiwiown_gridfs&quot;</span>);<br>    <span class="hljs-type">GridFS</span> <span class="hljs-variable">gridFS</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GridFS</span>(aiwiownGridfsDatabase);<br>    <span class="hljs-comment">//获取文件列表</span><br>    <span class="hljs-type">DBCursor</span> <span class="hljs-variable">fileList</span> <span class="hljs-operator">=</span> gridFS.getFileList();<br><br>    <span class="hljs-comment">//待保存的文件</span><br>    <span class="hljs-type">File</span> <span class="hljs-variable">saveFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;123.sql&quot;</span>);<br>    <span class="hljs-type">GridFSInputFile</span> <span class="hljs-variable">gridFSInputFile</span> <span class="hljs-operator">=</span> gridFS.createFile(saveFile);<br>    gridFSInputFile.setFilename(<span class="hljs-string">&quot;base.sql&quot;</span>);<br>    <span class="hljs-comment">//保存文件</span><br>    gridFSInputFile.save();<br><br>    <span class="hljs-comment">//下载文件</span><br>    <span class="hljs-type">GridFSDBFile</span> <span class="hljs-variable">queryGridFSDBFile</span> <span class="hljs-operator">=</span> gridFS.findOne(<span class="hljs-string">&quot;base.sql&quot;</span>);<br>    queryGridFSDBFile.writeTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:\\Users\\admin\\Desktop\\basex.sql&quot;</span>));<br><br>    <span class="hljs-comment">//删除文件</span><br>    gridFS.remove(queryGridFSDBFile.getFilename());<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
          <category> GridFS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
            <tag> GridFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年01月22日 MongoDB基本使用</title>
      <link href="/2022/01/22/2022/202201/2022-01-22-MongoDB%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8-01/"/>
      <url>/2022/01/22/2022/202201/2022-01-22-MongoDB%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8-01/</url>
      
        <content type="html"><![CDATA[<h3 id="mongdb-shell"><a href="#mongdb-shell" class="headerlink" title="mongdb shell"></a>mongdb shell</h3><ol><li>线上当前连接的数据库</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">db<br></code></pre></td></tr></table></figure><ol start="2"><li>切换数据库</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">切换至admin库</span><br>use admin<br></code></pre></td></tr></table></figure><ol start="3"><li>显示用户列表里所有数据库</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">show dbs<br>show databases<br></code></pre></td></tr></table></figure><ol start="4"><li>列出数据库中的集合</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">show tables<br>show collections<br></code></pre></td></tr></table></figure><ol start="5"><li>获取集合</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">db.&lt;collection name&gt;.find();<br><span class="hljs-meta prompt_"># </span><span class="language-bash">可以用好集合名称中存在空格等或者无法使用`db.&lt;collection name&gt;`的方式获取集合等情况</span><br>db.getCollection(&#x27;collection name&#x27;).find()<br></code></pre></td></tr></table></figure><ol start="6"><li>格式化打印结果 <code>.pretty()</code></li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">db.&lt;collection name&gt;.find().pretty();<br></code></pre></td></tr></table></figure><ol start="7"><li>退出mongo shell</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">quit()<br></code></pre></td></tr></table></figure><h3 id="mongodb-增删改查"><a href="#mongodb-增删改查" class="headerlink" title="mongodb 增删改查"></a>mongodb 增删改查</h3><h4 id="mongodb-新增文档"><a href="#mongodb-新增文档" class="headerlink" title="mongodb 新增文档"></a>mongodb 新增文档</h4><ol><li><p><code>db.&lt;collection name&gt;.insert(document, options)</code> 新增文档</p><ol><li>obj: 需要写入的文档</li><li>options 写入参数 ordered:是否按顺序写入, writeConcern: 写关注, allowdotted:</li></ol></li><li><p><code>db.&lt;collection name&gt;.insertMany([document,document,....], options)</code> 批量新增文档</p></li><li><p><code>db.&lt;collection name&gt;.insertOne(document, options)</code> 新增单条文档</p></li></ol><h4 id="mongodb-查询文档"><a href="#mongodb-查询文档" class="headerlink" title="mongodb 查询文档"></a>mongodb 查询文档</h4><ol><li><code>db.&lt;collection name&gt;.find(query, fields, limit, skip, batchSize, options)</code></li><li><code>db.&lt;collection name&gt;.findOne(query, fields, options, readConcern, collation)</code></li><li><code>db.&lt;collection name&gt;.findOneAndReplace(filter, replacement, options)</code></li><li><code>db.&lt;collection name&gt;.findAndModify()</code></li><li><code>db.&lt;collection name&gt;.findOneAndDelete()</code></li><li><code>db.&lt;collection name&gt;.findOneAndUpdate()</code></li></ol><h4 id="mongodb-更新文档"><a href="#mongodb-更新文档" class="headerlink" title="mongodb 更新文档"></a>mongodb 更新文档</h4><ol><li><code>db.&lt;collection name&gt;.update(query, obj, upsert, multi)</code></li><li><code>db.&lt;collection name&gt;.updateMany(filter, update, options)</code></li><li><code>db.&lt;collection name&gt;.updateOne(filter, update, options)</code></li></ol><h4 id="mongodb-删除文档"><a href="#mongodb-删除文档" class="headerlink" title="mongodb 删除文档"></a>mongodb 删除文档</h4><ol><li><code>db.&lt;collection name&gt;.deleteMany(filter, options)</code></li><li><code>db.&lt;collection name&gt;.deleteOne((filter, options)</code></li></ol><h3 id="mongodb-查询查询选择器"><a href="#mongodb-查询查询选择器" class="headerlink" title="mongodb 查询查询选择器"></a>mongodb 查询查询选择器</h3><h4 id="比较运算"><a href="#比较运算" class="headerlink" title="比较运算"></a>比较运算</h4><ol><li>$eq(一般使用:代替) $ne</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">// $eq<br>db.account.find(&#123;mobile:&#x27;18780668575&#x27;&#125;);<br>db.account.find(&#123;mobile:&#123;$eq:&#x27;18780668575&#x27;&#125;&#125;)<br><span class="hljs-meta prompt_">//$</span><span class="language-bash">ne(不等于)</span><br>db.tb_book.find(&#123;&#x27;cbs&#x27;:&#123;$ne:&#x27;中国日报出版社&#x27;&#125;&#125;);<br></code></pre></td></tr></table></figure><ol start="2"><li>$in $nin(包含 不包含)</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">//$</span><span class="language-bash"><span class="hljs-keyword">in</span></span><br>db.account.find(&#123;&#x27;mobile&#x27;:&#123;$in:[&#x27;18XXXXX8575&#x27;]&#125;&#125;, &#123;nick_name:1, source_code:1, create_time:1&#125;);<br><span class="hljs-meta prompt_">//$</span><span class="language-bash">nin</span><br>db.tb_book.find(&#123;&#x27;cbs&#x27;:&#123;$nin:[&#x27;机械工业出版社&#x27;]&#125;&#125;);<br></code></pre></td></tr></table></figure><ol start="3"><li>$gt大于 $lt小于 $gte大于等于 $lte小于等于</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">db.tb_book.find(&#123;&quot;price&quot;:&#123;$gt:new NumberDecimal(&quot;199.99&quot;), $lte:new NumberDecimal(&quot;399.99&quot;)&#125;&#125;);<br></code></pre></td></tr></table></figure><ol start="4"><li>$regex 正则相当于like</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">db.tb_book.find(&#123;&quot;cbs&quot;:&#123;&#x27;$regex&#x27;:&#x27;^机械&#x27;&#125;&#125;)<br></code></pre></td></tr></table></figure><h4 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h4><ol><li>$and</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">//查询金额大于100元小于500元出版社为中国日报出版社的书籍<br>SELECT * FROM tb_book WHERE cbs=&#x27;中国日报出版社&#x27; AND &#x27;price&#x27; &gt; &#x27;100&#x27; AND &#x27;price&#x27; &lt; &#x27;500&#x27;<br>db.tb_book.find(&#123;<br>    &#x27;$and&#x27;: [<br>        &#123;price: &#123;&#x27;$gt&#x27;: new NumberDecimal(&#x27;100&#x27;),&#x27;$lt&#x27;: new NumberDecimal(&#x27;500&#x27;)&#125;&#125;, <br>        &#123;&#x27;cbs&#x27;: &#x27;中国日报出版社&#x27;&#125;]<br>    &#125;<br>);<br><br>db.tb_book.find(&#123; &#x27;price&#x27;: &#123;&#x27;$gt&#x27;: new NumberDecimal(&#x27;100&#x27;),&#x27;$lt&#x27;: new NumberDecimal(&#x27;500&#x27;)&#125;,&#x27;cbs&#x27;: &#x27;中国日报出版社&#x27;&#125;);<br></code></pre></td></tr></table></figure><ol start="2"><li>$not</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">//查询金额小于等于100或金额为空的数据<br>SELECT * FROM tb_book WHERE price &lt;= 100 OR price IS NULL;<br>db.tb_book.find(&#123;price:&#123;$not:&#123;$gt: new NumberDecimal(100)&#125;&#125;&#125;);<br></code></pre></td></tr></table></figure><ol start="3"><li>$or</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">//查询出版社为机械工业出版社并且金额大于100小于500 或者 出版社为中国日报出版社价格为299.99元的书籍<br>select * from tb_book where (cbs = &#x27;机械工业出版社&#x27; and price&gt;&#x27;100&#x27; and price&lt;500) or (cbs = &#x27;中国日报出版社&#x27; and price = &#x27;299.99&#x27;)<br>db.tb_book.find(&#123;<br>    &#x27;$or&#x27;: [<br>&#123;price:&#123;&#x27;$gt&#x27;: new NumberDecimal(&#x27;100&#x27;),&#x27;$lt&#x27;:new NumberDecimal(&#x27;500&#x27;)&#125;,cbs:&#x27;机械工业出版社&#x27;&#125;, <br>&#123;price:new NumberDecimal(&#x27;299.99&#x27;),&#x27;cbs&#x27;: &#x27;中国日报出版社&#x27;&#125;]<br>&#125;<br>);<br></code></pre></td></tr></table></figure><h4 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h4><h4 id="评估"><a href="#评估" class="headerlink" title="评估"></a>评估</h4><h4 id="地理空间"><a href="#地理空间" class="headerlink" title="地理空间"></a>地理空间</h4><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><h4 id="按位"><a href="#按位" class="headerlink" title="按位"></a>按位</h4><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年01月22日 MongoDB 聚合管道</title>
      <link href="/2022/01/22/2022/202201/2022-01-22-MongoDB%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8-02/"/>
      <url>/2022/01/22/2022/202201/2022-01-22-MongoDB%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8-02/</url>
      
        <content type="html"><![CDATA[<h3 id="mongodb聚合管道"><a href="#mongodb聚合管道" class="headerlink" title="mongodb聚合管道"></a>mongodb聚合管道</h3><h4 id="阶段操作符"><a href="#阶段操作符" class="headerlink" title="阶段操作符"></a>阶段操作符</h4><p><img src="https://docs.mongodb.com/v4.0/_images/map-reduce.bakedsvg.svg"></p><h5 id="project-修改文档的结构，可以用来重命名、增加或删除文档中的字段。"><a href="#project-修改文档的结构，可以用来重命名、增加或删除文档中的字段。" class="headerlink" title="$project 修改文档的结构，可以用来重命名、增加或删除文档中的字段。"></a>$project 修改文档的结构，可以用来重命名、增加或删除文档中的字段。</h5><blockquote><p>示例1 返回书籍名称, 金额</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">aiwiown:PRIMARY&gt; db.tb_book.aggregate([&#123;$project:&#123;_id:0, name:1, price: 1&#125;&#125;])<br>&#123; &quot;name&quot; : &quot;mongodb从入门到放弃&quot;, &quot;price&quot; : NumberDecimal(&quot;179.9900000000000&quot;) &#125;<br>&#123; &quot;name&quot; : &quot;mongodb从入门到放弃&quot;, &quot;price&quot; : NumberDecimal(&quot;169.9900000000000&quot;) &#125;<br>&#123; &quot;name&quot; : &quot;java从入门到放弃&quot;, &quot;price&quot; : NumberDecimal(&quot;199.99&quot;) &#125;<br>&#123; &quot;name&quot; : &quot;c++从入门到放弃&quot;, &quot;price&quot; : NumberDecimal(&quot;299.99&quot;) &#125;<br>&#123; &quot;name&quot; : &quot;C从入门到放弃&quot;, &quot;price&quot; : NumberDecimal(&quot;399.99&quot;) &#125;<br>&#123; &quot;name&quot; : &quot;python从入门到放弃&quot;, &quot;price&quot; : NumberDecimal(&quot;499.99&quot;) &#125;<br>&#123; &quot;name&quot; : &quot;php从入门到放弃&quot;, &quot;price&quot; : NumberDecimal(&quot;599.99&quot;) &#125;<br>&#123; &quot;name&quot; : &quot;c++入门图解&quot;, &quot;price&quot; : null &#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">java示例</span><br> public static void main(String[] args) &#123;<br>     MongoDatabase database = new MongoClient(&quot;127.0.0.1&quot;).getDatabase(&quot;aiwiown&quot;);<br>     MongoCollection&lt;Document&gt; bookCollections = database.getCollection(&quot;tb_book&quot;);<br><span class="hljs-meta prompt_"># </span><span class="language-bash">    List&lt;Document&gt; aggregateListQuery = new ArrayList&lt;&gt;();</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    aggregateListQuery.add(new Document(<span class="hljs-string">&quot;<span class="hljs-variable">$project</span>&quot;</span>,</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">            new Document().append(<span class="hljs-string">&quot;_id&quot;</span>, 0).append(<span class="hljs-string">&quot;name&quot;</span>, 1).append(<span class="hljs-string">&quot;price&quot;</span>, 1)));</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">    AggregateIterable&lt;Document&gt; aggregate = bookCollections.aggregate(aggregateListQuery);</span><br>AggregateIterable&lt;Document&gt; aggregate = bookCollections.aggregate(Arrays.asList(new Document(&quot;$project&quot;, Projections.fields(Projections.excludeId(),Projections.include(&quot;name&quot;,&quot;price&quot;)))));<br>     for (Document document : aggregate) &#123;<br>         System.out.println(document);<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><blockquote><p>示例2 金额不为空+10;</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">aiwiown:PRIMARY&gt; db.tb_book.aggregate([&#123;$project:&#123;_id:0, name:1, price:&#123;$add:[&quot;$price&quot;, 10]&#125;&#125;&#125;])<br>&#123; &quot;name&quot; : &quot;mongodb从入门到放弃&quot;, &quot;price&quot; : NumberDecimal(&quot;189.9900000000000&quot;) &#125;<br>&#123; &quot;name&quot; : &quot;mongodb从入门到放弃&quot;, &quot;price&quot; : NumberDecimal(&quot;179.9900000000000&quot;) &#125;<br>&#123; &quot;name&quot; : &quot;java从入门到放弃&quot;, &quot;price&quot; : NumberDecimal(&quot;209.99&quot;) &#125;<br>&#123; &quot;name&quot; : &quot;c++从入门到放弃&quot;, &quot;price&quot; : NumberDecimal(&quot;309.99&quot;) &#125;<br>&#123; &quot;name&quot; : &quot;C从入门到放弃&quot;, &quot;price&quot; : NumberDecimal(&quot;409.99&quot;) &#125;<br>&#123; &quot;name&quot; : &quot;python从入门到放弃&quot;, &quot;price&quot; : NumberDecimal(&quot;509.99&quot;) &#125;<br>&#123; &quot;name&quot; : &quot;php从入门到放弃&quot;, &quot;price&quot; : NumberDecimal(&quot;609.99&quot;) &#125;<br>&#123; &quot;name&quot; : &quot;c++入门图解&quot;, &quot;price&quot; : null &#125;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">java 示例</span><br> public static void main(String[] args) &#123;<br>     MongoDatabase database = new MongoClient(&quot;127.0.0.1&quot;).getDatabase(&quot;aiwiown&quot;);<br>     MongoCollection&lt;Document&gt; bookCollections = database.getCollection(&quot;tb_book&quot;);<br>     List&lt;Document&gt; aggregateListQuery = new ArrayList&lt;&gt;();<br>     aggregateListQuery.add(new Document(&quot;$project&quot;,<br>             new Document().append(&quot;_id&quot;, 0).append(&quot;name&quot;, 1).append(&quot;price&quot;, new Document().append(&quot;$add&quot;, Arrays.asList(&quot;$price&quot;,10)))));<br>     AggregateIterable&lt;Document&gt; aggregate = bookCollections.aggregate(aggregateListQuery);<br>     for (Document doc : aggregate) &#123;<br>         System.out.println(doc);<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><blockquote><p>示例3 重命名price为 amount</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">aiwiown:PRIMARY&gt; db.tb_book.aggregate([&#123;$project:&#123;_id:0, name: 1, amount:&#x27;$price&#x27;&#125;&#125;]);<br>&#123; &quot;name&quot; : &quot;mongodb从入门到放弃&quot;, &quot;amount&quot; : NumberDecimal(&quot;179.9900000000000&quot;) &#125;<br>&#123; &quot;name&quot; : &quot;mongodb从入门到放弃&quot;, &quot;amount&quot; : NumberDecimal(&quot;169.9900000000000&quot;) &#125;<br>&#123; &quot;name&quot; : &quot;java从入门到放弃&quot;, &quot;amount&quot; : NumberDecimal(&quot;199.99&quot;) &#125;<br>&#123; &quot;name&quot; : &quot;c++从入门到放弃&quot;, &quot;amount&quot; : NumberDecimal(&quot;299.99&quot;) &#125;<br>&#123; &quot;name&quot; : &quot;C从入门到放弃&quot;, &quot;amount&quot; : NumberDecimal(&quot;399.99&quot;) &#125;<br>&#123; &quot;name&quot; : &quot;python从入门到放弃&quot;, &quot;amount&quot; : NumberDecimal(&quot;499.99&quot;) &#125;<br>&#123; &quot;name&quot; : &quot;php从入门到放弃&quot;, &quot;amount&quot; : NumberDecimal(&quot;599.99&quot;) &#125;<br>&#123; &quot;name&quot; : &quot;c++入门图解&quot;, &quot;amount&quot; : null &#125;<br>java示例<br> public static void main(String[] args) &#123;<br>     MongoDatabase database = new MongoClient(&quot;127.0.0.1&quot;).getDatabase(&quot;aiwiown&quot;);<br>     MongoCollection&lt;Document&gt; bookCollections = database.getCollection(&quot;tb_book&quot;);<br>     List&lt;Document&gt; aggregateListQuery = new ArrayList&lt;&gt;();<br>     aggregateListQuery.add(new Document(&quot;$project&quot;,<br>             new Document().append(&quot;_id&quot;, 0).append(&quot;name&quot;, 1).append(&quot;amount&quot;, &quot;$price&quot;)));<br>     AggregateIterable&lt;Document&gt; aggregate = bookCollections.aggregate(aggregateListQuery);<br>     for (Document doc : aggregate) &#123;<br>         System.out.println(doc);<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><h5 id="match-匹配-相当于find查询"><a href="#match-匹配-相当于find查询" class="headerlink" title="$match 匹配(相当于find查询)"></a>$match 匹配(相当于find查询)</h5><blockquote><p>查询金额大于500的数据</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">aiwiown:PRIMARY&gt; db.tb_book.aggregate([<br>    &#123;$match:&#123;price:&#123;$gt:NumberDecimal(&#x27;500&#x27;)&#125;&#125;&#125;, //查询金额大于500的数据<br>    &#123;$project:&#123;_id:0, name:1, price:1&#125;&#125;         //数据数据名称, 金额<br>])<br>&#123; &quot;name&quot; : &quot;php从入门到放弃&quot;, &quot;price&quot; : NumberDecimal(&quot;599.99&quot;) &#125;<br><br></code></pre></td></tr></table></figure><ul><li>$match 中不能使用 $where 表达式操作符</li><li>如果 $match 位于管道的第一个阶段,可以利用索引来提高查询效率</li><li>$match 中使用 $text 操作符的话,只能位于管道的第一阶段</li><li>$match 尽量出现在管道的最前面,过滤出需要的数据,在后续的阶段中可以提高效率</li></ul><h5 id="group-分组操作"><a href="#group-分组操作" class="headerlink" title="$group 分组操作"></a>$group 分组操作</h5><blockquote><p>根据出版社分组,计算不同出版社的书籍数量</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">aiwiown:PRIMARY&gt; db.tb_book.aggregate([<br>  &#123;$group:&#123;_id:&#x27;$cbs&#x27;, count:&#123;$sum:1&#125;&#125;&#125;,<br>  &#123;$project:&#123;_id:0, &#x27;cbs&#x27;:&#x27;$_id&#x27;, count: 1&#125;&#125;<br>]);<br>&#123; &quot;count&quot; : 1, &quot;cbs&quot; : &quot;机械工业出版社&quot; &#125;<br>&#123; &quot;count&quot; : 7, &quot;cbs&quot; : &quot;中国日报出版社&quot; &#125;<br></code></pre></td></tr></table></figure><h5 id="sort-排序"><a href="#sort-排序" class="headerlink" title="$sort 排序"></a>$sort 排序</h5><blockquote><p>根据出版社升序(1) 金额排序降序(-1)</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">aiwiown:PRIMARY&gt; db.tb_book.aggregate([<br>  &#123;$sort:&#123;cbs:1, price:-1&#125;&#125;,            //根据出版社升序 金额降序<br>  &#123;$project:&#123;_id:0, name:1, price:1&#125;&#125;   //输出 书籍名称, 金额字段<br>])<br>&#123; &quot;name&quot; : &quot;php从入门到放弃&quot;, &quot;price&quot; : NumberDecimal(&quot;599.99&quot;) &#125;<br>&#123; &quot;name&quot; : &quot;python从入门到放弃&quot;, &quot;price&quot; : NumberDecimal(&quot;499.99&quot;) &#125;<br>&#123; &quot;name&quot; : &quot;c++从入门到放弃&quot;, &quot;price&quot; : NumberDecimal(&quot;299.99&quot;) &#125;<br>&#123; &quot;name&quot; : &quot;java从入门到放弃&quot;, &quot;price&quot; : NumberDecimal(&quot;199.99&quot;) &#125;<br>&#123; &quot;name&quot; : &quot;mongodb从入门到放弃&quot;, &quot;price&quot; : NumberDecimal(&quot;179.9900000000000&quot;) &#125;<br>&#123; &quot;name&quot; : &quot;mongodb从入门到放弃&quot;, &quot;price&quot; : NumberDecimal(&quot;169.9900000000000&quot;) &#125;<br>&#123; &quot;name&quot; : &quot;c++入门图解&quot;, &quot;price&quot; : null &#125;<br>&#123; &quot;name&quot; : &quot;C从入门到放弃&quot;, &quot;price&quot; : NumberDecimal(&quot;399.99&quot;) &#125;<br><br></code></pre></td></tr></table></figure><h5 id="limit-限制返回条数"><a href="#limit-限制返回条数" class="headerlink" title="$limit 限制返回条数"></a>$limit 限制返回条数</h5><blockquote><p>查询出版社为<code>中国日报出版社</code> 根据金额升序,并获取2条记录</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">aiwiown:PRIMARY&gt; db.tb_book.aggregate([<br>    &#123;$match:&#123;cbs:&#x27;中国日报出版社&#x27;&#125;&#125;,   //查询出版社为 中国日报出版社 的数据<br>    &#123;$sort:&#123;price:1&#125;&#125;,              //根据金额升序<br>    &#123;$limit:2&#125;                      //获取2条记录<br>]).pretty()                         //格式化输出<br>&#123;<br>        &quot;_id&quot; : ObjectId(&quot;61ee464b1b2b081b2f801fb4&quot;),<br>        &quot;name&quot; : &quot;c++入门图解&quot;,<br>        &quot;cbs&quot; : &quot;中国日报出版社&quot;,<br>        &quot;price&quot; : null,<br>        &quot;deleted&quot; : 1,<br>        &quot;create_time&quot; : ISODate(&quot;2022-01-19T06:34:29.247Z&quot;)<br>&#125;<br>&#123;<br>        &quot;_id&quot; : ObjectId(&quot;61e7aeffd83f5a29ae960b28&quot;),<br>        &quot;name&quot; : &quot;mongodb从入门到放弃&quot;,<br>        &quot;cbs&quot; : &quot;中国日报出版社&quot;,<br>        &quot;price&quot; : NumberDecimal(&quot;169.9900000000000&quot;),<br>        &quot;deleted&quot; : 1,<br>        &quot;create_time&quot; : ISODate(&quot;2022-01-19T06:26:07.178Z&quot;)<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="skip-跳过指定数量的文档"><a href="#skip-跳过指定数量的文档" class="headerlink" title="$skip 跳过指定数量的文档"></a>$skip 跳过指定数量的文档</h5><blockquote><p>查询出版社为<code>中国日报出版社</code> 根据金额升序,并获取3,4条记录</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">aiwiown:PRIMARY&gt; db.tb_book.aggregate([<br>  &#123;$match:&#123;cbs:&#x27;中国日报出版社&#x27;&#125;&#125;,     //查询出版社为 中国日报出版社 的数据<br>  &#123;$sort:&#123;price:1&#125;&#125;,                //根据金额升序<br>  &#123;$skip:2&#125;,                        //跳过前2条<br>  &#123;$limit:2&#125;                        //获取2条记录<br>]).pretty()                         //格式化输出<br>&#123;<br>        &quot;_id&quot; : ObjectId(&quot;61e7aebfd83f5a29ae960b27&quot;),<br>        &quot;name&quot; : &quot;mongodb从入门到放弃&quot;,<br>        &quot;cbs&quot; : &quot;中国日报出版社&quot;,<br>        &quot;price&quot; : NumberDecimal(&quot;179.9900000000000&quot;),<br>        &quot;deleted&quot; : 1,<br>        &quot;create_time&quot; : ISODate(&quot;2022-01-19T06:25:03.373Z&quot;)<br>&#125;<br>&#123;<br>        &quot;_id&quot; : ObjectId(&quot;61e7b0f5256f8f3d2b9370c5&quot;),<br>        &quot;name&quot; : &quot;java从入门到放弃&quot;,<br>        &quot;cbs&quot; : &quot;中国日报出版社&quot;,<br>        &quot;price&quot; : NumberDecimal(&quot;199.99&quot;),<br>        &quot;deleted&quot; : 1,<br>        &quot;create_time&quot; : ISODate(&quot;2022-01-19T06:34:29.247Z&quot;)<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="unwind-拆分文档数组"><a href="#unwind-拆分文档数组" class="headerlink" title="$unwind 拆分文档数组"></a>$unwind 拆分文档数组</h5><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查询文档</span><br>aiwiown:PRIMARY&gt; db.test.find(&#123;_id:ObjectId(&quot;5f35dee1f1ccd78138525e72&quot;)&#125;).pretty()<br>&#123;<br>        &quot;_id&quot; : ObjectId(&quot;5f35dee1f1ccd78138525e72&quot;),<br>        &quot;title&quot; : &quot;pgsql 教程&quot;,<br>        &quot;description&quot; : &quot;pgsql 是一个数据库&quot;,<br>        &quot;by&quot; : &quot;菜鸟教程&quot;,<br>        &quot;url&quot; : &quot;http://www.runoob.com&quot;,<br>        &quot;tags&quot; : [<br>                &quot;pgsql&quot;,<br>                &quot;database&quot;,<br>                &quot;SQL&quot;<br>        ],<br>        &quot;likes&quot; : 100,<br>        &quot;count&quot; : 100<br>&#125;<br><br>//拆分tags<br>aiwiown:PRIMARY&gt; db.test.aggregate([<br>  &#123;$match:&#123;_id:ObjectId(&quot;5f35dee1f1ccd78138525e72&quot;)&#125;&#125;,    //查询文档ID为 5f35dee1f1ccd78138525e72的文档<br>  &#123;$unwind: &#x27;$tags&#x27;&#125;                                      //拆分tags字段<br>]).pretty()<br>&#123;<br>        &quot;_id&quot; : ObjectId(&quot;5f35dee1f1ccd78138525e72&quot;),<br>        &quot;title&quot; : &quot;pgsql 教程&quot;,<br>        &quot;description&quot; : &quot;pgsql 是一个数据库&quot;,<br>        &quot;by&quot; : &quot;菜鸟教程&quot;,<br>        &quot;url&quot; : &quot;http://www.runoob.com&quot;,<br>        &quot;tags&quot; : &quot;pgsql&quot;,<br>        &quot;likes&quot; : 100,<br>        &quot;count&quot; : 100<br>&#125;<br>&#123;<br>        &quot;_id&quot; : ObjectId(&quot;5f35dee1f1ccd78138525e72&quot;),<br>        &quot;title&quot; : &quot;pgsql 教程&quot;,<br>        &quot;description&quot; : &quot;pgsql 是一个数据库&quot;,<br>        &quot;by&quot; : &quot;菜鸟教程&quot;,<br>        &quot;url&quot; : &quot;http://www.runoob.com&quot;,<br>        &quot;tags&quot; : &quot;database&quot;,<br>        &quot;likes&quot; : 100,<br>        &quot;count&quot; : 100<br>&#125;<br>&#123;<br>        &quot;_id&quot; : ObjectId(&quot;5f35dee1f1ccd78138525e72&quot;),<br>        &quot;title&quot; : &quot;pgsql 教程&quot;,<br>        &quot;description&quot; : &quot;pgsql 是一个数据库&quot;,<br>        &quot;by&quot; : &quot;菜鸟教程&quot;,<br>        &quot;url&quot; : &quot;http://www.runoob.com&quot;,<br>        &quot;tags&quot; : &quot;SQL&quot;,<br>        &quot;likes&quot; : 100,<br>        &quot;count&quot; : 100<br>&#125;<br><br><br></code></pre></td></tr></table></figure><ul><li>$unwind 参数数组字段为空或不存在时,待处理的文档将会被忽略,该文档将不会有任何输出;</li><li>$unwind 参数不是一个数组类型时,将会抛出异常;</li><li>$unwind 所作的修改,只用于输出,不能改变原文档;</li></ul><h4 id="表达式操作符"><a href="#表达式操作符" class="headerlink" title="表达式操作符"></a>表达式操作符</h4><h5 id="布尔管道聚合操作（Boolean-Aggregation-Operators）-or-and-not"><a href="#布尔管道聚合操作（Boolean-Aggregation-Operators）-or-and-not" class="headerlink" title="布尔管道聚合操作（Boolean Aggregation Operators） $or $and $not"></a>布尔管道聚合操作（Boolean Aggregation Operators） $or $and $not</h5><blockquote><p>示例1 查询金额大于200 小于500的书籍</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">aiwiown:PRIMARY&gt; db.tb_book.aggregate([<br>  &#123;$match:&#123;<br>    price:&#123;<br>      $gt:NumberDecimal(200), <br>      $lt:NumberDecimal(500)<br>    &#125;<br>  &#125;&#125;,<br>  &#123;$project:&#123;_id:0, name:1, price:1&#125;&#125;<br>]);<br>&#123; &quot;name&quot; : &quot;c++从入门到放弃&quot;, &quot;price&quot; : NumberDecimal(&quot;299.99&quot;) &#125;<br>&#123; &quot;name&quot; : &quot;C从入门到放弃&quot;, &quot;price&quot; : NumberDecimal(&quot;399.99&quot;) &#125;<br>&#123; &quot;name&quot; : &quot;python从入门到放弃&quot;, &quot;price&quot; : NumberDecimal(&quot;499.99&quot;) &#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>示例2 判断金额小于200或大于500的书籍</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">aiwiown:PRIMARY&gt; db.tb_book.aggregate([<br>  &#123;$project: &#123;<br>    _id: 0,name: 1, price:1, <br>    amount: &#123;<br>      $or: [<br>        &#123;$gt: [&#x27;$price&#x27;,NumberDecimal(&#x27;500&#x27;)]&#125;, <br>        &#123;$lt: [&#x27;$price&#x27;,NumberDecimal(&#x27;200&#x27;)]&#125;<br>      ]<br>     &#125;<br>  &#125;<br>&#125;])<br>&#123; &quot;name&quot; : &quot;mongodb从入门到放弃&quot;, &quot;price&quot; : NumberDecimal(&quot;179.9900000000000&quot;), &quot;amount&quot; : true &#125;<br>&#123; &quot;name&quot; : &quot;mongodb从入门到放弃&quot;, &quot;price&quot; : NumberDecimal(&quot;169.9900000000000&quot;), &quot;amount&quot; : true &#125;<br>&#123; &quot;name&quot; : &quot;java从入门到放弃&quot;, &quot;price&quot; : NumberDecimal(&quot;199.99&quot;), &quot;amount&quot; : true &#125;<br>&#123; &quot;name&quot; : &quot;c++从入门到放弃&quot;, &quot;price&quot; : NumberDecimal(&quot;299.99&quot;), &quot;amount&quot; : false &#125;<br>&#123; &quot;name&quot; : &quot;C从入门到放弃&quot;, &quot;price&quot; : NumberDecimal(&quot;399.99&quot;), &quot;amount&quot; : false &#125;<br>&#123; &quot;name&quot; : &quot;python从入门到放弃&quot;, &quot;price&quot; : NumberDecimal(&quot;499.99&quot;), &quot;amount&quot; : false &#125;<br>&#123; &quot;name&quot; : &quot;php从入门到放弃&quot;, &quot;price&quot; : NumberDecimal(&quot;599.99&quot;), &quot;amount&quot; : true &#125;<br>&#123; &quot;name&quot; : &quot;c++入门图解&quot;, &quot;price&quot; : null, &quot;amount&quot; : true &#125;<br><br></code></pre></td></tr></table></figure><h5 id="集合操作（Set-Operators）"><a href="#集合操作（Set-Operators）" class="headerlink" title="集合操作（Set Operators）"></a>集合操作（Set Operators）</h5><p>样本</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs jsos">&#123;<br>  &quot;_id&quot;: 1,<br>  &quot;A&quot;: [<br>    &quot;red&quot;,<br>    &quot;blue&quot;<br>  ],<br>  &quot;B&quot;: [<br>    &quot;red&quot;,<br>    &quot;blue&quot;<br>  ]<br>&#125;<br>&#123;<br>  &quot;_id&quot;: 2,<br>  &quot;A&quot;: [<br>    &quot;red&quot;,<br>    &quot;blue&quot;<br>  ],<br>  &quot;B&quot;: [<br>    &quot;blue&quot;,<br>    &quot;red&quot;,<br>    &quot;blue&quot;<br>  ]<br>&#125;<br>&#123;<br>  &quot;_id&quot;: 3,<br>  &quot;A&quot;: [<br>    &quot;red&quot;,<br>    &quot;blue&quot;<br>  ],<br>  &quot;B&quot;: [<br>    &quot;red&quot;,<br>    &quot;blue&quot;,<br>    &quot;green&quot;<br>  ]<br>&#125;<br>&#123;<br>  &quot;_id&quot;: 4,<br>  &quot;A&quot;: [<br>    &quot;red&quot;,<br>    &quot;blue&quot;<br>  ],<br>  &quot;B&quot;: [<br>    &quot;green&quot;,<br>    &quot;red&quot;<br>  ]<br>&#125;<br>&#123;<br>  &quot;_id&quot;: 5,<br>  &quot;A&quot;: [<br>    &quot;red&quot;,<br>    &quot;blue&quot;<br>  ],<br>  &quot;B&quot;: []<br>&#125;<br>&#123;<br>  &quot;_id&quot;: 6,<br>  &quot;A&quot;: [<br>    &quot;red&quot;,<br>    &quot;blue&quot;<br>  ],<br>  &quot;B&quot;: [<br>    [<br>      &quot;red&quot;<br>    ],<br>    [<br>      &quot;blue&quot;<br>    ]<br>  ]<br>&#125;<br>&#123;<br>  &quot;_id&quot;: 7,<br>  &quot;A&quot;: [<br>    &quot;red&quot;,<br>    &quot;blue&quot;<br>  ],<br>  &quot;B&quot;: [<br>    [<br>      &quot;red&quot;,<br>      &quot;blue&quot;<br>    ]<br>  ]<br>&#125;<br>&#123;<br>  &quot;_id&quot;: 8,<br>  &quot;A&quot;: [],<br>  &quot;B&quot;: []<br>&#125;<br>&#123;<br>  &quot;_id&quot;: 9,<br>  &quot;A&quot;: [],<br>  &quot;B&quot;: [<br>    &quot;red&quot;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>$setEquals</td><td>匹配 <code>&#123;$setEquals:[&#39;$B&#39;,&#39;$A&#39;]&#125;</code>匹配两个集合是否一致</td></tr><tr><td>$setIntersection</td><td>交集 <code>&#123;$setIntersection:[&#39;$B&#39;,&#39;$A&#39;]</code> 获取A,B集合都存在的数据</td></tr><tr><td>$setUnion</td><td>并集 <code>&#123;$setUnion:[&#39;$B&#39;,&#39;$A&#39;]</code> 获取A,B集合所有数据</td></tr><tr><td>$setDifference</td><td>差集 <code>&#123;$setDifference:[&#39;$B&#39;,&#39;$A&#39;]</code> 获取B集合数据中在A集合中不存在的数据</td></tr><tr><td>$setIsSubset</td><td>子集 <code>&#123;$setIsSubset:[&#39;$B&#39;,&#39;$A&#39;]&#125;</code> 判断B是否是A的子集</td></tr><tr><td>$anyElementTrue</td><td>判断集合是否存在值</td></tr><tr><td>$allElementsTrue</td><td>如果集合中没有元素计算结果为 false，则返回 true，否则返回 false。接受单个参数表达式。</td></tr></tbody></table><blockquote><p>示例 获取A,B列的交集</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">aiwiown:PRIMARY&gt; db.tb_set.aggregate([&#123;$project:&#123;_id:0, A:1, B:1, union:&#123;$setIntersection:[&#x27;$A&#x27;,&#x27;$B&#x27;]&#125;&#125;&#125;])<br>&#123; &quot;A&quot; : [ &quot;red&quot;, &quot;blue&quot; ], &quot;B&quot; : [ &quot;red&quot;, &quot;blue&quot; ], &quot;union&quot; : [ &quot;blue&quot;, &quot;red&quot; ] &#125;<br>&#123; &quot;A&quot; : [ &quot;red&quot;, &quot;blue&quot; ], &quot;B&quot; : [ &quot;blue&quot;, &quot;red&quot;, &quot;blue&quot; ], &quot;union&quot; : [ &quot;blue&quot;, &quot;red&quot; ] &#125;<br>&#123; &quot;A&quot; : [ &quot;red&quot;, &quot;blue&quot; ], &quot;B&quot; : [ &quot;red&quot;, &quot;blue&quot;, &quot;green&quot; ], &quot;union&quot; : [ &quot;blue&quot;, &quot;red&quot; ] &#125;<br>&#123; &quot;A&quot; : [ &quot;red&quot;, &quot;blue&quot; ], &quot;B&quot; : [ &quot;green&quot;, &quot;red&quot; ], &quot;union&quot; : [ &quot;red&quot; ] &#125;<br>&#123; &quot;A&quot; : [ &quot;red&quot;, &quot;blue&quot; ], &quot;B&quot; : [ ], &quot;union&quot; : [ ] &#125;<br>&#123; &quot;A&quot; : [ &quot;red&quot;, &quot;blue&quot; ], &quot;B&quot; : [ [ &quot;red&quot; ], [ &quot;blue&quot; ] ], &quot;union&quot; : [ ] &#125;<br>&#123; &quot;A&quot; : [ &quot;red&quot;, &quot;blue&quot; ], &quot;B&quot; : [ [ &quot;red&quot;, &quot;blue&quot; ] ], &quot;union&quot; : [ ] &#125;<br>&#123; &quot;A&quot; : [ ], &quot;B&quot; : [ ], &quot;union&quot; : [ ] &#125;<br>&#123; &quot;A&quot; : [ ], &quot;B&quot; : [ &quot;red&quot; ], &quot;union&quot; : [ ] &#125;<br><br></code></pre></td></tr></table></figure><h5 id="比较聚合操作"><a href="#比较聚合操作" class="headerlink" title="比较聚合操作"></a>比较聚合操作</h5><p>样本</p><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  _id<span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  start<span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>  end<span class="hljs-punctuation">:</span> <span class="hljs-number">8</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><br>  _id<span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>  start<span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>  end<span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><br>  _id<span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>  start<span class="hljs-punctuation">:</span> <span class="hljs-number">9</span><span class="hljs-punctuation">,</span><br>  end<span class="hljs-punctuation">:</span> <span class="hljs-number">7</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><br>  _id<span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>  start<span class="hljs-punctuation">:</span> <span class="hljs-number">6</span><span class="hljs-punctuation">,</span><br>  end<span class="hljs-punctuation">:</span> <span class="hljs-number">7</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>$cmp</td><td>返回：如果两个值相等，则返回 0，如果第一个值大于第二个，则返回 1，如果第一个值小于第二个，则返回 -1。 eg:<code>&#123;eqse:&#123;$cmp:[&#39;$start&#39;,&#39;$end&#39;]&#125;&#125;</code></td></tr><tr><td>$eq</td><td>如果值相等，则返回 true。</td></tr><tr><td>$gt</td><td>R如果第一个值大于第二个值，则返回 true。</td></tr><tr><td>$gte</td><td>如果第一个值大于或等于第二个值，则返回 true。</td></tr><tr><td>$lt</td><td>如果第一个值小于第二个值，则返回 true。</td></tr><tr><td>$lte</td><td>如果第一个值小于或等于第二个值，则返回 true。</td></tr><tr><td>$ne</td><td>如果值不相等，则返回 true。</td></tr></tbody></table><blockquote><p>示例1 比较start, end值</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">aiwiown:PRIMARY&gt; db.tb_compare.aggregate([&#123;$project:&#123;eqse:&#123;$cmp:[&#x27;$start&#x27;,&#x27;$end&#x27;]&#125;&#125;&#125;])<br>&#123; &quot;_id&quot; : 1, &quot;eqse&quot; : -1 &#125;<br>&#123; &quot;_id&quot; : 2, &quot;eqse&quot; : 0 &#125;<br>&#123; &quot;_id&quot; : 3, &quot;eqse&quot; : 1 &#125;<br>&#123; &quot;_id&quot; : 4, &quot;eqse&quot; : -1 &#125;<br></code></pre></td></tr></table></figure><blockquote><p>示例2 获取start&#x3D;end的数据ID</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">aiwiown:PRIMARY&gt; db.tb_compare.aggregate([&#123;$project:&#123;_id:1, gt:&#123;$eq: [&#x27;$start&#x27;,&#x27;$end&#x27;]&#125;&#125;&#125;,&#123;$match:&#123;gt:true&#125;&#125;])<br>&#123; &quot;_id&quot; : 2, &quot;gt&quot; : true &#125;<br></code></pre></td></tr></table></figure><h5 id="算术聚合操作-doc"><a href="#算术聚合操作-doc" class="headerlink" title="算术聚合操作 doc"></a>算术聚合操作 <a href="https://docs.mongodb.com/v4.0/meta/aggregation-quick-reference/">doc</a></h5><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>$abs</td><td>获取绝对值 <code>&#123;abs:&#123; $abs:&#39;$price&#39;&#125;&#125;</code></td></tr><tr><td>$add</td><td>求和 <code>&#123;add:&#123;$add:[&#39;$price&#39;:10]&#125;&#125;</code></td></tr><tr><td>$ceil</td><td>向上取整 正数存在小数则舍去小数加1,负数则直接舍去小数。<code>&#123;ceil:&#123; $ceil:&#39;$price&#39;&#125;&#125;</code></td></tr><tr><td>$divide</td><td>除运算 <code>&#123;devide:&#123; $divide:[&#39;$price&#39;, 10]&#125;&#125;</code></td></tr><tr><td>$exp</td><td>计算e的n次幂 <code>&#123;exp:&#123; $exp:1&#125;&#125;</code> e≈2.718281828459045</td></tr><tr><td>$floor</td><td>向下取整 返回小于或等于指定数字的最大整数。<code>&#123;floor:&#123; $floor:&#39;$price&#39;&#125;&#125;</code></td></tr><tr><td>$ln</td><td>e为底数的对数-&gt;log n <code>&#123;ln:&#123; $ln:0&#125;&#125;</code></td></tr><tr><td>$log</td><td><code>&#123;log:&#123;$log:[100,10]&#125;&#125;</code> 计算以10为底100的对数, 2</td></tr><tr><td>$log10</td><td>计算以10为底N的对数  <code>&#123;log10:&#123;$log10:100&#125;&#125;</code> &#x3D;&#x3D; <code>&#123;log:&#123;$log:[100,10]&#125;&#125;</code></td></tr><tr><td>$mod</td><td>取模(余)运算 <code>&#123;mod:&#123;$mod:[11,2]&#125;&#125;</code> &#x3D; 1</td></tr><tr><td>$multiply</td><td>乘法运算 <code>&#123;multiply:&#123;$multiply:[10,10]&#125;&#125;</code> &#x3D; 100</td></tr><tr><td>$pow</td><td>继续参数0的参数1次方 <code>&#123;pow:&#123;$pow:[5,2]&#125;&#125;</code> &#x3D; 25</td></tr><tr><td>$sqrt</td><td>计算平方根 <code>&#123;sqrt:&#123;$sqrt:25&#125;&#125;</code> &#x3D; 5</td></tr><tr><td>$subtract</td><td>减法运算  <code>&#123;sub:&#123;$subtract:[10,10]&#125;&#125;</code> &#x3D; 0</td></tr><tr><td>$trunc</td><td>截取 <code>&#123;trunc:&#123;$trunc:100.1&#125;&#125;</code> &#x3D; 100</td></tr></tbody></table><h5 id="字符串聚合操作"><a href="#字符串聚合操作" class="headerlink" title="字符串聚合操作"></a>字符串聚合操作</h5><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>$concat</td><td>拼接字符串 <code>&#123;concat: &#123;$concat:[&#39;a&#39;,&#39;b&#39;,&#39;c&#39;]&#125;&#125;</code> &#x3D; abc</td></tr><tr><td>$indexOfBytes</td><td>查找字符串,存在返回索引值, 不存在返回-1, 索引从0开始 <code>&#123;indexOfBytes:&#123;$indexOfBytes:[&#39;abc&#39;,&#39;a&#39;]&#125;&#125;</code></td></tr><tr><td>$indexOfCP</td><td>查找字符串,存在返回索引值, 不存在返回-1, 索引从0开始 <code>&#123;indexOfBytes:&#123;$indexOfBytes:[&#39;abc&#39;,&#39;a&#39;]&#125;&#125;</code></td></tr><tr><td>$split</td><td>切分字符串 <code>&#123;split:&#123;$split:[&#39;hi mongodb!&#39;, &#39; &#39;]&#125;&#125;</code> &#x3D;  <code>[ &quot;hi&quot;, &quot;mongodb!&quot; ]</code></td></tr><tr><td>$strLenBytes</td><td>返回字符串中 UTF-8 编码的字节数。</td></tr><tr><td>$strLenCP</td><td>返回字符串中 UTF-8 代码点的数量。</td></tr><tr><td>$strcasecmp</td><td>执行不区分大小写的字符串比较并返回：如果两个字符串相等，则返回 0，如果第一个字符串大于第二个字符串，则返回 1，如果第一个字符串小于第二个字符串，则返回 -1。</td></tr><tr><td>$substr</td><td>已弃用。使用 $substrBytes 或 $substrCP。</td></tr><tr><td>$substrBytes</td><td>返回字符串的子字符串。从字符串中指定 UTF-8 字节索引（从零开始）处的字符开始，并持续指定的字节数。</td></tr><tr><td>$substrCP</td><td>返回字符串的子字符串。从字符串中指定的 UTF-8 代码点 (CP) 索引（从零开始）处的字符开始，并持续到指定的代码点数。</td></tr><tr><td>$toLower</td><td>转小写</td></tr><tr><td>$toUpper</td><td>转大写</td></tr></tbody></table><h5 id="数组聚合操作-doc"><a href="#数组聚合操作-doc" class="headerlink" title="数组聚合操作 doc"></a>数组聚合操作 <a href="https://docs.mongodb.com/v4.0/meta/aggregation-quick-reference/">doc</a></h5><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>$arrayElemAt</td><td>返回指定索引处的元素 <code>&#123;arrayElemAt:&#123;$arrayElemAt:[[&#39;abc&#39;,&#39;bcd&#39;, &#39;efg&#39;],-1]&#125;&#125;</code> &#x3D; efg</td></tr><tr><td>$concatArrays</td><td>连接数组 <code>&#123;concatArrays:&#123;$concatArrays:[[&#39;abc&#39;,&#39;bcd&#39;, &#39;efg&#39;],[123,234,345]]&#125;&#125; </code> &#x3D; [“abc”, “bcd”, “efg”, 123, 234, 345]</td></tr><tr><td>$filter</td><td>{ <code>$filter: &#123; input: &lt;array&gt;, as: &lt;string&gt;, cond: &lt;expression&gt; &#125; &#125;</code>  数组元素匹配</td></tr><tr><td>$indexOfArray</td><td>查找元素 返回索引下标, 未查询到返回-1 <code>&#123;indexOfArray:&#123;$indexOfArray:[[&#39;abc&#39;,&#39;bcd&#39;,&#39;efg&#39;],&#39;efgg&#39;]&#125;&#125;</code> -1</td></tr><tr><td>$isArray</td><td>判断元素是否为数组 <code>&#123; $isArray:[&lt;expression&gt;]&#125;</code> eg: <code>&#123;$isArray:[&#39;abc&#39;]&#125;</code> false, <code>&#123;$isArray:[&#39;abc&#39;,&#39;cde&#39;]&#125;</code> true,</td></tr><tr><td>$range</td><td>输出一个数组 <code>&#123; $range: [ &lt;start&gt;, &lt;end&gt;, &lt;non-zero step&gt; ] &#125;</code> <start> 开始位置 <end> 结束位置, <non-zero step> 步长(默认1)</td></tr><tr><td>$reverseArray</td><td>反转数组 <code>&#123;reverseArray:&#123;$reverseArray:[[0,10,5]]&#125;&#125;</code> -&gt; [5,10,0]</td></tr><tr><td>$reduce</td><td>将表达式应用于数组中的每个元素并将它们组合成一个值。</td></tr><tr><td>$size</td><td>返回数组长度  <code>&#123;size:&#123;$size:[[0,10,5]]&#125;&#125;</code> 3</td></tr><tr><td>$slice</td><td>Returns a subset of an array.</td></tr><tr><td>$zip</td><td>将两个列表合并在一起</td></tr><tr><td>$in</td><td>返回一个布尔值，指示指定的值是否在数组中。<code>&#123;in:&#123;$in:[123,[123,234,345]]&#125;&#125;</code>,</td></tr></tbody></table><blockquote><p>数组元素匹配</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">db.tb_book.aggregate([<br>  &#123;$project:&#123;filter:&#123;$filter: &#123;<br>      input: [ 1, &quot;a&quot;, 2, null, 3.1, NumberLong(4), &quot;5&quot; ],      //输入数组<br>      as: &quot;num&quot;,                                                //别名<br>      cond:&#123;                                                    //条件<br>        $and:[<br>           &#123; $gte: [ &quot;$$num&quot;, NumberLong(&quot;-9223372036854775807&quot;)]&#125;,<br>           &#123; $lte: [ &quot;$$num&quot;, NumberLong(&quot;9223372036854775807&quot;)]&#125;<br>        ]&#125;<br>      &#125;&#125;<br>  &#125;&#125;<br>])<br></code></pre></td></tr></table></figure><blockquote><p>$reduce示例</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">aiwiown:PRIMARY&gt; db.tb_book.aggregate([<br>  &#123;$project:&#123;reduce:&#123;$reduce:&#123;<br>    input:[[123,234],[567,678]],              //输入参数 $this<br>    initialValue:[345,456],                   //测试参数 $value<br>    in:&#123;$concatArrays:[&#x27;$$this&#x27;, &#x27;$$value&#x27;]&#125;&#125;<br>&#125;&#125;&#125;])<br>&#123; &quot;_id&quot; : ObjectId(&quot;61e7aebfd83f5a29ae960b27&quot;), &quot;reduce&quot; : [ 567, 678, 123, 234, 345, 456 ] &#125;<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
            <tag> 聚合管道 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年01月10日 git相关命令</title>
      <link href="/2022/01/10/2022/202201/2022-01-10-GIT%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/01/10/2022/202201/2022-01-10-GIT%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="git相关命令"><a href="#git相关命令" class="headerlink" title="git相关命令"></a>git相关命令</h2><h3 id="git基本操作"><a href="#git基本操作" class="headerlink" title="git基本操作"></a>git基本操作</h3><ul><li><p>提交代码</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">gut pull<br>git add .<br>git commit -m &quot;提交的记录&quot;<br>git push origin 分支名称<br></code></pre></td></tr></table></figure></li><li><p>回滚commit</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">git log #获取上个版本的commitId, 按Q退出log  <br>git reset --soft commitId  # 重置<br></code></pre></td></tr></table></figure></li><li><p>屏蔽(.idea)文件提交</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">git rm -r --cached .idea #--cached不会把本地的.idea删除<br>git add .<br>git commit -m &#x27;忽略idea&#x27;<br></code></pre></td></tr></table></figure></li><li><p>克隆远程指定分支</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">git clone -b &lt;指定分支名&gt; &lt;远程仓库地址&gt;<br></code></pre></td></tr></table></figure></li><li><p>查看所有分支</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">git branch -a<br>```  <br>- 删除本地分支<br>``` shell<br>git branch -d 本地分支<br></code></pre></td></tr></table></figure></li><li><p>删除远程分支(warning)</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">git push origin --delete jedis.custer(远程分支名称)<br></code></pre></td></tr></table></figure></li><li><p>新建本地分支</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">git checkout -b hotfix.v2(新分支名称)<br></code></pre></td></tr></table></figure></li><li><p>回退到指定位置:</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">git reset --hard 07b9cd407c2665dec2bcb4412e61824bd2bde3dc(commitId)<br></code></pre></td></tr></table></figure></li><li><p>推送新分支到远程:</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">git push<br></code></pre></td></tr></table></figure></li><li><p>git更改本地和远程分支的名称</p><ol><li>修改本地分支名称<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">git branch -m old_branch new_branch<br></code></pre></td></tr></table></figure></li><li>删除远程旧分支<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">git push origin :old_branch<br></code></pre></td></tr></table></figure></li><li>推送新分支，设置本地分支以跟踪新远程<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">git push --set-upstream origin new_branch<br></code></pre></td></tr></table></figure></li></ol></li><li><p>创建标签-如release版本</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">git tag -a v1.4 -m &quot;描述&quot;<br></code></pre></td></tr></table></figure></li><li><p>查看创建的标签</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">git tag<br></code></pre></td></tr></table></figure></li><li><p>查看v1.8.5版本上创建的标签</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">git tag -l &quot;v1.8.5*&quot;<br></code></pre></td></tr></table></figure></li><li><p>指定提交版本标记</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">git tag -a v1.2 9fceb02(提交记录)<br>git tag -a v3.0.4 117d9c7d(提交记录)<br>git tag -a v3.0.4 117d9c7d -m &quot;face++ ocr&quot;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年12月12日 manjaro安装Mysql8.0.27</title>
      <link href="/2021/12/12/2021/202112/2021-12-12-manjaro%E5%AE%89%E8%A3%85mysql8/"/>
      <url>/2021/12/12/2021/202112/2021-12-12-manjaro%E5%AE%89%E8%A3%85mysql8/</url>
      
        <content type="html"><![CDATA[<h2 id="Manjaro-安装Mysql8-0-27"><a href="#Manjaro-安装Mysql8-0-27" class="headerlink" title="Manjaro 安装Mysql8.0.27"></a>Manjaro 安装Mysql8.0.27</h2><h3 id="下载Mysql8-0-27"><a href="#下载Mysql8-0-27" class="headerlink" title="下载Mysql8.0.27"></a>下载Mysql8.0.27</h3><ol><li>清华大学镜像源下载<code>mysql-8.0.27</code></li></ol><blockquote><p><a href="https://mirrors.tuna.tsinghua.edu.cn/mysql/downloads/MySQL-8.0/mysql-8.0.27-linux-glibc2.12-x86_64.tar">https://mirrors.tuna.tsinghua.edu.cn/mysql/downloads/MySQL-8.0/mysql-8.0.27-linux-glibc2.12-x86_64.tar</a></p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>创建安装文件夹</li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 移动文件夹</span><br><span class="hljs-built_in">mv</span> mysql-8.0.27-linux-glibc2.12-x86_64.tar /data/<br><span class="hljs-comment"># 解压</span><br>tar -zxvf mysql-8.0.27-linux-glibc2.12-x86_64.tar<br><span class="hljs-comment"># 重命名</span><br><span class="hljs-built_in">cd</span> /data<br><span class="hljs-built_in">mv</span> mysql-8.0.27-linux-glibc2.12-x86_64 mysql-8.0.27<br></code></pre></td></tr></table></figure><ul><li>创建日志目录、数据目录</li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /data/mysql-8.0.27/<br><span class="hljs-comment"># 创建日志目录、数据目录</span><br><span class="hljs-built_in">mkdir</span> <span class="hljs-built_in">log</span><br><span class="hljs-built_in">mkdir</span> data<br><span class="hljs-comment"># 创建sock,pid,conf文件</span><br><span class="hljs-built_in">touch</span> mysql.sock<br><span class="hljs-built_in">touch</span> mysqld.pid<br></code></pre></td></tr></table></figure><ul><li>创建my.conf文件</li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">vim my.conf<br><span class="hljs-comment">#写入内容</span><br><span class="hljs-comment">#===============================================</span><br>[client]<br>default-character-set=utf8<br>port = 3306<br>socket = /data/mysql-8.0.27/mysql.sock<br><br>[mysql]<br>default-character-set=utf8<br>port = 3306<br>socket = /data/mysql-8.0.27/mysql.sock<br><br>[mysqld]<br>character_set_server=utf8<br>init_connect=<span class="hljs-string">&#x27;SET NAMES utf8&#x27;</span><br>basedir=/data/mysql-8.0.27<br>datadir=/data/mysql-8.0.27/data<br>socket=/data/mysql-8.0.27/mysql.sock<br>log-error=/data/mysql-8.0.27/log/mysqld.log<br>pid-file=/data/mysql-8.0.27/mysqld.pid<br><br><span class="hljs-comment">#不区分大小写</span><br>lower_case_table_names = 1<br>sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION<br>max_connections=5000<br>default-time_zone = <span class="hljs-string">&#x27;+8:00&#x27;</span><br><br><span class="hljs-comment">#开启查询缓存</span><br>explicit_defaults_for_timestamp=<span class="hljs-literal">true</span><br>skip-grant-tables<br><span class="hljs-comment">#===============================================</span><br><br><span class="hljs-comment"># 修改权限</span><br>sudo <span class="hljs-built_in">chmod</span> 644 my.conf<br></code></pre></td></tr></table></figure><ul><li>创建日志文件</li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> <span class="hljs-built_in">log</span><br><span class="hljs-built_in">touch</span> mysqld.log<br></code></pre></td></tr></table></figure><ul><li>创建mysql用户,组</li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /data<br><span class="hljs-comment">#创建用户组mysql</span><br>sudo groupadd mysql<br><span class="hljs-comment">#-r参数表示mysql用户是系统用户，不可用于登录系统，创建用户mysql并将其添加到用户组mysql中</span><br>sudo useradd -r -g mysql mysql<br>sudo <span class="hljs-built_in">chown</span> -R mysql mysql-8.0.27/<br>sudo <span class="hljs-built_in">chgrp</span> -R mysql mysql-8.0.27/<br></code></pre></td></tr></table></figure><ul><li>初始化数据库</li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">cd</span> /data/mysql-8.0.27/<br>sudo bin/mysqld --initialize --user=mysql<br></code></pre></td></tr></table></figure><h3 id="启动mysql"><a href="#启动mysql" class="headerlink" title="启动mysql"></a>启动mysql</h3><ol><li>修改&#x2F;data&#x2F;mysql-8.0.27&#x2F;support-files&#x2F;mysql.server文件</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs server">basedir=/data/mysql-8.0.27<br>datadir=/data/mysql-8.0.27/data<br></code></pre></td></tr></table></figure><ol start="2"><li>启动MYSQL</li></ol><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo /data/mysql-8.0.27/support-files/mysql.server start<br></code></pre></td></tr></table></figure><ol start="3"><li>修改root密码</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">cd <span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>mysql<span class="hljs-number">-8.0</span><span class="hljs-number">.27</span><span class="hljs-operator">/</span><br>bin<span class="hljs-operator">/</span>mysql <span class="hljs-operator">-</span>u root <span class="hljs-operator">-</span>p<br></code></pre></td></tr></table></figure><p>回车 执行</p><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">user</span>() identified <span class="hljs-keyword">by</span> &quot;新密码&quot;;<br></code></pre></td></tr></table></figure><ol start="4"><li>修改配置注释</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">skip-grant-tables<br></code></pre></td></tr></table></figure><ol start="5"><li>重启MYSQL</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">sudo /data/mysql-8.0.27/support-files/mysql.server restart<br></code></pre></td></tr></table></figure><h3 id="设置开机自启-其他服务也可以这样创建启动服务"><a href="#设置开机自启-其他服务也可以这样创建启动服务" class="headerlink" title="设置开机自启(其他服务也可以这样创建启动服务)"></a>设置开机自启(其他服务也可以这样创建启动服务)</h3><ol start="0"><li>开关命令</li></ol><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment">## 开启</span><br>/data/mysql-8.0.27/support-files/mysql.server start<br><span class="hljs-comment">## 关闭</span><br>/data/mysql-8.0.27/support-files/mysql.server stop<br></code></pre></td></tr></table></figure><ol><li>在<code>/etc/systemd/system</code> 下创建 <code>mysqld.service</code> 文件 写入如下：</li></ol><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">[Unit]<br>Description = mysql<br>After = network.target<br><br>[Service]<br>Type = forking<br>ExecStart = /data/mysql-8.0.27/support-files/mysql.server start<br>ExecStop  = /data/mysql-8.0.27/support-files/mysql.server stop<br><br>[Install]<br>WantedBy = multi-user.target<br><br></code></pre></td></tr></table></figure><ol start="2"><li>相关命令</li></ol><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 启动mysql服务</span><br>sudo systemctl start mysqld<br><span class="hljs-comment"># 查看mysql服务状态</span><br>sudo systemctl status mysqld<br><span class="hljs-comment"># 停止mysql服务</span><br>sudo systemctl stop mysqld<br><span class="hljs-comment"># 设置开机自启</span><br>sudo systemctl <span class="hljs-built_in">enable</span> mysqld<br><span class="hljs-comment"># 关闭开机自启</span><br>sudo systemctl <span class="hljs-built_in">disable</span> mysqld<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> Manjaro </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年12月01日 Manjaro安装deb包</title>
      <link href="/2021/12/01/2021/202112/2021-12-01-Manjaro%E5%AE%89%E8%A3%85deb%E5%8C%85/"/>
      <url>/2021/12/01/2021/202112/2021-12-01-Manjaro%E5%AE%89%E8%A3%85deb%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h3 id="Manjaro安装deb包"><a href="#Manjaro安装deb包" class="headerlink" title="Manjaro安装deb包"></a>Manjaro安装deb包</h3><h4 id="1-安装debtap"><a href="#1-安装debtap" class="headerlink" title="1. 安装debtap"></a>1. 安装debtap</h4><p>使用yay安装debtap，如果没有yay，需要使用pacman安装yay：</p><blockquote><p>sudo pacman -S yay</p></blockquote><p>安装debtap：</p><blockquote><p>sudo yay -S debtap</p></blockquote><h4 id="2-deb包转换arch包"><a href="#2-deb包转换arch包" class="headerlink" title="2.deb包转换arch包"></a>2.deb包转换arch包</h4><p>需要先运行下述命令，否则会出错：</p><blockquote><p>sudo debtap -u</p></blockquote><p>使用debtap将deb包转换为arch包，假设需要转换的deb包为xxxxx.deb：</p><blockquote><p>sudo debtap -q xxxxx.deb</p></blockquote><p>在转换过程中会提示是否需要编辑相关信息，直接按回车即可，转换完成后，将会生成一个后缀为.pkg.tar.rst的文件。</p><h4 id="3-安装"><a href="#3-安装" class="headerlink" title="3.安装"></a>3.安装</h4><p>使用pacman安装转换的arch包：</p><blockquote><p>sudo pacman -U xxxx.pkg.tar.rst</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> Manjaro </category>
          
          <category> Deb安装包 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> Manjaro </tag>
            
            <tag> deb包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年12月01日 Manjaro安装向日葵</title>
      <link href="/2021/12/01/2021/202112/2021-12-01-Manjaro%E5%AE%89%E8%A3%85%E5%90%91%E6%97%A5%E8%91%B5%E8%BF%9C%E7%A8%8B/"/>
      <url>/2021/12/01/2021/202112/2021-12-01-Manjaro%E5%AE%89%E8%A3%85%E5%90%91%E6%97%A5%E8%91%B5%E8%BF%9C%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="Manjaro安装向日葵"><a href="#Manjaro安装向日葵" class="headerlink" title="Manjaro安装向日葵"></a>Manjaro安装向日葵</h3><h4 id="安装向日葵"><a href="#安装向日葵" class="headerlink" title="安装向日葵"></a>安装向日葵</h4><blockquote><p>yay -Sy sunloginclient</p></blockquote><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><blockquote><p>systemctl start runsunloginclient.service</p></blockquote><h4 id="设置服务为开机启动"><a href="#设置服务为开机启动" class="headerlink" title="设置服务为开机启动"></a>设置服务为开机启动</h4><blockquote><p>systemctl enable runsunloginclient.service</p></blockquote><h4 id="查看服务状态"><a href="#查看服务状态" class="headerlink" title="查看服务状态"></a>查看服务状态</h4><blockquote><p>sudo systemctl status runsunloginclient.service</p></blockquote><h4 id="停止服务"><a href="#停止服务" class="headerlink" title="停止服务"></a>停止服务</h4><blockquote><p>sudo systemctl stop runsunloginclient.service</p></blockquote><h4 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h4><blockquote><p>sudo systemctl restart runsunloginclient.service</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> Manjaro </category>
          
          <category> 向日葵 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> Manjaro </tag>
            
            <tag> 向日葵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年11月01日 ruby安装</title>
      <link href="/2021/11/01/2021/202111/2021-11-01-ruby%E5%AE%89%E8%A3%85/"/>
      <url>/2021/11/01/2021/202111/2021-11-01-ruby%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h3 id="RVM-安装"><a href="#RVM-安装" class="headerlink" title="RVM 安装"></a>RVM 安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">gpg2 --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB<br>\curl -sSL https://get.rvm.io | bash -s stable<br>source ~/.bashrc<br>source ~/.bash_profile<br></code></pre></td></tr></table></figure><p>修改 RVM 的 Ruby 安装源到 Ruby China 的 Ruby 镜像服务器，这样能提高安装速度</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">echo &quot;ruby_url=https://cache.ruby-china.com/pub/ruby&quot; &gt; ~/.rvm/user/db<br></code></pre></td></tr></table></figure><h3 id="Ruby-的安装与切换"><a href="#Ruby-的安装与切换" class="headerlink" title="Ruby 的安装与切换"></a>Ruby 的安装与切换</h3><ul><li>列出已知的 Ruby 版本</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><br>rvm list known                                                             <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">MRI Rubies</span><br>[ruby-]1.8.6[-p420]<br>[ruby-]1.8.7[-head] # security released on head<br>[ruby-]1.9.1[-p431]<br>[ruby-]1.9.2[-p330]<br>[ruby-]1.9.3[-p551]<br>[ruby-]2.0.0[-p648]<br>[ruby-]2.1[.10]<br>[ruby-]2.2[.10]<br>[ruby-]2.3[.8]<br>[ruby-]2.4[.10]<br>[ruby-]2.5[.8]<br>[ruby-]2.6[.6]<br>[ruby-]2.7[.2]<br>[ruby-]3[.0.0]<br>ruby-head<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-keyword">for</span> forks use: rvm install ruby-head-&lt;name&gt; --url https://github.com/github/ruby.git --branch 2.2</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">JRuby</span><br>jruby-1.6[.8]<br>jruby-1.7[.27]<br>jruby-9.1[.17.0]<br>jruby[-9.2.14.0]<br>jruby-head<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Rubinius</span><br>rbx-1[.4.3]<br>rbx-2.3[.0]<br>rbx-2.4[.1]<br>rbx-2[.5.8]<br>rbx-3[.107]<br>rbx-4[.20]<br>rbx-5[.0]<br>rbx-head<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">TruffleRuby</span><br>truffleruby[-20.3.0]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Opal</span><br>opal<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Minimalistic ruby implementation - ISO 30170:2012</span><br>mruby-1.0.0<br>mruby-1.1.0<br>mruby-1.2.0<br>mruby-1.3.0<br>mruby-1[.4.1]<br>mruby-2.0.1<br>mruby-2[.1.1]<br>mruby[-head]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Ruby Enterprise Edition</span><br>ree-1.8.6<br>ree[-1.8.7][-2012.02]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Topaz</span><br>topaz<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">MagLev</span><br>maglev-1.0.0<br>maglev-1.1[RC1]<br>maglev[-1.2Alpha4]<br>maglev-head<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Mac OS X Snow Leopard Or Newer</span><br>macruby-0.10<br>macruby-0.11<br>macruby[-0.12]<br>macruby-nightly<br>macruby-head<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">IronRuby</span><br>ironruby[-1.1.3]<br>ironruby-head<br><br></code></pre></td></tr></table></figure><ul><li>安装一个 Ruby 版本</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">rvm install 2.7.2 --disable-binary<br></code></pre></td></tr></table></figure><p>这里安装了2.7.2, <code>rvm list known</code> 列表里面的都可以拿来安装。</p><ul><li>切换已安装 Ruby 版本（–default设置默认版本）</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">rvm use 版本号 --default<br></code></pre></td></tr></table></figure><ul><li>列出已安装多ruby</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">rvm list<br></code></pre></td></tr></table></figure><ul><li>卸载已安装多ruby</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">rvm remove 版本号<br></code></pre></td></tr></table></figure><p>参考<br><a href="https://ruby-china.org/wiki/rvm-guide">https://ruby-china.org/wiki/rvm-guide</a></p>]]></content>
      
      
      <categories>
          
          <category> ruby </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ruby </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年11月01日 安装jekyll</title>
      <link href="/2021/11/01/2021/202111/2021-11-01-%E5%AE%89%E8%A3%85jekyll/"/>
      <url>/2021/11/01/2021/202111/2021-11-01-%E5%AE%89%E8%A3%85jekyll/</url>
      
        <content type="html"><![CDATA[<h3 id="安装jekyll"><a href="#安装jekyll" class="headerlink" title="安装jekyll"></a>安装jekyll</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装jekyll bundler</span><br>gem install jekyll bundler<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> jekyll </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jekyll </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年10月24日 对象的创建内存分配机制</title>
      <link href="/2021/10/25/2021/202110/2021-10-25-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E6%9C%BA%E5%88%B6/"/>
      <url>/2021/10/25/2021/202110/2021-10-25-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="对象的创建内存分配机制"><a href="#对象的创建内存分配机制" class="headerlink" title="对象的创建内存分配机制"></a>对象的创建内存分配机制</h3><h4 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h4><p><img src="https://i.loli.net/2021/10/25/3DJoLnzBj2Zs7Kb.png"></p><blockquote><p>对象的创建包含 类加载检查 &gt; 加载类 &gt; 分配内存 &gt; 初始化 &gt; 设置对象头 &gt; 执行<init>方法</p></blockquote><ul><li><p>类加载检查:当JVM虚拟机遇到new指令时,首先将去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，那必须先执行相应的类加载过程。<br>new指令对应到语言层面上讲是，new关键词、对象克隆、对象序列化等。</p></li><li><p><a href="https://blog.aiwiown.com/2021/10/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/">加载类</a></p></li><li><p>分配内存<br>分配内存的方法: 指针碰撞, 空闲列表</p><ol><li>指针碰撞: 要求内存必须是规整的(这与垃圾收集器有关, 一般带有压缩功能的垃圾回收器都采用 指针碰撞方式);</li><li>空闲列表: 指维护一个列表记录那些内存是可以使用的,分配是从未使用的内存中划分一块内存给的对象;<br>并发分配问题解决方案<ul><li>CAS(compare and swap)+失败重试:虚拟机采用CAS配上失败重试的方式保证更新操作的原子性来对分配内存空间的动作进行同步处理。</li><li>本地线程分配缓冲(Thread Local Allocation Buffer, TLAB):把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在Java堆中预先分配一小块内存(默认Eden的1%)。通过-XX:+&#x2F;-UseTLAB参数来设定虚拟机是否使用TLAB(JDK8会默认开启-XX:+UseTLAB)，-XX:TLABSize 指定TLAB大小。</li></ul></li></ol></li><li><p>设置对象头(对象包含:对象头,实例数据,数据填充确保对象的大小是8字节的整数倍)</p></li><li><p>执行<init>方法<br>执行<init>方法，即对象按照程序员的意愿进行初始化。对应到语言层面上讲，就是为属性赋值（注意，这与上面的赋零值不同，这是由程序员赋的值），和执行构造方法。</p></li></ul><p>———————————我是可爱的页面分割线————————————-</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ol><li><a href="https://blog.csdn.net/yuxxz/article/details/51357129">Java类加载器介绍</a></li><li><a href="https://www.cnblogs.com/ctxsdhy/p/12679370.html">类加载器介绍</a></li><li><a href="https://blog.csdn.net/m0_38075425/article/details/81627349">jvm之java类加载机制和类加载器(ClassLoader)的详解</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 对象创建 </tag>
            
            <tag> 内存分配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年10月24日 堆内存设置(网络)</title>
      <link href="/2021/10/24/2021/202109/2021-09-24-%E5%A0%86%E5%86%85%E5%AD%98%E8%AE%BE%E7%BD%AE(%E7%BD%91%E7%BB%9C)/"/>
      <url>/2021/10/24/2021/202109/2021-09-24-%E5%A0%86%E5%86%85%E5%AD%98%E8%AE%BE%E7%BD%AE(%E7%BD%91%E7%BB%9C)/</url>
      
        <content type="html"><![CDATA[<h3 id="堆内存设置"><a href="#堆内存设置" class="headerlink" title="堆内存设置"></a>堆内存设置</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>JVM堆内存分为2块：Permanent Space 和 Heap Space。</p><ul><li>Permanent 即 持久代（Permanent Generation），主要存放的是Java类定义信息，与垃圾收集器要收集的Java对象关系不大。</li><li>Heap &#x3D; { Old + NEW &#x3D; {Eden, from, to} }，Old 即 年老代（Old Generation），New 即 年轻代（Young Generation）。年老代和年轻代的划分对垃圾收集影响比较大。</li></ul><h4 id="年轻代"><a href="#年轻代" class="headerlink" title="年轻代"></a>年轻代</h4><p>所有新生成的对象首先都是放在年轻代。年轻代的目标就是尽可能快速的收集掉那些生命周期短的对象。年轻代一般分3个区，1个Eden区，2个Survivor区（from 和 to）。</p><p>大部分对象在Eden区中生成。当Eden区满时，还存活的对象将被复制到Survivor区（两个中的一个），当一个Survivor区满时，此区的存活对象将被复制到另外一个Survivor区，当另一个Survivor区也满了的时候，从前一个Survivor区复制过来的并且此时还存活的对象，将可能被复制到年老代。</p><p>2个Survivor区是对称的，没有先后关系，所以同一个Survivor区中可能同时存在从Eden区复制过来对象，和从另一个Survivor区复制过来的对象；而复制到年老区的只有从另一个Survivor区过来的对象。而且，<code>因为需要交换的原因，Survivor区至少有一个是空的。</code>特殊的情况下，根据程序需要，Survivor区是可以配置为多个的（多于2个），这样可以增加对象在年轻代中的存在时间，减少被放到年老代的可能。</p><p>针对年轻代的垃圾回收即 Young GC。</p><h4 id="年老代"><a href="#年老代" class="headerlink" title="年老代"></a>年老代</h4><p>在年轻代中经历了N次（可配置）垃圾回收后仍然存活的对象，就会被复制到年老代中。因此，可以认为年老代中存放的都是一些生命周期较长的对象。</p><p>针对年老代的垃圾回收即 Full GC。</p><h4 id="持久代"><a href="#持久代" class="headerlink" title="持久代"></a>持久代</h4><p>用于存放静态类型数据，如 Java Class, Method 等。持久代对垃圾回收没有显著影响。但是有些应用可能动态生成或调用一些Class，例如 Hibernate CGLib 等，在这种时候往往需要设置一个比较大的持久代空间来存放这些运行过程中动态增加的类型。</p><p>所以，当一组对象生成时，<code>内存申请</code>过程如下：</p><p>JVM会试图为相关Java对象在年轻代的Eden区中初始化一块内存区域。<br>当Eden区空间足够时，内存申请结束。否则执行下一步。<br>JVM试图释放在Eden区中所有不活跃的对象（Young GC）。释放后若Eden空间仍然不足以放入新对象，JVM则试图将部分Eden区中活跃对象放入Survivor区。<br>Survivor区被用来作为Eden区及年老代的中间交换区域。当年老代空间足够时，Survivor区中存活了一定次数的对象会被移到年老代。<br>当年老代空间不够时，JVM会在年老代进行完全的垃圾回收（Full GC）。<br>Full GC后，若Survivor区及年老代仍然无法存放从Eden区复制过来的对象，则会导致JVM无法在Eden区为新生成的对象申请内存，即出现“Out of Memory”。</p><h4 id="OOM（“Out-of-Memory”）异常一般主要有如下2种原因："><a href="#OOM（“Out-of-Memory”）异常一般主要有如下2种原因：" class="headerlink" title="OOM（“Out of Memory”）异常一般主要有如下2种原因："></a>OOM（“Out of Memory”）异常一般主要有如下2种原因：</h4><ol><li><p>年老代溢出，表现为：<strong>java.lang.OutOfMemoryError:Javaheapspace</strong><br> 这是最常见的情况，产生的原因可能是：设置的内存参数Xmx过小或程序的内存泄露及使用不当问题。<br> 例如循环上万次的字符串处理、创建上千万个对象、在一段代码内申请上百M甚至上G的内存。还有的时候虽然不会报内存溢出，却会使系统不间断的垃圾回收，也无法处理其它请求。这种情况下除了检查程序、打印堆内存等方法排查，还可以借助一些内存分析工具，比如MAT就很不错。</p></li><li><p>持久代溢出，表现为：<strong>java.lang.OutOfMemoryError:PermGenspace</strong><br> 通常由于持久代设置过小，动态加载了大量Java类而导致溢出，解决办法唯有将参数 -XX:MaxPermSize 调大（一般256m能满足绝大多数应用程序需求）。将部分Java类放到容器共享区（例如Tomcat share lib）去加载的办法也是一个思路，但前提是容器里部署了多个应用，且这些应用有大量的共享类库。</p></li></ol><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><table><thead><tr><th>配置参数</th><th>描述</th></tr></thead><tbody><tr><td><strong>-Xmx3550m</strong></td><td>设置JVM最大堆内存为3550M。</td></tr><tr><td><strong>-Xms3550m</strong></td><td>设置JVM初始堆内存为3550M。此值可以设置与-Xmx相同，以避免每次垃圾回收完成后JVM重新分配内存。</td></tr><tr><td><strong>-Xss128k</strong></td><td>设置每个线程的栈大小。JDK5.0以后每个线程栈大小为1M，之前每个线程栈大小为256K。应当根据应用的线程所需内存大小进行调整。在相同物理内存下，减小这个值能生成更多的线程。但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在3000~5000左右。需要注意的是：当这个值被设置的较大（例如&gt;2MB）时将会在很大程度上降低系统的性能。</td></tr><tr><td><strong>-Xmn2g</strong></td><td>设置年轻代大小为2G。在整个堆内存大小确定的情况下，增大年轻代将会减小年老代，反之亦然。此值关系到JVM垃圾回收，对系统性能影响较大，官方推荐配置为整个堆大小的3&#x2F;8</td></tr><tr><td><strong>-XX:NewSize&#x3D;1024m</strong></td><td>设置年轻代初始值为1024M。</td></tr><tr><td><strong>-XX:NewSize&#x3D;1024m</strong></td><td>设置年轻代初始值为1024M。</td></tr><tr><td><strong>-XX:MaxNewSize&#x3D;1024m</strong></td><td>设置年轻代最大值为1024M。。</td></tr><tr><td><strong>-XX:PermSize&#x3D;256m</strong></td><td>设置持久代初始值为256M。。</td></tr><tr><td><strong>-XX:MaxPermSize&#x3D;256m</strong></td><td>设置持久代最大值为256M。。</td></tr><tr><td><strong>-XX:NewRatio&#x3D;4</strong></td><td>设置年轻代（包括1个Eden和2个Survivor区）与年老代的比值。表示年轻代比年老代为1:4。。</td></tr><tr><td><strong>-XX:SurvivorRatio&#x3D;4</strong></td><td>设置年轻代中Eden区与Survivor区的比值。表示2个Survivor区（JVM堆内存年轻代中默认有2个大小相等的Survivor区）与1个Eden区的比值为2:4，即1个Survivor区占整个年轻代大小的1&#x2F;6。。</td></tr><tr><td><strong>-XX:MaxTenuringThreshold&#x3D;7</strong></td><td>表示一个对象如果在Survivor区（救助空间）移动了7次还没有被垃圾回收就进入年老代。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代，对于需要大量常驻内存的应用，这样做可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象在年轻代存活时间，增加对象在年轻代被垃圾回收的概率，减少Full GC的频率，这样做可以在某种程度上提高服务稳定性。。</td></tr></tbody></table><h4 id="疑问解答"><a href="#疑问解答" class="headerlink" title="疑问解答"></a>疑问解答</h4><blockquote><p>-Xmn，-XX:NewSize&#x2F;-XX:MaxNewSize，-XX:NewRatio 3组参数都可以影响年轻代的大小，混合使用的情况下，优先级是什么？</p></blockquote><p>如下：</p><ol><li>高优先级：-XX:NewSize&#x2F;-XX:MaxNewSize </li><li>中优先级：-Xmn（默认等效  -Xmn&#x3D;-XX:NewSize&#x3D;-XX:MaxNewSize&#x3D;?） </li><li>低优先级：-XX:NewRatio</li></ol><p>推荐使用-Xmn参数，原因是这个参数简洁，相当于一次设定 NewSize&#x2F;MaxNewSIze，而且两者相等，适用于生产环境。-Xmn 配合 -Xms&#x2F;-Xmx，即可将堆内存布局完成。<br>-Xmn参数是在JDK 1.4 开始支持。</p><h3 id="垃圾回收器选择"><a href="#垃圾回收器选择" class="headerlink" title="垃圾回收器选择"></a>垃圾回收器选择</h3><p>JVM给出了3种选择：串行收集器、并行收集器、并发收集器。串行收集器只适用于小数据量的情况，所以生产环境的选择主要是并行收集器和并发收集器。</p><p>默认情况下JDK5.0以前都是使用串行收集器，如果想使用其他收集器需要在启动时加入相应参数。JDK5.0以后，JVM会根据当前系统配置进行智能判断。</p><h4 id="串行收集器"><a href="#串行收集器" class="headerlink" title="串行收集器"></a>串行收集器</h4><table><thead><tr><th>配置参数</th><th>描述</th></tr></thead><tbody><tr><td><strong>-XX:+UseSerialGC</strong></td><td>设置串行收集器。</td></tr></tbody></table><h4 id="并行收集器（吞吐量优先）"><a href="#并行收集器（吞吐量优先）" class="headerlink" title="并行收集器（吞吐量优先）"></a>并行收集器（吞吐量优先）</h4><table><thead><tr><th>配置参数</th><th>描述</th></tr></thead><tbody><tr><td><strong>-XX:+UseParallelGC</strong></td><td>设置为并行收集器。此配置仅对年轻代有效。即年轻代使用并行收集，而年老代仍使用串行收集。</td></tr><tr><td><strong>-XX:ParallelGCThreads&#x3D;20</strong></td><td>配置并行收集器的线程数，即：同时有多少个线程一起进行垃圾回收。此值建议配置与CPU数目相等。</td></tr><tr><td><strong>-XX:+UseParallelOldGC</strong></td><td>配置年老代垃圾收集方式为并行收集。JDK6.0开始支持对年老代并行收集。</td></tr><tr><td><strong>-XX:MaxGCPauseMillis&#x3D;100</strong></td><td>设置每次年轻代垃圾回收的最长时间（单位毫秒）。如果无法满足此时间，JVM会自动调整年轻代大小，以满足此时间。</td></tr><tr><td><strong>-XX:+UseAdaptiveSizePolicy</strong></td><td>设置此选项后，并行收集器会自动调整年轻代Eden区大小和Survivor区大小的比例，以达成目标系统规定的最低响应时间或者收集频率等指标。此参数建议在使用并行收集器时，一直打开。</td></tr></tbody></table><h4 id="并发收集器（响应时间优先）"><a href="#并发收集器（响应时间优先）" class="headerlink" title="并发收集器（响应时间优先）"></a>并发收集器（响应时间优先）</h4><table><thead><tr><th>配置参数</th><th>描述</th></tr></thead><tbody><tr><td><strong>-XX:+UseConcMarkSweepGC</strong></td><td>即CMS收集，设置年老代为并发收集。CMS收集是JDK1.4后期版本开始引入的新GC算法。它的主要适合场景是对响应时间的重要性需求大于对吞吐量的需求，能够承受垃圾回收线程和应用线程共享CPU资源，并且应用中存在比较多的长生命周期对象。CMS收集的目标是尽量减少应用的暂停时间，减少Full GC发生的几率，利用和应用程序线程并发的垃圾回收线程来标记清除年老代内存。</td></tr><tr><td><strong>-XX:+UseParNewGC</strong></td><td>设置年轻代为并发收集。可与CMS收集同时使用。JDK5.0以上，JVM会根据系统配置自行设置，所以无需再设置此参数。</td></tr><tr><td><strong>-XX:CMSFullGCsBeforeCompaction&#x3D;0</strong></td><td>由于并发收集器不对内存空间进行压缩和整理，所以运行一段时间并行收集以后会产生内存碎片，内存使用效率降低。此参数设置运行0次Full GC后对内存空间进行压缩和整理，即每次Full GC后立刻开始压缩和整理内存。</td></tr><tr><td><strong>-XX:+UseCMSCompactAtFullCollection</strong></td><td>打开内存空间的压缩和整理，在Full GC后执行。可能会影响性能，但可以消除内存碎片。</td></tr><tr><td><strong>-XX:+CMSIncrementalMode</strong></td><td>设置为增量收集模式。一般适用于单CPU情况。</td></tr><tr><td><strong>-XX:CMSInitiatingOccupancyFraction&#x3D;70</strong></td><td>表示年老代内存空间使用到70%时就开始执行CMS收集，以确保年老代有足够的空间接纳来自年轻代的对象，避免Full GC的发生。</td></tr></tbody></table><h4 id="其它垃圾回收参数"><a href="#其它垃圾回收参数" class="headerlink" title="其它垃圾回收参数"></a>其它垃圾回收参数</h4><table><thead><tr><th>配置参数</th><th>描述</th></tr></thead><tbody><tr><td><strong>-XX:+ScavengeBeforeFullGC</strong></td><td>年轻代GC优于Full GC执行。</td></tr><tr><td><strong>-XX:-DisableExplicitGC</strong></td><td>不响应 System.gc() 代码。</td></tr><tr><td><strong>-XX:+UseThreadPriorities</strong></td><td>启用本地线程优先级API。即使 java.lang.Thread.setPriority() 生效，不启用则无效。</td></tr><tr><td><strong>-XX:SoftRefLRUPolicyMSPerMB&#x3D;0</strong></td><td>软引用对象在最后一次被访问后能存活0毫秒（JVM默认为1000毫秒）。</td></tr><tr><td><strong>-XX:TargetSurvivorRatio&#x3D;90</strong></td><td>允许90%的Survivor区被占用（JVM默认为50%）。提高对于Survivor区的使用率。</td></tr></tbody></table><p>辅助信息参数设置</p><table><thead><tr><th>配置参数</th><th>描述</th></tr></thead><tbody><tr><td><strong>-XX:-CITime</strong></td><td>打印消耗在JIT编译的时间。</td></tr><tr><td><strong>-XX:ErrorFile&#x3D;.&#x2F;hs_err_pid.log</strong></td><td>保存错误日志或数据到指定文件中。</td></tr><tr><td><strong>-XX:HeapDumpPath&#x3D;.&#x2F;java_pid.hprof</strong></td><td>指定Dump堆内存时的路径。</td></tr><tr><td><strong>-XX:-HeapDumpOnOutOfMemoryError</strong></td><td>当首次遭遇内存溢出时Dump出此时的堆内存。</td></tr><tr><td><strong>-XX:OnError&#x3D;”;”</strong></td><td>出现致命ERROR后运行自定义命令。</td></tr><tr><td><strong>-XX:OnOutOfMemoryError&#x3D;”;”</strong></td><td>当首次遭遇内存溢出时执行自定义命令。</td></tr><tr><td><strong>-XX:-PrintClassHistogram</strong></td><td>按下 Ctrl+Break 后打印堆内存中类实例的柱状信息，同JDK的 jmap -histo 命令。</td></tr><tr><td><strong>-XX:-PrintConcurrentLocks</strong></td><td>按下 Ctrl+Break 后打印线程栈中并发锁的相关信息，同JDK的 jstack -l 命令。</td></tr><tr><td><strong>-XX:-PrintCompilation</strong></td><td>当一个方法被编译时打印相关信息。</td></tr><tr><td><strong>-XX:-PrintGC</strong></td><td>每次GC时打印相关信息。</td></tr><tr><td><strong>-XX:-PrintGCDetails</strong></td><td>每次GC时打印详细信息。</td></tr><tr><td><strong>-XX:-PrintGCTimeStamps</strong></td><td>打印每次GC的时间戳。</td></tr><tr><td><strong>-XX:-TraceClassLoading</strong></td><td>跟踪类的加载信息。</td></tr><tr><td><strong>-XX:-TraceClassLoadingPreorder</strong></td><td>跟踪被引用到的所有类的加载信息。</td></tr><tr><td><strong>-XX:-TraceClassResolution</strong></td><td>跟踪常量池。</td></tr><tr><td><strong>-XX:-TraceClassUnloading</strong></td><td>跟踪类的卸载信息。</td></tr></tbody></table><p>关于参数名称等</p><ul><li>标准参数(-),所有JVM都必须支持这些参数的功能,而且向后兼容；例如<ol><li><code>-client</code>:设置JVM使用Client模式,特点是启动速度比较快,但运行时性能和内存管理效率不高，通常用于客户端应用程序或开发调试；在32位环境下直接运行Java程序默认启用该模式.</li><li><code>-server</code>:设置JVM使Server模式,特点是启动速度比较慢,但运行时性能和内存管理效率很高,适用于生产环境.在具有64位能力的JDK环境下默认启用该模式.</li></ol></li><li>非标准参数(-X),默认JVM实现这些参数的功能,但是并不保证所有JVM实现都满足,且不保证向后兼容;</li><li>非稳定参数(-XX),此类参数各个JVM实现会有所不同,将来可能会不被支持,需要慎重使用;</li></ul><h4 id="JVM服务参数调优实战"><a href="#JVM服务参数调优实战" class="headerlink" title="JVM服务参数调优实战"></a>JVM服务参数调优实战</h4><p>大型网站服务器案例<br>承受海量访问的动态Web应用</p><blockquote><p>服务器配置：8 CPU, 8G MEM, JDK 1.6.X</p></blockquote><p>参数方案：</p><blockquote><p>-server -Xmx3550m -Xms3550m -Xmn1256m -Xss128k -XX:SurvivorRatio&#x3D;6 -XX:MaxPermSize&#x3D;256m -XX:ParallelGCThreads&#x3D;8 -XX:MaxTenuringThreshold&#x3D;0 -XX:+UseConcMarkSweepGC</p></blockquote><p>调优说明：</p><ul><li>-Xmx 与 -Xms 相同以避免JVM反复重新申请内存。-Xmx 的大小约等于系统内存大小的一半，即充分利用系统资源，又给予系统安全运行的空间。</li><li>-Xmn1256m 设置年轻代大小为1256MB。此值对系统性能影响较大，Sun官方推荐配置年轻代大小为整个堆的3&#x2F;8。</li><li>-Xss128k 设置较小的线程栈以支持创建更多的线程，支持海量访问，并提升系统性能。</li><li>-XX:SurvivorRatio&#x3D;6 设置年轻代中Eden区与Survivor区的比值。系统默认是8，根据经验设置为6，则2个Survivor区与1个Eden区的比值为2:6，一个Survivor区占整个年轻代的1&#x2F;8。</li><li>-XX:ParallelGCThreads&#x3D;8 配置并行收集器的线程数，即同时8个线程一起进行垃圾回收。此值一般配置为与CPU数目相等。</li><li>-XX:MaxTenuringThreshold&#x3D;0 设置垃圾最大年龄（在年轻代的存活次数）。如果设置为0的话，则年轻代对象不经过Survivor区直接进入年老代。对于年老代比较多的应用，可以提高效率；如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概率。根据被海量访问的动态Web应用之特点，其内存要么被缓存起来以减少直接访问DB，要么被快速回收以支持高并发海量请求，因此其内存对象在年轻代存活多次意义不大，可以直接进入年老代，根据实际应用效果，在这里设置此值为0。</li><li>-XX:+UseConcMarkSweepGC 设置年老代为并发收集。CMS（ConcMarkSweepGC）收集的目标是尽量减少应用的暂停时间，减少Full GC发生的几率，利用和应用程序线程并发的垃圾回收线程来标记清除年老代内存，适用于应用中存在比较多的长生命周期对象的情况。</li></ul><h4 id="内部集成构建服务器案例"><a href="#内部集成构建服务器案例" class="headerlink" title="内部集成构建服务器案例"></a>内部集成构建服务器案例</h4><p>高性能数据处理的工具应用</p><blockquote><p>服务器配置：1 CPU, 4G MEM, JDK 1.6.X</p></blockquote><p>参数方案：</p><blockquote><p>-server -XX:PermSize&#x3D;196m -XX:MaxPermSize&#x3D;196m -Xmn320m -Xms768m -Xmx1024m</p></blockquote><p>调优说明：</p><ul><li>-XX:PermSize&#x3D;196m -XX:MaxPermSize&#x3D;196m 根据集成构建的特点，大规模的系统编译可能需要加载大量的Java类到内存中，所以预先分配好大量的持久代内存是高效和必要的。</li><li>-Xmn320m 遵循年轻代大小为整个堆的3&#x2F;8原则。</li><li>-Xms768m -Xmx1024m 根据系统大致能够承受的堆内存大小设置即可。<br>在64位服务器上运行应用程序，构建执行时，用 jmap -heap 11540 命令观察JVM堆内存状况如下：<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><br><span class="hljs-attr">Attaching</span> <span class="hljs-string">to process ID 11540, please wait...</span><br><span class="hljs-attr">Debugger</span> <span class="hljs-string">attached successfully.</span><br><span class="hljs-attr">Server</span> <span class="hljs-string">compiler detected.</span><br><span class="hljs-attr">JVM</span> <span class="hljs-string">version is 20.12-b01</span><br><br><br><span class="hljs-attr">using</span> <span class="hljs-string">thread-local object allocation.</span><br><span class="hljs-attr">Parallel</span> <span class="hljs-string">GC with 4 thread(s)</span><br><br><br><span class="hljs-attr">Heap</span> <span class="hljs-string">Configuration:</span><br><span class="hljs-attr">MinHeapFreeRatio</span> = <span class="hljs-string">40</span><br><span class="hljs-attr">MaxHeapFreeRatio</span> = <span class="hljs-string">70</span><br><span class="hljs-attr">MaxHeapSize</span>      = <span class="hljs-string">1073741824 (1024.0MB)</span><br><span class="hljs-attr">NewSize</span>          = <span class="hljs-string">335544320 (320.0MB)</span><br><span class="hljs-attr">MaxNewSize</span>       = <span class="hljs-string">335544320 (320.0MB)</span><br><span class="hljs-attr">OldSize</span>          = <span class="hljs-string">5439488 (5.1875MB)</span><br><span class="hljs-attr">NewRatio</span>         = <span class="hljs-string">2</span><br><span class="hljs-attr">SurvivorRatio</span>    = <span class="hljs-string">8</span><br><span class="hljs-attr">PermSize</span>         = <span class="hljs-string">205520896 (196.0MB)</span><br><span class="hljs-attr">MaxPermSize</span>      = <span class="hljs-string">205520896 (196.0MB)</span><br><br><br><span class="hljs-attr">Heap</span> <span class="hljs-string">Usage:</span><br><span class="hljs-attr">PS</span> <span class="hljs-string">Young Generation</span><br><span class="hljs-attr">Eden</span> <span class="hljs-string">Space:</span><br><span class="hljs-attr">capacity</span> = <span class="hljs-string">255852544 (244.0MB)</span><br><span class="hljs-attr">used</span>     = <span class="hljs-string">101395504 (96.69828796386719MB)</span><br><span class="hljs-attr">free</span>     = <span class="hljs-string">154457040 (147.3017120361328MB)</span><br><span class="hljs-attr">39.63044588683081%</span> <span class="hljs-string">used</span><br><span class="hljs-attr">From</span> <span class="hljs-string">Space:</span><br><span class="hljs-attr">capacity</span> = <span class="hljs-string">34144256 (32.5625MB)</span><br><span class="hljs-attr">used</span>     = <span class="hljs-string">33993968 (32.41917419433594MB)</span><br><span class="hljs-attr">free</span>     = <span class="hljs-string">150288 (0.1433258056640625MB)</span><br><span class="hljs-attr">99.55984397492803%</span> <span class="hljs-string">used</span><br><span class="hljs-attr">To</span> <span class="hljs-string">Space:</span><br><span class="hljs-attr">capacity</span> = <span class="hljs-string">39845888 (38.0MB)</span><br><span class="hljs-attr">used</span>     = <span class="hljs-string">0 (0.0MB)</span><br><span class="hljs-attr">free</span>     = <span class="hljs-string">39845888 (38.0MB)</span><br><span class="hljs-attr">0.0%</span> <span class="hljs-string">used</span><br><span class="hljs-attr">PS</span> <span class="hljs-string">Old Generation</span><br><span class="hljs-attr">capacity</span> = <span class="hljs-string">469762048 (448.0MB)</span><br><span class="hljs-attr">used</span>     = <span class="hljs-string">44347696 (42.29325866699219MB)</span><br><span class="hljs-attr">free</span>     = <span class="hljs-string">425414352 (405.7067413330078MB)</span><br><span class="hljs-attr">9.440459523882184%</span> <span class="hljs-string">used</span><br><span class="hljs-attr">PS</span> <span class="hljs-string">Perm Generation</span><br><span class="hljs-attr">capacity</span> = <span class="hljs-string">205520896 (196.0MB)</span><br><span class="hljs-attr">used</span>     = <span class="hljs-string">85169496 (81.22396087646484MB)</span><br><span class="hljs-attr">free</span>     = <span class="hljs-string">120351400 (114.77603912353516MB)</span><br><span class="hljs-attr">41.440796365543285%</span> <span class="hljs-string">used</span><br></code></pre></td></tr></table></figure></li></ul><p>结果是比较健康的。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 堆内存设置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年10月24日 JVM内存模型</title>
      <link href="/2021/10/24/2021/202110/2021-10-24-JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
      <url>/2021/10/24/2021/202110/2021-10-24-JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="JVM内存模型"><a href="#JVM内存模型" class="headerlink" title="JVM内存模型"></a>JVM内存模型</h2><h3 id="JRE-JDK"><a href="#JRE-JDK" class="headerlink" title="JRE&#x2F;JDK"></a>JRE&#x2F;JDK</h3><ul><li>JRE(Java Runtime Environment)：JRE顾名思义是java运行时环境，包含了java虚拟机，java基础类库</li><li>JDK(Java Development Kit)：JDK顾名思义是java开发工具包，是程序员使用java语言编写java程序所需的开发工具包，是提供给程序员使用的。JDK包含了JRE，同时还包含了编译java源码的编译器javac，还包含了很多java程序调试和分析的工具：jconsole，jvisualvm等工具软件，还包含了java程序编写所需的文档和demo例子程序。</li></ul><p><img src="https://i.loli.net/2021/10/24/MmichDpAOPxRrQF.png"></p><h3 id="JVM内存模型-1"><a href="#JVM内存模型-1" class="headerlink" title="JVM内存模型"></a>JVM内存模型</h3><p>主要包含:<a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.5">运行时数据区Run-Time Data Areas</a>, <a href="https://blog.aiwiown.com/2021/10/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/">类装载子系统</a>, 字节码执行引擎</p><h3 id="运行时数据区组成"><a href="#运行时数据区组成" class="headerlink" title="运行时数据区组成"></a><a href="https://blog.aiwiown.com/2021/09/jvm%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BB%84%E6%88%90/">运行时数据区组成</a></h3><blockquote><p>主要包含: 堆,虚拟机栈(Java Virtual Machine Stacks)[<em>线程私有</em>],本地方法区[<em>线程私有</em>],方法区,程序计数器[<em>线程私有</em>]</p></blockquote><h4 id="JVM内存参数设置"><a href="#JVM内存参数设置" class="headerlink" title="JVM内存参数设置"></a><a href="https://blog.aiwiown.com/2021/09/JVM%E5%8F%82%E6%95%B0/">JVM内存参数设置</a></h4><p><img src="https://i.loli.net/2021/10/24/bcS7pl8k5QxhFwP.png"></p><h5 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h5><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-Xms</code></td><td>设置JVM启动时堆内存的初始化大小,默认物理内存的1&#x2F;64</td></tr><tr><td><code>-Xmx</code></td><td>设置堆内存最大值,默认物理内存的1&#x2F;4</td></tr></tbody></table><h5 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h5><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-Xmn</code></td><td>设置年轻代的空间大小，剩下的为老年代的空间大小</td></tr></tbody></table><h5 id="新生代-老年代"><a href="#新生代-老年代" class="headerlink" title="新生代&#x2F;老年代"></a>新生代&#x2F;老年代</h5><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-XX:NewRatio</code></td><td>默认2表示新生代占年老代的1&#x2F;2，占整个堆内存的1&#x2F;3。</td></tr><tr><td><code>-XX:SurvivorRatio</code></td><td>默认8表示一个survivor区占用1&#x2F;8的Eden内存，即1&#x2F;10的新生代内存。</td></tr></tbody></table><h6 id="XX-SurvivorRatio"><a href="#XX-SurvivorRatio" class="headerlink" title="-XX:SurvivorRatio"></a>-XX:SurvivorRatio</h6><blockquote><p>设置新生代中eden和S0&#x2F;S1空间的比例</p></blockquote><ul><li>默认 -XX:SurvivorRatio&#x3D;8,Eden:S0:S1&#x3D;8:1:1</li><li>假如 -XX:SurvivorRatio&#x3D;4,Eden:S0:S1&#x3D;4:1:1</li></ul><h6 id="XX-SurvivorRatio值就是设置Eden区的比例占多少-S0-S1相同"><a href="#XX-SurvivorRatio值就是设置Eden区的比例占多少-S0-S1相同" class="headerlink" title="-XX:SurvivorRatio值就是设置Eden区的比例占多少,S0&#x2F;S1相同"></a><code>-XX:SurvivorRatio</code>值就是设置Eden区的比例占多少,S0&#x2F;S1相同</h6><h5 id="方法区-元空间"><a href="#方法区-元空间" class="headerlink" title="方法区(元空间)"></a>方法区(元空间)</h5><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-XX:MaxMetaspaceSize</code></td><td>设置元空间最大值， 默认是-1， 即不限制， 或者说只受限于本地内存大小。</td></tr><tr><td><code>-XX：MetaspaceSize</code></td><td>指定元空间触发Fullgc的初始阈值(元空间无固定初始大小)， 以字节为单位，<strong>默认是21M</strong>，达到该值就会触发full gc进行类型卸载， 同时收集器会对该值进行调整： 如果释放了大量的空间， 就适当降低该值； 如果释放了很少的空间， 那么在不超过<code>-XX:MaxMetaspaceSize</code>（如果设置了的话） 的情况下， 适当提高该值。这个跟早期jdk版本的-XX:PermSize参数意思不一样，<code>-XX:PermSize</code>代表永久代的初始容量。</td></tr></tbody></table><blockquote><p>一般建议在JVM参数中将MetaspaceSize和MaxMetaspaceSize设置成一样的值,调整元空间的大小需要Full GC,会照成Stop The World; eg: <code>‐XX:MetaspaceSize=128M ‐XX:MaxMetaspaceSize=128M</code></p></blockquote><h5 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h5><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>-Xss</code></td><td>设置线程栈(栈针)空间大小, 默认1M, eg:-Xss512k, -Xss1M, <strong>-Xss设置越小说明一个线程分配的栈内存就越少,但可以开启更多的线程数</strong></td></tr></tbody></table><p>———————————我是可爱的页面分割线————————————-</p><h5 id="生成JVM汇编代码"><a href="#生成JVM汇编代码" class="headerlink" title="生成JVM汇编代码"></a>生成JVM汇编代码</h5><ul><li>javap -v xxx.class 输出附加信息(含常量词信息)</li><li>javap -c xxx.class 对代码进行反汇编</li></ul><h5 id="Idea配置External-Tool"><a href="#Idea配置External-Tool" class="headerlink" title="Idea配置External Tool"></a>Idea配置External Tool</h5><p><img src="https://i.loli.net/2021/10/24/OKZAy3tLW4H9TPa.png"></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ol><li><a href="https://www.zhihu.com/question/20317448">JRE 和 JDK 的区别</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> JVM内存模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年10月24日 类加载器(ClassLoader)</title>
      <link href="/2021/10/24/2021/202110/2021-10-24-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
      <url>/2021/10/24/2021/202110/2021-10-24-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="类加载器-ClassLoader"><a href="#类加载器-ClassLoader" class="headerlink" title="类加载器(ClassLoader)"></a>类加载器(ClassLoader)</h3><h4 id="什么是类加载器"><a href="#什么是类加载器" class="headerlink" title="什么是类加载器"></a>什么是类加载器</h4><h4 id="类加载过程"><a href="#类加载过程" class="headerlink" title="类加载过程"></a>类加载过程</h4><p><img src="https://i.loli.net/2021/10/24/CQEKGg72eW1lsYr.png"></p><h5 id="Launcher-loadClass的类加载过程有如下几步：-加载-验证-准备-解析-初始化-使用-卸载"><a href="#Launcher-loadClass的类加载过程有如下几步：-加载-验证-准备-解析-初始化-使用-卸载" class="headerlink" title="Launcher.loadClass的类加载过程有如下几步： 加载 &gt;&gt; 验证 &gt;&gt; 准备 &gt;&gt; 解析 &gt;&gt; 初始化 &gt;&gt; 使用 &gt;&gt; 卸载"></a>Launcher.loadClass的类加载过程有如下几步： 加载 &gt;&gt; 验证 &gt;&gt; 准备 &gt;&gt; 解析 &gt;&gt; 初始化 &gt;&gt; 使用 &gt;&gt; 卸载</h5><ul><li>加载：在硬盘&#x2F;网络&#x2F;JAR等存储上查找并读入字节码文件到内存(类需要使用时才会加载),在加载阶段会在内存中生成一个代表这个类的java.lang.Class对象,作为方法区这个类的各种数据的访问入口;</li><li>链接：当类被加载之后，系统为之生成一个对应的Class对象，接着将会进入链接阶段，链接阶段负责把类的二进制数据合并到JRE中。类连接又可分为如下3个阶段:<br>1: 验证：校验字节码文件的正确性,主要包括四种验证，文件格式验证，元数据验证，字节码验证，符号引用验证;<br>2: 准备：给类的静态变量分配内存，并赋予默认值(对象的默认值是null, int:0, boolean:false)<br>3: 解析：将类的二进制数据中的<strong>符号引用</strong>替换成直接引用,该阶段会把一些静态方法(符号引用，比如main()方法)替换为指向数据所存内存的指针或句柄等(直接引用)，这是所谓的静态链接过程(类加载期间完成)，动态链接是在程序运行期间完成的将符号引用替换为直接引用;<blockquote><p>符号引用：符号引用是以一组符号来描述所引用的目标，符号可以是任何的字面形式的字面量，只要不会出现冲突能够定位到就行。布局和内存无关。</p></blockquote><blockquote><p>直接引用：是指向目标的指针，偏移量或者能够直接定位的句柄。该引用是和内存中的布局有关的，并且一定加载进来的。</p></blockquote></li><li>初始化: 对类的静态变量初始化为指定的值，执行静态代码块;</li></ul><h5 id="类加载后主要包含"><a href="#类加载后主要包含" class="headerlink" title="类加载后主要包含"></a>类加载后主要包含</h5><blockquote><p>类加载到方法区后主要包含<strong>运行时常量池</strong>、<strong>类型信息</strong>、<strong>字段信息</strong>、<strong>方法信息</strong>、<strong>类加载器的引用</strong>、<strong>对应class实例的引用</strong>等信息</p><p><strong>类加载器的引用</strong>：这个类到类加载器实例的引用</p><p><strong>对应class实例的引用</strong>：类加载器在加载类信息放到方法区中后，会创建一个对应的Class 类型的对象实例放到堆(Heap)中, 作为开发人员访问方法区中类定义的入口和切入点。</p></blockquote><h4 id="类加载时机"><a href="#类加载时机" class="headerlink" title="类加载时机"></a>类加载时机</h4><ul><li>通过new关键字创建 <code>eg: App app = new App()</code>;</li><li>访问某个类或接口的静态变量，或者对该静态变量赋值 <code>eg: App.name = &quot;test&quot;;&quot;</code>;</li><li>调用类的静态方法;</li><li>反射（Class.forName(“com.mysql.jdbc.Driver”)）;</li><li>初始化一个类的子类（会首先初始化子类的父类）;</li><li>JVM启动时标明的启动类，即文件名和类名相同的那个类;</li></ul><blockquote><p><strong>注意</strong>: 对于一个final类型的静态变量，如果该变量的值在编译时就可以确定下来，那么这个变量相当于“宏变量”。Java编译器会在编译时直接把这个变量出现的地方替换成它的值，因此即使程序使用该静态变量，也不会导致该类的初始化。反之，如果final类型的静态Field的值不能在编译时确定下来，则必须等到运行时才可以确定该变量的值，如果通过该类来访问它的静态变量，则会导致该类被初始化。</p></blockquote><h5 id="类不是一次性全部加载的，是使用到时才加载"><a href="#类不是一次性全部加载的，是使用到时才加载" class="headerlink" title="类不是一次性全部加载的，是使用到时才加载"></a><em>类不是一次性全部加载的，是使用到时才加载</em></h5><p>示例:</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoaderClassTest</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">LoaderA</span> <span class="hljs-variable">loaderA</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoaderA</span>();<br>        <span class="hljs-type">LoaderB</span> <span class="hljs-variable">loaderB</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        System.out.println(<span class="hljs-string">&quot;main方法运行完成&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoaderA</span> &#123;<br>        <span class="hljs-keyword">static</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;LoaderA被加载&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">LoaderA</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;调用LoaderA构造方法&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoaderB</span> &#123;<br>        <span class="hljs-keyword">static</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;LoaderB被加载&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">LoaderB</span><span class="hljs-params">()</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;调用LoaderB构造方法&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 运行结果</span><br><span class="hljs-comment">//LoaderA被加载</span><br><span class="hljs-comment">//调用LoaderA构造方法</span><br><span class="hljs-comment">//main方法运行完成</span><br></code></pre></td></tr></table></figure><h4 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h4><h5 id="Java里有如下几种类加载器"><a href="#Java里有如下几种类加载器" class="headerlink" title="Java里有如下几种类加载器"></a>Java里有如下几种类加载器</h5><ul><li>引导类加载器(根类加载器 C++实现)：并不继承自 java.lang.ClassLoader, 负责加载支撑JVM运行的位于JRE的lib目录下的核心类库，比如rt.jar、charsets.jar等;<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">URL[] urls = sun.misc.Launcher.getBootstrapClassPath().getURLs();<br><span class="hljs-keyword">for</span>(URL url : urls) &#123;<br>    System.out.println(url.toExternalForm());<br>&#125;<br></code></pre></td></tr></table></figure></li><li>扩展类加载器(ExtClassLoader)：负责加载支撑JVM运行的位于JRE的lib目录下的ext扩展目录中的JAR类包;</li><li>应用程序类加载器(AppClassLoader)：负责加载ClassPath路径下的类包，主要就是加载你自己写的那些类;</li><li>自定义加载器：负责加载用户自定义路径下的类包;</li></ul><h4 id="类的加载机制和双亲委派机制"><a href="#类的加载机制和双亲委派机制" class="headerlink" title="类的加载机制和双亲委派机制"></a>类的加载机制和双亲委派机制</h4><h5 id="JVM的类加载机制"><a href="#JVM的类加载机制" class="headerlink" title="JVM的类加载机制"></a>JVM的类加载机制</h5><ul><li>全盘负责：所谓全盘负责，就是当一个类加载器负责加载某个Class时，该Class所依赖和引用其他Class也将由该类加载器负责载入，除非显示使用另外一个类加载器来载入。</li><li>双亲委派：所谓的双亲委派，则是先让父类加载器试图加载该Class，只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类。通俗的讲，就是某个特定的类加载器在接到加载类的请求时，首先将加载任务委托给父加载器，依次递归，如果父加载器可以完成类加载任务，就成功返回；只有父加载器无法完成此加载任务时，才自己去加载。</li><li>缓存机制。缓存机制将会保证所有加载过的Class都会被缓存，当程序中需要使用某个Class时，类加载器先从缓存区中搜寻该Class，只有当缓存区中不存在该Class对象时，系统才会读取该类对应的二进制数据，并将其转换成Class对象，存入缓冲区中。这就是为很么修改了Class后，必须重新启动JVM，程序所做的修改才会生效的原因。</li></ul><h5 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h5><p><img src="https://i.loli.net/2021/10/24/Yh2PRAMxvSw8tEp.png"></p><p>双亲委派机制，其工作原理的是，如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给当前类加载器的父加载器(getParent())去加载，如果父加载器还存在其父加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器，如果父加载器可以完成类加载任务，就成功返回，倘若父加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式.</p><h6 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h6><ul><li>确保核心类库不被恶意篡改;</li><li>避免类的重复加载;</li></ul><h4 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h4><h5 id="ClassLoader-中与加载类相关的方法"><a href="#ClassLoader-中与加载类相关的方法" class="headerlink" title="ClassLoader 中与加载类相关的方法"></a>ClassLoader 中与加载类相关的方法</h5><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>getParent()</td><td>返回该类加载器的父加载器。</td></tr><tr><td>loadClass(String name)</td><td>加载名称为name的类(实现了<strong>双亲委派机制</strong>)，返回的结果是java.lang.Class类的实例。</td></tr><tr><td>findClass(String name)</td><td>查找名称为name的类，返回的结果是java.lang.Class类的实例。</td></tr><tr><td>findLoadedClass(String name)</td><td>查找名称为name的已经被加载过的类，返回的结果是java.lang.Class类的实例。</td></tr><tr><td>defineClass(String name, byte[] b, int off, int len)</td><td>把字节数组 b中的内容转换成Java类，返回的结果是java.lang.Class类的实例。这个方法被声明为final的。</td></tr><tr><td>resolveClass(Class&lt;?&gt; c)</td><td>链接指定的 Java 类。</td></tr></tbody></table><p>继承ClassLoader类 重写findClass方法</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AiwiownAppClassLoader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ClassLoader</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String classPath;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AiwiownAppClassLoader</span><span class="hljs-params">(String classPath)</span> &#123;<br>        <span class="hljs-built_in">this</span>.classPath = classPath;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 读取文件</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> name 文件名称</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] loadByte(String name) <span class="hljs-keyword">throws</span> Exception &#123;<br>        name = name.replaceAll(<span class="hljs-string">&quot;\\.&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>);<br>        <span class="hljs-keyword">try</span> (<span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(classPath + <span class="hljs-string">&quot;/&quot;</span> + name + <span class="hljs-string">&quot;.class&quot;</span>)) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> fis.available();<br>            <span class="hljs-type">byte</span>[] data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[len];<br>            fis.read(data);<br>            <span class="hljs-keyword">return</span> data;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">byte</span>[] bytes = loadByte(name);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == bytes || bytes.length == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassNotFoundException</span>(name);<br>            &#125;<br>            <span class="hljs-keyword">return</span> defineClass(name, bytes, <span class="hljs-number">0</span>, bytes.length);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.findClass(name);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException &#123;<br>        <span class="hljs-type">AiwiownAppClassLoader</span> <span class="hljs-variable">aiwiownAppClassLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AiwiownAppClassLoader</span>(<span class="hljs-string">&quot;D://data//aiwiown&quot;</span>);<br>        Class&lt;?&gt; aClass = aiwiownAppClassLoader.loadClass(<span class="hljs-string">&quot;com.aiwiown.classloader.LoaderClassTest&quot;</span>);<br>        System.out.println(aClass.getClassLoader());<br>    &#125;<br>&#125;<br><span class="hljs-comment">//输出</span><br><span class="hljs-comment">//com.aiwiown.classloader.AiwiownAppClassLoader@2626b418</span><br></code></pre></td></tr></table></figure><h5 id="打破双亲委派机制重写loadClass方法"><a href="#打破双亲委派机制重写loadClass方法" class="headerlink" title="打破双亲委派机制重写loadClass方法"></a>打破双亲委派机制重写loadClass方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AiwiownAppClassLoader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ClassLoader</span> &#123;<br><br>  <span class="hljs-keyword">private</span> String classPath;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">AiwiownAppClassLoader</span><span class="hljs-params">(String classPath)</span> &#123;<br>    <span class="hljs-built_in">this</span>.classPath = classPath;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 读取文件</span><br><span class="hljs-comment">   *</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> name 文件名称</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] loadByte(String name) <span class="hljs-keyword">throws</span> Exception &#123;<br>    name = name.replaceAll(<span class="hljs-string">&quot;\\.&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>);<br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(classPath + <span class="hljs-string">&quot;/&quot;</span> + name + <span class="hljs-string">&quot;.class&quot;</span>)) &#123;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> fis.available();<br>      <span class="hljs-type">byte</span>[] data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[len];<br>      fis.read(data);<br>      <span class="hljs-keyword">return</span> data;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">byte</span>[] bytes = loadByte(name);<br>      <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == bytes || bytes.length == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassNotFoundException</span>(name);<br>      &#125;<br>      <span class="hljs-keyword">return</span> defineClass(name, bytes, <span class="hljs-number">0</span>, bytes.length);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.findClass(name);<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="hljs-type">boolean</span> resolve) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>    <span class="hljs-keyword">synchronized</span> (getClassLoadingLock(name)) &#123;<br>      Class&lt;?&gt; c = findLoadedClass(name);<br>      <span class="hljs-keyword">if</span> (c == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> System.nanoTime();<br>        <span class="hljs-comment">//com.aiwiown包使用自定义的类加载器加载,其他的使用父加载器加载</span><br>        <span class="hljs-keyword">if</span> (name.startsWith(<span class="hljs-string">&quot;com.aiwiown&quot;</span>)) &#123;<br>          c = findClass(name);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          c = <span class="hljs-built_in">super</span>.loadClass(name, resolve);<br>        &#125;<br>        sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);<br>        sun.misc.PerfCounter.getFindClasses().increment();<br>      &#125;<br>      <span class="hljs-keyword">if</span> (resolve) &#123;<br>        resolveClass(c);<br>      &#125;<br>      <span class="hljs-keyword">return</span> c;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException &#123;<br>    <span class="hljs-type">AiwiownAppClassLoader</span> <span class="hljs-variable">aiwiownAppClassLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AiwiownAppClassLoader</span>(<span class="hljs-string">&quot;D://data//aiwiown&quot;</span>);<br>    Class&lt;?&gt; aClass = aiwiownAppClassLoader.loadClass(<span class="hljs-string">&quot;com.aiwiown.classloader.LoaderClassTest&quot;</span>);<br>    aClass.newInstance();<br>    System.out.println(<span class="hljs-string">&quot;加载D盘文件:&quot;</span> + aClass.getClassLoader());<br>    <span class="hljs-type">LoaderClassTest</span> <span class="hljs-variable">loaderClassTest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoaderClassTest</span>();<br>    System.out.println(<span class="hljs-string">&quot;加载项目文件:&quot;</span> + loaderClassTest.getClass().getClassLoader());<br>  &#125;<br>&#125;<br><span class="hljs-comment">//运行结果</span><br><span class="hljs-comment">//LoaderClassTest被加载了.....</span><br><span class="hljs-comment">//加载D盘文件:com.aiwiown.classloader.AiwiownAppClassLoader@2626b418</span><br><span class="hljs-comment">//LoaderClassTest被加载了.....</span><br><span class="hljs-comment">//加载项目文件:sun.misc.Launcher$AppClassLoader@18b4aac2</span><br></code></pre></td></tr></table></figure><p>———————————我是可爱的页面分割线————————————-</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ol><li><a href="https://blog.csdn.net/yuxxz/article/details/51357129">Java类加载器介绍</a></li><li><a href="https://www.cnblogs.com/ctxsdhy/p/12679370.html">类加载器介绍</a></li><li><a href="https://blog.csdn.net/m0_38075425/article/details/81627349">jvm之java类加载机制和类加载器(ClassLoader)的详解</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 类加载器 </tag>
            
            <tag> ClassLoader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年10月13日 垃圾收集器</title>
      <link href="/2021/10/13/2021/202110/2021-10-13-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/"/>
      <url>/2021/10/13/2021/202110/2021-10-13-%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h3><p><img src="https://i.loli.net/2021/10/13/PvnAk85sQYOcGJD.png" alt="垃圾收集器"></p><h4 id="G1垃圾收集器参数"><a href="#G1垃圾收集器参数" class="headerlink" title="G1垃圾收集器参数"></a>G1垃圾收集器参数</h4><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-XX:+UseG1GC</td><td>使用G1收集器</td></tr><tr><td>-XX:ParallelGCThreads</td><td>指定GC工作的线程数量</td></tr><tr><td>-XX:G1HeapRegionSize</td><td>指定分区大小（1MB〜32MB,且必须是2的N次鬲），默认将整堆划分为2048个region</td></tr><tr><td>-XX:MaxGCPauseMillis</td><td>目标暂停时间（默认200ms）</td></tr><tr><td>-XX:G1NewSizePercent</td><td>新生代内存初始空间（默认整堆5%,值配置整数，默认就是百分比）</td></tr><tr><td>-XX:G1MaxNewSizePercent</td><td>新生代内存最大空间</td></tr><tr><td>-XX:TargetSurvivorRatio</td><td>Survivor区的填充容量（默认50%）, Survivor区域里的一批对象（年龄1+年龄2+年龄n的多个年 龄对象）总和超过了Survivor区域的50%,此时就会把年龄n（含）以上的对象都放入老年代</td></tr><tr><td>-XX:MaxTenuringThreshold</td><td>最大年龄阈值（默认 15）</td></tr><tr><td>-XX:InitiatingHeapOccupancyPercent</td><td>老年代占用空间达到整堆内存阈值（默认45%）,则执行新生代和老年代的混合收集（MixedGC）,比如我们之前说的堆默认有2048个region,如果有接近1000个region都是老年代的</td></tr><tr><td>-XX:G1MixedGCLiveThresholdPercent</td><td>(默认85%) region中的存活对象低于这个值时才会回收该region,如果超过这个值，存活对象过多，回收的的意义不大。</td></tr></tbody></table><h4 id="JVM通用参数配置"><a href="#JVM通用参数配置" class="headerlink" title="JVM通用参数配置"></a>JVM通用参数配置</h4>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> 垃圾收集器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年09月24日 JVM参数</title>
      <link href="/2021/09/24/2021/202109/2021-09-24-JVM%E5%8F%82%E6%95%B0/"/>
      <url>/2021/09/24/2021/202109/2021-09-24-JVM%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="JVM-堆参数配置"><a href="#JVM-堆参数配置" class="headerlink" title="JVM 堆参数配置"></a>JVM 堆参数配置</h3><h4 id="JVM通用参数配置"><a href="#JVM通用参数配置" class="headerlink" title="JVM通用参数配置"></a>JVM通用参数配置</h4><table><thead><tr><th>参数</th><th>参数描述</th></tr></thead><tbody><tr><td><code>-server</code></td><td>如果不配置该参数,JVM 会根据应用服务器硬件配置自动选择不同模式,server 模式启动比较慢,但是运行期速度得到了优化,适合于服务器端运行的 JVM.</td></tr><tr><td><code>-client</code></td><td>启动比较快,但是运行期响应没有 server 模式的优化,适合于个人 PC 的服务开发和测试.</td></tr><tr><td><code>-Xms</code></td><td>设置JVM启动时堆内存的初始化大小</td></tr><tr><td><code>-Xmx</code></td><td>设置堆内存最大值</td></tr><tr><td><code>-Xmn</code></td><td>设置年轻代的空间大小，剩下的为老年代的空间大小</td></tr><tr><td><code>-XX:MetaspaceSize</code></td><td><strong>设置元空间大小(默认大小)</strong></td></tr><tr><td><code>-XX:MaxMetaspaceSize</code></td><td><strong>设置元最大空间大小</strong></td></tr><tr><td><code>-XX:PermGen</code></td><td><del>设置永久代内存的初始化大小(JDK1.8开始废弃了永久代)</del></td></tr><tr><td><code>-XX:MaxPcrmGcn</code></td><td><del>设置永久代的最大值</del></td></tr><tr><td><code>-XX:NewRatio</code></td><td>设置年老代和年轻代的比例大小, 默认值是2. 默认即堆内存分成3份 年轻代1份 老年代2份</td></tr><tr><td><code>-XX:SurvivorRatio</code></td><td>设置Eden区和Survivor区的空间比例：Eden&#x2F;Survivor 0 &#x3D; Eden&#x2F;Survivor 1 默认为8, 年轻带分10份 Eden区默认分8分,-XX:SurvivorRatio&#x3D;4 eden:sur0:sur1&#x3D;4:1:1</td></tr><tr><td><code>-XX:+/-UseAdaptiveSizePolicy</code></td><td>开启&#x2F;关闭Eden&#x2F;Survivor区使用自适应大小策略,JDK8 默认开启,开启会导致 <code>-XX:SurvivorRatio</code> 设置的比例和实际的不一致</td></tr><tr><td><code>-XX:+/-UseTLAB</code></td><td>开启&#x2F;关闭使用本地线程分配缓冲(Thread Local Allocation Buffer)分配空间 jdk默认开启</td></tr><tr><td><code>-XX:+/-UseCompressedOops</code></td><td>开启&#x2F;关闭压缩指针(jdk1.6后默认开启)</td></tr><tr><td><code>‐XX:+/‐UseCompressedClassPointers</code></td><td>开启&#x2F;关闭头信息的类型指针Klass Pointer</td></tr><tr><td><code>-XX:+/-DoEscapeAnalysis</code></td><td>开启&#x2F;关闭逃逸分析(JDK7默认开启)</td></tr><tr><td><code>-XX:+/-EliminateAllocations</code></td><td>开启&#x2F;关闭标量替换(JDK7默认开启)</td></tr><tr><td><code>-XX:PretenureSizeThresholds</code></td><td>设置JVM大对象的大小<strong>单位是字节</strong>,参数只有在Serial 和ParNew垃圾收集器下有效  -XX:+UseSerialGC, -XX:+UseParNewGC</td></tr><tr><td><code>-XX:MaxTenuringThreshold</code></td><td>设置最大对象年龄,超过这个年龄的对象直接进入老年代</td></tr><tr><td><code>-XX:TargetSurvivorRatio</code></td><td>设置对象的存活率, 即对象,(对象动态年龄判断机制一般是在minor gc之后触发的)</td></tr><tr><td><code>-XX:+/-PrintGC</code></td><td>开启&#x2F;关闭GC日志</td></tr><tr><td><code>-XX:+/-PrintGCDetails</code></td><td>开启&#x2F;关闭GC详情日志</td></tr></tbody></table><h5 id="对象动态年龄判断-XX-MaxTenuringThreshold"><a href="#对象动态年龄判断-XX-MaxTenuringThreshold" class="headerlink" title="对象动态年龄判断 -XX:MaxTenuringThreshold"></a>对象动态年龄判断 -XX:MaxTenuringThreshold</h5><blockquote><p>当前放对象的Survivor区域里(其中一块区域，放对象的那块s区)，一批对象的总大小大于这块Survivor区域内存大小的50%(-XX:TargetSurvivorRatio可以指定)，那么此时大于等于这批对象年龄最大值的对象，就可以直接进入老年代了，例如Survivor区域里现在有一批对象，年龄1+年龄2+年龄n的多个年龄对象总和超过了Survivor区域的50%，此时就会把年龄n(含)以上的对象都放入老年代。这个规则其实是希望那些可能是长期存活的对象，尽早进入老年代。对象动态年龄判断机制一般是在minor gc之后触发的。</p></blockquote><h5 id="老年代空间分配担保机制-XX-HandlePromotionFailure"><a href="#老年代空间分配担保机制-XX-HandlePromotionFailure" class="headerlink" title="老年代空间分配担保机制 -XX:-HandlePromotionFailure"></a>老年代空间分配担保机制 -XX:-HandlePromotionFailure</h5><blockquote><p><strong>年轻代每次minor gc之前JVM都会计算下老年代剩余可用空间</strong><br><strong>如果这个可用空间小于年轻代里现有的所有对象大小之和(包括垃圾对象)</strong><br>就会看一个-XX:-HandlePromotionFailure(jdk1.8默认就设置了)的参数是否设置了,如果有这个参数，就会看看老年代的可用内存大小，是否大于之前每一次minor gc后进入老年代的对象的平均大小。如果上一步结果是小于或者之前说的参数没有设置，那么就会触发一次Full gc，对老年代和年轻代一起回收一次垃圾，如果回收完还是没有足够空间存放新的对象就会发生”OOM”<br>当然，如果minor gc之后剩余存活的需要挪动到老年代的对象大小还是大于老年代可用空间，那么也会触发full gc，full gc完之后如果还是没有空间放minor gc之后的存活对象，则也会发生”OOM”</p></blockquote><h4 id="回收器参数"><a href="#回收器参数" class="headerlink" title="回收器参数"></a>回收器参数</h4><table><thead><tr><th>参数</th><th>参数描述</th></tr></thead><tbody><tr><td><code>-XX:+UseSerialGC</code></td><td><strong>串行垃圾回收期</strong> 年轻代 和 老年代都使用串行, 使用复制算法回收,逻辑筒单高效,无线程切换开销</td></tr><tr><td><code>-XX:+UseParallelGC</code></td><td><strong>并行垃圾回收器</strong> 年轻代：使用Parallel scavenge回收算法, 多个线程并行回收。通过 <code>-XX:ParallelGCThreads=n</code> 参数指定有线程数,默认是CPU核数,老年代使用单线程回收</td></tr><tr><td><code>-XX:+UseParallelOldGC</code></td><td><strong>并行垃圾回收器</strong> 和<code>-XX:+UseParallelGC</code>一样, 年轻代和老年代都使用多线程</td></tr><tr><td><code>-XX:+UseConcMarkSweepGC</code></td><td><strong>并发垃圾收集器</strong> 短暂停顿的并发垃圾收集器. 年轻代:可以使用普通的或者parallel垃圾回收算法,由参数 <code>-XX+UseParNewGC</code>来控制, 老年代:只能使用并发标记扫描(Concurrent Mark Sweep)</td></tr><tr><td><code>-XX:+UseG1GC</code></td><td><strong>并行垃圾收集器</strong> 并行的,并发的和增量式压缩短暂停顿垃圾收集器, 不区分年轻代和老年代,它把堆空间划分为多个大小相等的区域. 当进行垃圾收集时它会优先收集存活对象较少的区域. 因此叫’Garbage First’</td></tr><tr><td><code>-XX:+UseZGC</code></td><td>可扩展的低延迟垃圾收集器 GC 暂停时间不会随着堆或实时集大小而增加. <a href="https://archive.fosdem.org/2018/schedule/event/zgc/attachments/slides/2211/export/events/attachments/zgc/slides/2211/ZGC_FOSDEM_2018.pdf">ZGC介绍</a></td></tr></tbody></table><h4 id="项目中常用配置"><a href="#项目中常用配置" class="headerlink" title="项目中常用配置"></a>项目中常用配置</h4><table><thead><tr><th>参数</th><th>参数描述</th></tr></thead><tbody><tr><td><code>-Xms2048m</code></td><td>初始化堆空间大小2048M</td></tr><tr><td><code>-Xmx2048m</code></td><td>最大堆空间大小2048M</td></tr><tr><td><code>-Xnm682m</code></td><td>最大堆空间大小682M</td></tr><tr><td><code>-Xss512k</code></td><td>设置线程栈空间大小</td></tr><tr><td><code>-XX:PermSize=256m</code></td><td>永久区空间大小(jdk 1.8开始废弃了永久代)</td></tr><tr><td><code>-XX:MaxPermSize=256m</code></td><td>最大永久区空间大小</td></tr><tr><td><code>-XX:+UseStringCache</code></td><td>默认开启，启用缓存常用的字符串</td></tr><tr><td><code>-XX:+UseConcMarkSweepGC</code></td><td>老年代使用CMS收集器</td></tr><tr><td><code>-XX:+UseParNewGC</code></td><td>新生代使用并行收集器</td></tr><tr><td><code>-XX:ParallelGCThreads=4</code></td><td>设置年轻代并行线程数量4</td></tr><tr><td><code>-XX:+CMSClassUnloadingEnabled</code></td><td>允许对类的元数据进行清理</td></tr><tr><td><code>-XX:+DisableExplicitGC</code></td><td>禁止代码执行GC,即System.gc()</td></tr><tr><td><code>-XX:-UscCMSInitiatingOccupancyOnly</code></td><td>表示只有达到阈值的之后才进行CMS回收</td></tr><tr><td><code>-XX:CMSInitiatingOccupancyFraction=68</code></td><td>设置CMS在老年代回收的阈值为68%</td></tr><tr><td><code>-vcrbose:gc</code></td><td>输出虚拟机GC详情</td></tr><tr><td><code>-XX:+PrintGCDetails</code></td><td>打印GC详情日志</td></tr><tr><td><code>-XX:+PrintGCDatcStamps</code></td><td>打印GC的耗时</td></tr><tr><td><code>-XX:+PrintTenuringDistribution</code></td><td>打印Tenuring年龄信息</td></tr><tr><td><code>-XX:+HcapDumpOnOutOfMcmoryError</code></td><td>当抛出OOM时进行HcapDump</td></tr><tr><td><code>-XX:HeapDumpPath=/home/admin/logs</code></td><td>指定HeapDump的文件路径或目录</td></tr></tbody></table><h4 id="常用垃圾处理器组合配置"><a href="#常用垃圾处理器组合配置" class="headerlink" title="常用垃圾处理器组合配置"></a>常用垃圾处理器组合配置</h4><table><thead><tr><th>年轻代</th><th>老年代</th><th>JVM 配置</th></tr></thead><tbody><tr><td><code>Serial</code></td><td><code>Serial</code></td><td><code>-XX:+UseSerialGC</code></td></tr><tr><td><code>Parallel scavenge</code></td><td><code>Serial</code></td><td><code>-XX:+UserParallelGC -XX:+UserParallelOldGC</code>((JDK8 默认垃圾回收器))</td></tr><tr><td><code>Serial/Parallel scavenge</code></td><td><code>CMS</code></td><td><code>-XX:+UserParNewGC -XX:+UseConcMarkSweepGC</code></td></tr><tr><td><code>G1</code></td><td></td><td><code>-XX:+UserG1GC</code>(JDK11 默认垃圾回收器)</td></tr><tr><td><code>ZGC</code></td><td></td><td><code>-XX:+UnlockExperimentalVMOptions -XX:+UseZGC</code></td></tr></tbody></table><h3 id="GC-调优原则"><a href="#GC-调优原则" class="headerlink" title="GC 调优原则"></a>GC 调优原则</h3><p>在调优之前，我们需要记住下面的原则：</p><blockquote><p>多数的 Java 应用不需要在服务器上进行 GC 优化； 多数导致 GC 问题的 Java 应用，都不是因为我们参数设置错误，而是代码问题； 在应用上线之前，先考虑将机器的 JVM 参数设置到最优（最适合）； 减少创建对象的数量； 减少使用全局变量和大对象； GC 优化是到最后不得已才采用的手段； 在实际使用中，分析 GC 情况优化代码比优化 GC 参数要多得多。</p></blockquote><h3 id="GC-调优目的"><a href="#GC-调优目的" class="headerlink" title="GC 调优目的"></a>GC 调优目的</h3><p>将转移到老年代的对象数量降低到最小； 减少 GC 的执行时间。</p><ol><li><strong>策略 1</strong> 将新对象预留在新生代，由于 Full GC 的成本远高于 Minor GC，因此尽可能将对象分配在新生代是明智的做法，实际项目中根据 GC 日志分析新生代空间大小分配是否合理，适当通过“-Xmn”命令调节新生代大小，最大限度降低新对象直接进入老年代的情况。</li><li><strong>策略 2</strong> 大对象进入老年代，虽然大部分情况下，将对象分配在新生代是合理的。但是对于大对象这种做法却值得商榷，大对象如果首次在新生代分配可能会出现空间不足导致很多年龄不够的小对象被分配的老年代，破坏新生代的对象结构，可能会出现频繁的 full gc。因此，对于大对象，可以设置直接进入老年代（当然短命的大对象对于垃圾回收老说简直就是噩梦）。-XX:PretenureSizeThreshold 可以设置直接进入老年代的对象大小。</li><li><strong>策略 3</strong> 合理设置进入老年代对象的年龄，-XX:MaxTenuringThreshold 设置对象进入老年代的年龄大小，减少老年代的内存占用，降低 full gc 发生的频率。</li><li><strong>策略 4</strong> 设置稳定的堆大小，堆大小设置有两个参数：-Xms 初始化堆大小，-Xmx 最大堆大小。</li><li><strong>策略 5</strong> 注意： 如果满足下面的指标，则一般不需要进行 GC 优化：</li></ol><blockquote><p>MinorGC 执行时间不到50ms； Minor GC 执行不频繁，约10秒一次; Full GC 执行时间不到1s； Full GC 执行频率不算频繁，不低于10分钟1次.</p></blockquote><h3 id="垃圾回收器选择"><a href="#垃圾回收器选择" class="headerlink" title="垃圾回收器选择"></a>垃圾回收器选择</h3><ol><li>优先调整堆大小,让JVM自行选择;</li><li>如果内存小于100M, 使用串行数据收集器;</li><li>如果是单核CPU,并且没有停顿时间的要求,串行或让JVM自行选择;</li><li>如果允许替代时间超过1秒,选择并行或让JVM自行选择;</li><li>如果响应时间最重要,并且不能超过1秒,使用并发收集器;</li><li><strong>4G以下的可以选择parallel, 4-8G可以选择 ParNew+CMS , 8G 以上可以使用G1, 几百G以上用ZGC</strong></li></ol><p>———————————我是可爱的页面分割线————————————-</p><blockquote><p>堆内存3G 老年代 2G 年轻代1G(eden:880M s0:60M s1:60M)</p></blockquote><ul><li>jvm 参数:-Xms3G -Xmx3G -Xss1M -XX:MetaspaceSize&#x3D;512M -XX:MaxMetaspaceSize&#x3D;512M</li></ul><blockquote><p>堆内存3G 老年代 1G 年轻代2G(eden:1.6G s0:200M s1:200M)</p></blockquote><ul><li>jvm 参数:-Xms3G -Xmx3G -Xmn2G -Xss1M -XX:MetaspaceSize&#x3D;512M -XX:MaxMetaspaceSize&#x3D;512M</li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ol><li><a href="https://juejin.cn/post/6844903802378665997">JVM 配置常用参数</a></li><li><a href="https://www.jianshu.com/p/2957b001645d">CMS,G1,ZGC介绍</a></li><li><a href="https://www.jianshu.com/p/b31f17da63ab">ZGC介绍</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> JVM虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年09月13日 JVM虚拟机介绍</title>
      <link href="/2021/09/13/2021/202109/2021-09-13-jvm%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BB%84%E6%88%90/"/>
      <url>/2021/09/13/2021/202109/2021-09-13-jvm%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BB%84%E6%88%90/</url>
      
        <content type="html"><![CDATA[<h3 id="JVM虚拟机介绍"><a href="#JVM虚拟机介绍" class="headerlink" title="JVM虚拟机介绍"></a>JVM虚拟机介绍</h3><p><img src="https://gitee.com/dbin0123/picgo/raw/master/image/20210913223621.png"></p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">App</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">App</span>();<br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> app.add();<br>System.out.println(c);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> a + b;<br><span class="hljs-keyword">return</span> c;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>javap -c App.class</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">com</span>.aiwiown.App &#123;<br>  <span class="hljs-keyword">public</span> com.aiwiown.App();<br>    Code:<br>       <span class="hljs-number">0</span>: aload_0<br>       <span class="hljs-number">1</span>: invokespecial #<span class="hljs-number">1</span>                  <span class="hljs-comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br>       <span class="hljs-number">4</span>: <span class="hljs-keyword">return</span><br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(java.lang.String[])</span>;<br>    Code:<br>       <span class="hljs-number">0</span>: <span class="hljs-keyword">new</span>           #<span class="hljs-number">2</span>                  <span class="hljs-comment">// class com/aiwiown/App</span><br>       <span class="hljs-number">3</span>: dup<br>       <span class="hljs-number">4</span>: invokespecial #<span class="hljs-number">3</span>                  <span class="hljs-comment">// Method &quot;&lt;init&gt;&quot;:()V</span><br>       <span class="hljs-number">7</span>: astore_1<br>       <span class="hljs-number">8</span>: aload_1<br>       <span class="hljs-number">9</span>: invokevirtual #<span class="hljs-number">4</span>                  <span class="hljs-comment">// Method add:()I</span><br>      <span class="hljs-number">12</span>: istore_2<br>      <span class="hljs-number">13</span>: getstatic     #<span class="hljs-number">5</span>                  <span class="hljs-comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span><br>      <span class="hljs-number">16</span>: iload_2<br>      <span class="hljs-number">17</span>: invokevirtual #<span class="hljs-number">6</span>                  <span class="hljs-comment">// Method java/io/PrintStream.println:(I)V</span><br>      <span class="hljs-number">20</span>: <span class="hljs-keyword">return</span><br><br>  <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">()</span>;<br>    Code:<br>       <span class="hljs-number">0</span>: iconst_1<br>       <span class="hljs-number">1</span>: istore_1<br>       <span class="hljs-number">2</span>: iconst_2<br>       <span class="hljs-number">3</span>: istore_2<br>       <span class="hljs-number">4</span>: iload_1<br>       <span class="hljs-number">5</span>: iload_2<br>       <span class="hljs-number">6</span>: iadd<br>       <span class="hljs-number">7</span>: istore_3<br>       <span class="hljs-number">8</span>: iload_3<br>       <span class="hljs-number">9</span>: ireturn<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="栈-线程私有"><a href="#栈-线程私有" class="headerlink" title="栈(线程私有)"></a>栈(线程私有)</h4><blockquote><p>用于描述 <code>java</code> 方法执行的内存模型</p></blockquote><h5 id="栈帧-Stack-Frame"><a href="#栈帧-Stack-Frame" class="headerlink" title="栈帧(Stack Frame)"></a>栈帧(Stack Frame)</h5><blockquote><p><strong>栈帧</strong> (Stack Frame) 是用来存储数据和部分过程结果的数据结构[<code>局部变量表</code>、<code>操作数栈</code>、<code>动态链接</code>、<code>方法出口</code>],<br>同时也被用来处理动态链接 (Dynamic Linking)、 方法返回值和异常分派（ Dispatch Exception）.栈帧随着方法调用而创建,<br>随着方法结束而销毁——无论方法是正常完成还是异常完成（抛出了在方法内未被捕获的异 常）都算作方法结束。</p></blockquote><ol><li><strong>局部变量表</strong>: 用于存储方法内部的局部变量等信息,存储结构<strong>类似数组</strong>;</li><li><strong>操作数栈</strong>: 用户存储方法内部数据的出站入站(和java的栈相似)</li><li><strong>动态链接</strong>: 用于存储链接至方法区的引用信息;</li><li><strong>方法出口</strong>: 方法返回消息</li></ol><h4 id="本地方法栈-线程私有"><a href="#本地方法栈-线程私有" class="headerlink" title="本地方法栈(线程私有)"></a>本地方法栈(线程私有)</h4><blockquote><p>本地方法栈和 Java Stack 作用类似, 区别是虚拟机栈为执行 Java 方法服务, 而本地方法栈则为 Native 方法服务,<br>如果一个 VM 实现使用 C-linkage 模型来支持 Native 调用, 那么该栈将会是一个 C 栈，但 HotSpot VM 直接就 把本地方法栈和虚拟机栈合二为一。</p></blockquote><h4 id="程序计数器-线程私有"><a href="#程序计数器-线程私有" class="headerlink" title="程序计数器(线程私有)"></a>程序计数器(线程私有)</h4><blockquote><p>一块较小的内存空间,是当前线程所执行的字节码的行号指示器,每条线程都要有一个独立的程序计数器,这类内存也称为<code>线程私有</code>的内存.<br>正在执行 <code>java</code> 方法的话,计数器记录的是虚拟机字节码指令的地址（当前指令的地址）.<br>如果还是 <code>Native</code> 方法,则为空.这个内存区域是唯一一个在虚拟机中没有规定任何 <strong>OutOfMemoryError</strong> 情况的区域.</p></blockquote><h4 id="堆-线程共享"><a href="#堆-线程共享" class="headerlink" title="堆(线程共享)"></a>堆(线程共享)</h4><blockquote><p>线程共享的内存区域,创建的对象和数组都保存在 Java 堆内存中,<strong>垃圾收集器进行垃圾收集的最重要的内存区域</strong>,由于现代 <code>VM</code> 采用分代收集算法,因此 <code>Java</code> 堆从 <code>GC</code> 的角度还可以细分为:<br>新生代(Eden区,2个Survivor区[From Survivor 区和 To Survivor 区])和老年代.</p></blockquote><h4 id="方法区-线程共享"><a href="#方法区-线程共享" class="headerlink" title="方法区(线程共享)"></a>方法区(线程共享)</h4><blockquote><p>即永久代(Permanent Generation),用于存储被 JVM 加载的<code>类信息</code>、<code>常量</code>、<code>静态变量</code>,即编译器编译后的代码等数据.HotSpot VM 把 GC 分代收集扩展至方法区,<br>即使用 Java 堆的永久代来实现方法区, 这样 HotSpot 的垃圾收集器就可以像管理 Java 堆一样管理这部分内存, 而不必为方法区开发专门的内存管理器(永久带 的内存回收的主要目标是针对常量池的回收和类型的卸载, 因此收益一般很小).</p></blockquote><h5 id="运行时常量池（Runtime-Constant-Pool）"><a href="#运行时常量池（Runtime-Constant-Pool）" class="headerlink" title="运行时常量池（Runtime Constant Pool）"></a>运行时常量池（Runtime Constant Pool）</h5><blockquote><p>Class 文件中除了有类的版 本、字段、方法、接口等描述等信息外，还有一项信息是常量池(Constant Pool Table）,<br>用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。<br>Java 虚拟机对 Class 文件的每一部分（自然也包括常量池）的格式都有严格的规定，每一个字节用于存储哪种数据都必须符合规范上的要求,这样才会被虚拟机认可、装载和执行.</p></blockquote><p>———————————我是可爱的页面分割线————————————-</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ol><li><a href="https://www.toutiao.com/a6996677985772470815/?log_from=f5b3546593e55_1632486805098">JVM——基本结构</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> JVM虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年09月08日 链表反转</title>
      <link href="/2021/09/08/2021/202109/2021-09-08-%E9%93%BE%E8%A1%A8%E8%BF%AD%E4%BB%A3/"/>
      <url>/2021/09/08/2021/202109/2021-09-08-%E9%93%BE%E8%A1%A8%E8%BF%AD%E4%BB%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="链表反转"><a href="#链表反转" class="headerlink" title="链表反转"></a>链表反转</h3><h4 id="链表反转-1"><a href="#链表反转-1" class="headerlink" title="链表反转"></a>链表反转</h4><p><img src="https://i.loli.net/2021/09/25/VPALweXF4TQqzsY.png"></p><ul><li>初始化链表数据</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;E&gt; &#123;<br>    E item;<br>    LinkedListIteration.Node&lt;E&gt; next;<br><br>    Node(E element, LinkedListIteration.Node&lt;E&gt; next) &#123;<br>        <span class="hljs-built_in">this</span>.item = element;<br>        <span class="hljs-built_in">this</span>.next = next;<br>    &#125;<br>&#125;<br>    <br><span class="hljs-keyword">public</span> Node&lt;Integer&gt; <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>    Node&lt;Integer&gt; eight = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(<span class="hljs-number">8</span>, <span class="hljs-literal">null</span>);<br>    Node&lt;Integer&gt; seven = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(<span class="hljs-number">7</span>, eight);<br>    Node&lt;Integer&gt; six = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(<span class="hljs-number">6</span>, seven);<br>    Node&lt;Integer&gt; five = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(<span class="hljs-number">5</span>, six);<br>    Node&lt;Integer&gt; four = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(<span class="hljs-number">4</span>, five);<br>    Node&lt;Integer&gt; three = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(<span class="hljs-number">3</span>, four);<br>    Node&lt;Integer&gt; two = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(<span class="hljs-number">2</span>, three);<br>    Node&lt;Integer&gt; one = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(<span class="hljs-number">1</span>, two);<br>    <span class="hljs-keyword">return</span> one;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>通过递归反转</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">LinkedListIteration</span> <span class="hljs-variable">linkedListIteration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedListIteration</span>();<br><br>    Node&lt;Integer&gt; eight = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(<span class="hljs-number">8</span>, <span class="hljs-literal">null</span>);<br>    Node&lt;Integer&gt; seven = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(<span class="hljs-number">7</span>, eight);<br>    Node&lt;Integer&gt; six = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(<span class="hljs-number">6</span>, seven);<br>    Node&lt;Integer&gt; five = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(<span class="hljs-number">5</span>, six);<br>    Node&lt;Integer&gt; four = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(<span class="hljs-number">4</span>, five);<br>    Node&lt;Integer&gt; three = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(<span class="hljs-number">3</span>, four);<br>    Node&lt;Integer&gt; two = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(<span class="hljs-number">2</span>, three);<br>    Node&lt;Integer&gt; one = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(<span class="hljs-number">1</span>, two);<br>    linkedListIteration.recursion(one);<br>    System.out.println(eight);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 递归迭代链表</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> node</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">recursion</span><span class="hljs-params">(Node&lt;Integer&gt; node)</span> &#123;<br>    <span class="hljs-keyword">if</span>(Objects.isNull(node.next))&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    recursion(node.next);<br>    node.next.next = node;<br>    node.next = <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>迭代反转</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">LinkedListIteration</span> <span class="hljs-variable">linkedListIteration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedListIteration</span>();<br><br>    Node&lt;Integer&gt; eight = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(<span class="hljs-number">8</span>, <span class="hljs-literal">null</span>);<br>    Node&lt;Integer&gt; seven = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(<span class="hljs-number">7</span>, eight);<br>    Node&lt;Integer&gt; six = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(<span class="hljs-number">6</span>, seven);<br>    Node&lt;Integer&gt; five = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(<span class="hljs-number">5</span>, six);<br>    Node&lt;Integer&gt; four = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(<span class="hljs-number">4</span>, five);<br>    Node&lt;Integer&gt; three = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(<span class="hljs-number">3</span>, four);<br>    Node&lt;Integer&gt; two = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(<span class="hljs-number">2</span>, three);<br>    Node&lt;Integer&gt; one = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;&gt;(<span class="hljs-number">1</span>, two);<br>    Node&lt;Integer&gt; iteration = linkedListIteration.iteration(one);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 迭代反转</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> node</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> Node&lt;Integer&gt; <span class="hljs-title function_">iteration</span><span class="hljs-params">(Node&lt;Integer&gt; node)</span> &#123;<br>    Node&lt;Integer&gt; prev = <span class="hljs-literal">null</span>, curr = node, next = node;<br>    <span class="hljs-keyword">while</span> (Objects.nonNull(curr))&#123;<br>        next = curr.next;<br>        curr.next = prev;<br>        prev = curr;<br>        curr = next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> prev;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 链表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年09月06日 SpringCloud Alibaba Nacos注册中心</title>
      <link href="/2021/09/06/2021/202109/2021-09-06-SpringCloud%20Alibaba%20Nacos%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
      <url>/2021/09/06/2021/202109/2021-09-06-SpringCloud%20Alibaba%20Nacos%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h3 id="SpringCloud-Alibaba-Nacos注册中心使用"><a href="#SpringCloud-Alibaba-Nacos注册中心使用" class="headerlink" title="SpringCloud Alibaba Nacos注册中心使用"></a>SpringCloud Alibaba Nacos注册中心使用</h3><blockquote><p>本样例使用<a href="https://blog.aiwiown.com/2021/09/SpringCloud-Alibaba/">https://blog.aiwiown.com/2021/09/SpringCloud-Alibaba/</a>样例的父POM文件</p></blockquote><h4 id="创建项目名为springcloud-alibaba-nacos-provider-01"><a href="#创建项目名为springcloud-alibaba-nacos-provider-01" class="headerlink" title="创建项目名为springcloud-alibaba-nacos-provider-01"></a>创建项目名为<code>springcloud-alibaba-nacos-provider-01</code></h4><ul><li>POM导入如下依赖</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aiwiown<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springcloud-alibaba-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aiwiown.alibaba.nacos.provider<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springcloud-alibaba-nacos-provider-01<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>springcloud-alibaba-nacos-provider-01<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>服务提供者1<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">spring-boot.version</span>&gt;</span>2.3.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring-boot.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud-alibaba.version</span>&gt;</span>2.2.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud-alibaba.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-cloud-alibaba.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>com.aiwiown.alibaba.nacos.provider.SpringcloudAlibabaNacosProvider01Application<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>repackage<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>repackage<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ul><li>在启动类上开启Nacos服务发现<code>@EnableDiscoveryClient</code></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aiwiown.alibaba.nacos.provider;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringcloudAlibabaNacosProviderApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(SpringcloudAlibabaNacosProviderApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>配置调整<code>application.properties</code></li></ul><figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 应用名称</span><br><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">springcloud-alibaba-nacos-provider-01</span><br><span class="hljs-comment"># Actuator Web 访问端口</span><br><span class="hljs-attr">management.server.port</span>=<span class="hljs-string">8081</span><br><span class="hljs-attr">management.endpoints.jmx.exposure.include</span>=<span class="hljs-string">*</span><br><span class="hljs-attr">management.endpoints.web.exposure.include</span>=<span class="hljs-string">*</span><br><span class="hljs-attr">management.endpoint.health.show-details</span>=<span class="hljs-string">always</span><br><span class="hljs-comment"># 应用服务 WEB 访问端口</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">8080</span><br><span class="hljs-comment"># Nacos帮助文档: https://nacos.io/zh-cn/docs/concepts.html</span><br><span class="hljs-comment"># Nacos认证信息</span><br><span class="hljs-attr">spring.cloud.nacos.discovery.username</span>=<span class="hljs-string">nacos</span><br><span class="hljs-attr">spring.cloud.nacos.discovery.password</span>=<span class="hljs-string">nacos</span><br><span class="hljs-comment"># Nacos 服务发现与注册配置，其中子属性 server-addr 指定 Nacos 服务器主机和端口</span><br><span class="hljs-attr">spring.cloud.nacos.discovery.server-addr</span>=<span class="hljs-string">127.0.0.1:8848</span><br><span class="hljs-comment"># 注册到 nacos 的指定 namespace，默认为 public</span><br><span class="hljs-attr">spring.cloud.nacos.discovery.namespace</span>=<span class="hljs-string">public</span><br></code></pre></td></tr></table></figure><ul><li>编写服务<code>AlibabaNacosProviderController.java</code></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aiwiown.alibaba.nacos.provider.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> : AlibabaNacosProviderController</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> :</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : dbin0123</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2021-09-06 22:05</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/alibabaNacosProvider&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AlibabaNacosProviderController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/provider&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">provider</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;start provider 01&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="创建项目名为springcloud-alibaba-nacos-provider-02"><a href="#创建项目名为springcloud-alibaba-nacos-provider-02" class="headerlink" title="创建项目名为springcloud-alibaba-nacos-provider-02"></a>创建项目名为<code>springcloud-alibaba-nacos-provider-02</code></h4><ul><li>POM导入如下依赖</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aiwiown<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springcloud-alibaba-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aiwiown.alibaba.nacos.provider<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springcloud-alibaba-nacos-provider-02<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>springcloud-alibaba-nacos-provider-02<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>服务提供者2<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">spring-boot.version</span>&gt;</span>2.3.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring-boot.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud-alibaba.version</span>&gt;</span>2.2.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud-alibaba.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-cloud-alibaba.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>com.aiwiown.alibaba.nacos.provider.SpringcloudAlibabaNacosProvider01Application<br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>repackage<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>repackage<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ul><li>在启动类上开启Nacos服务发现<code>@EnableDiscoveryClient</code></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aiwiown.alibaba.nacos.provider;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringcloudAlibabaNacosProviderApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(SpringcloudAlibabaNacosProviderApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>配置调整<code>application.properties</code></li></ul><figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 应用名称</span><br><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">springcloud-alibaba-nacos-provider-01</span><br><span class="hljs-comment"># Actuator Web 访问端口</span><br><span class="hljs-attr">management.server.port</span>=<span class="hljs-string">8083</span><br><span class="hljs-attr">management.endpoints.jmx.exposure.include</span>=<span class="hljs-string">*</span><br><span class="hljs-attr">management.endpoints.web.exposure.include</span>=<span class="hljs-string">*</span><br><span class="hljs-attr">management.endpoint.health.show-details</span>=<span class="hljs-string">always</span><br><span class="hljs-comment"># 应用服务 WEB 访问端口</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">8082</span><br><span class="hljs-comment"># Nacos帮助文档: https://nacos.io/zh-cn/docs/concepts.html</span><br><span class="hljs-comment"># Nacos认证信息</span><br><span class="hljs-attr">spring.cloud.nacos.discovery.username</span>=<span class="hljs-string">nacos</span><br><span class="hljs-attr">spring.cloud.nacos.discovery.password</span>=<span class="hljs-string">nacos</span><br><span class="hljs-comment"># Nacos 服务发现与注册配置，其中子属性 server-addr 指定 Nacos 服务器主机和端口</span><br><span class="hljs-attr">spring.cloud.nacos.discovery.server-addr</span>=<span class="hljs-string">127.0.0.1:8848</span><br><span class="hljs-comment"># 注册到 nacos 的指定 namespace，默认为 public</span><br><span class="hljs-attr">spring.cloud.nacos.discovery.namespace</span>=<span class="hljs-string">public</span><br></code></pre></td></tr></table></figure><ul><li>编写服务<code>AlibabaNacosProviderController.java</code></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aiwiown.alibaba.nacos.provider.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> : AlibabaNacosProviderController</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> :</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : dbin0123</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2021-09-06 22:05</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/alibabaNacosProvider&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AlibabaNacosProviderController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/provider&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">provider</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;start provider 01&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="登录Nacos-服务管理-服务列表-查看服务注册情况"><a href="#登录Nacos-服务管理-服务列表-查看服务注册情况" class="headerlink" title="登录Nacos 服务管理&gt;服务列表 查看服务注册情况"></a>登录Nacos 服务管理&gt;服务列表 查看服务注册情况</h4><p><img src="https://gitee.com/dbin0123/picgo/raw/master/image/20210906223523.png"></p><h4 id="编写服务消费者-springcloud-alibaba-nacos-client"><a href="#编写服务消费者-springcloud-alibaba-nacos-client" class="headerlink" title="编写服务消费者 springcloud-alibaba-nacos-client"></a>编写服务消费者 <code>springcloud-alibaba-nacos-client</code></h4><ul><li>POM文件</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aiwiown.alibaba.nacos.client<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springcloud-alibaba-nacos-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>springcloud-alibaba-nacos-client<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>消费者<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">spring-boot.version</span>&gt;</span>2.3.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring-boot.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud-alibaba.version</span>&gt;</span>2.2.2.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud-alibaba.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- nacos配置中心 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- nacos注册中心(已集成ribbon) --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-cloud-alibaba.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>com.aiwiown.alibaba.nacos.client.SpringcloudAlibabaNacosClientApplication<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>repackage<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>repackage<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>远程调用初始化<code>RestTemplateConfig</code></li></ul><blockquote><p>com.alibaba.cloud:spring-cloud-starter-alibaba-nacos-discovery 已集成ribbon 负载均衡 </p></blockquote><blockquote><p>@LoadBalanced 启动负载均衡 具体参考<code>LoadBalancerAutoConfiguration.java</code></p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aiwiown.alibaba.nacos.client.config;<br><br><span class="hljs-keyword">import</span> org.springframework.cloud.client.loadbalancer.LoadBalanced;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> : RestTemplateConfig</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> :</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : dbin0123</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2021-09-06 22:44</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RestTemplateConfig</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@LoadBanlanced</span> 配置负载平衡(方式一)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@LoadBalanced</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">getRestTemplate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@LoadBanlanced</span> 配置负载平衡(方式二)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Autoward</span><br>    <span class="hljs-keyword">private</span> LoadBanlancerClient loadBalancerClient;<br>    <br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">getRestTemplate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">RestTemplate</span> <span class="hljs-variable">restTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span>  <span class="hljs-title class_">RestTemplate</span>();<br>        restTemplate.setInterceptors(Collections.singletonList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoadBalancerInterceptor</span>(loadBalancerClient)))<br>        <span class="hljs-keyword">return</span> restTemplate<br>    &#125;<br>    <br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>编写调用类</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aiwiown.alibaba.nacos.client.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> : ConsumerController</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> :</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : dbin0123</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2021-09-06 22:48</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/consumer&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsumerController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br>    <span class="hljs-comment">/**读取配置文件*/</span><br>    <span class="hljs-meta">@Value(&quot;$&#123;springcloud.alibaba.nacos.service&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String serverUrl;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/testClient&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testClient</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> restTemplate.getForObject(serverUrl+<span class="hljs-string">&quot;/alibabaNacosProvider/provider&quot;</span>, String.class);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>在启动类上开启Nacos服务发现<code>@EnableDiscoveryClient</code></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aiwiown.alibaba.nacos.client;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><span class="hljs-keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;<br><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringcloudAlibabaNacosClientApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(SpringcloudAlibabaNacosClientApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>配置调整<code>application.properties</code></li></ul><figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 应用名称</span><br><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">springcloud-alibaba-nacos-client</span><br><span class="hljs-comment"># Actuator Web 访问端口</span><br><span class="hljs-attr">management.server.port</span>=<span class="hljs-string">8181</span><br><span class="hljs-attr">management.endpoints.jmx.exposure.include</span>=<span class="hljs-string">*</span><br><span class="hljs-attr">management.endpoints.web.exposure.include</span>=<span class="hljs-string">*</span><br><span class="hljs-attr">management.endpoint.health.show-details</span>=<span class="hljs-string">always</span><br><span class="hljs-comment"># 应用服务 WEB 访问端口</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">8180</span><br><span class="hljs-comment"># Nacos帮助文档: https://nacos.io/zh-cn/docs/concepts.html</span><br><span class="hljs-comment"># Nacos认证信息</span><br><span class="hljs-attr">spring.cloud.nacos.discovery.username</span>=<span class="hljs-string">nacos</span><br><span class="hljs-attr">spring.cloud.nacos.discovery.password</span>=<span class="hljs-string">nacos</span><br><span class="hljs-comment"># Nacos 服务发现与注册配置，其中子属性 server-addr 指定 Nacos 服务器主机和端口</span><br><span class="hljs-attr">spring.cloud.nacos.discovery.server-addr</span>=<span class="hljs-string">127.0.0.1:8848</span><br><span class="hljs-comment"># 注册到 nacos 的指定 namespace，默认为 public</span><br><span class="hljs-attr">spring.cloud.nacos.discovery.namespace</span>=<span class="hljs-string">public</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># Nacos 配置</span><br><span class="hljs-attr">spring.cloud.nacos.config.server-addr</span>=<span class="hljs-string">127.0.0.1:8848</span><br><span class="hljs-comment"># 配置文件类型</span><br><span class="hljs-attr">spring.cloud.nacos.config.file-extension</span>=<span class="hljs-string">properties</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 服务提供者地址:http://$&#123;服务提供者的spring.application.name&#125;</span><br><span class="hljs-attr">springcloud.alibaba.nacos.service</span>=<span class="hljs-string">http://springcloud-alibaba-nacos-provider-01</span><br><br></code></pre></td></tr></table></figure><ul><li>调用服务 <a href="http://192.168.5.98:8180/consumer/testClient"></a></li></ul><p><img src="https://gitee.com/dbin0123/picgo/raw/master/image/20210907221246.png"></p>]]></content>
      
      
      <categories>
          
          <category> alibaba </category>
          
          <category> nacos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloudAlibaba </tag>
            
            <tag> Nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年09月06日 SpringCloud Alibaba Nacos配置中心</title>
      <link href="/2021/09/06/2021/202109/2021-09-06-SpringCloud%20Alibaba%20Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
      <url>/2021/09/06/2021/202109/2021-09-06-SpringCloud%20Alibaba%20Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h3 id="SpringCloud-Alibaba-Nacos配置中心"><a href="#SpringCloud-Alibaba-Nacos配置中心" class="headerlink" title="SpringCloud Alibaba Nacos配置中心"></a>SpringCloud Alibaba Nacos配置中心</h3><ul><li>使用nacos配置中心需要在代码添加</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>使用</li></ul><blockquote><p>NACOS Data Id命名格式 <code>$&#123;prefix&#125;-$&#123;spring.profile.active&#125;.$&#123;file-extension&#125;</code></p></blockquote><p><img src="https://gitee.com/dbin0123/picgo/raw/master/image/20210907223701.png"></p><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>${prefix}</td><td>默认值为 <code>$&#123;spring.application.name&#125;</code> 可以通过 <code>$&#123;spring.application.name&#125;</code>配置</td></tr><tr><td>${spring.profile.active}</td><td>即为当前环境对应的环境,当<code>spring.profile.active</code>为空时,对应格式为 ${prefix}.${file-extension}.</td></tr><tr><td>${file-extension}</td><td>为配置内容的数据格式,可以通过配置项 <code>spring.cloud.nacos.config.file-extension</code> 来配置。目前只支持 <code>properties</code> 和 <code>yaml</code> 类型.</td></tr></tbody></table><blockquote><p>NOCOS 命名空间</p></blockquote><p><img src="https://gitee.com/dbin0123/picgo/raw/master/image/20210907224324.png"></p><p>使用不通的命名空间需配置 <code>spring.cloud.nacos.config.namespace</code></p><ol><li>bootstrap.properties配置</li></ol><figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># Nacos帮助文档: https://nacos.io/zh-cn/docs/concepts.html</span><br><span class="hljs-comment"># Nacos认证信息</span><br><span class="hljs-attr">spring.cloud.nacos.config.username</span>=<span class="hljs-string">nacos</span><br><span class="hljs-attr">spring.cloud.nacos.config.password</span>=<span class="hljs-string">nacos</span><br><span class="hljs-comment"># 设置配置中心服务端地址</span><br><span class="hljs-attr">spring.cloud.nacos.config.server-addr</span>=<span class="hljs-string">127.0.0.1:8848</span><br><span class="hljs-comment"># Nacos 配置中心的namespace。需要注意，如果使用 public 的 namcespace ，请不要填写这个值，直接留空即可</span><br><span class="hljs-attr">spring.cloud.nacos.config.namespace</span>=<span class="hljs-string">5846d741-aa3e-426a-ac02-55dc5dc1a13b</span><br><br><span class="hljs-attr">spring.cloud.nacos.config.group</span>=<span class="hljs-string">DEV_GROUP</span><br><span class="hljs-comment"># 配置文件类型</span><br><span class="hljs-attr">spring.cloud.nacos.config.file-extension</span>=<span class="hljs-string">properties</span><br></code></pre></td></tr></table></figure><ul><li>Nacos配置</li></ul><p><img src="https://gitee.com/dbin0123/picgo/raw/master/image/20210907233145.png"></p><ul><li>ConsumerController调整</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.aiwiown.alibaba.nacos.client.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.cloud.context.config.annotation.RefreshScope;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> : ConsumerController</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> :</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : dbin0123</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2021-09-06 22:48</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/consumer&quot;)</span><br><span class="hljs-meta">@RefreshScope</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsumerController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;springcloud.alibaba.nacos.service&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String serverUrl;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;springcloud.read.nacos.config&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String springcloudReadNacosConfig;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/testClient&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testClient</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> restTemplate.getForObject(serverUrl + <span class="hljs-string">&quot;/alibabaNacosProvider/provider&quot;</span>, String.class);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/readNacosConfig&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">readNacosConfig</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> springcloudReadNacosConfig;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>执行 <a href="http://192.168.5.98:8180/consumer/readNacosConfig">http://192.168.5.98:8180/consumer/readNacosConfig</a></li></ul><p><img src="https://gitee.com/dbin0123/picgo/raw/master/image/20210907233309.png"></p>]]></content>
      
      
      <categories>
          
          <category> alibaba </category>
          
          <category> nacos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloudAlibaba </tag>
            
            <tag> Nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年09月06日 SpringCloud Alibaba 使用</title>
      <link href="/2021/09/06/2021/202109/2021-09-06-SpringCloud%20Alibaba/"/>
      <url>/2021/09/06/2021/202109/2021-09-06-SpringCloud%20Alibaba/</url>
      
        <content type="html"><![CDATA[<h3 id="SpringCloud-Alibaba-使用"><a href="#SpringCloud-Alibaba-使用" class="headerlink" title="SpringCloud Alibaba 使用"></a>SpringCloud Alibaba 使用</h3><h4 id="创建项目springcloud-alibaba-parent"><a href="#创建项目springcloud-alibaba-parent" class="headerlink" title="创建项目springcloud-alibaba-parent"></a>创建项目<code>springcloud-alibaba-parent</code></h4><ul><li>pom导入如下依赖</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.aiwiown<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springcloud-alibaba-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>springcloud-alibaba-parent<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--统一管理jar包版本 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">junit.version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">junit.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">lombok.version</span>&gt;</span>1.18.10<span class="hljs-tag">&lt;/<span class="hljs-name">lombok.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">log4j.version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">log4j.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mysql.version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">mysql.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">druid.version</span>&gt;</span>1.1.16<span class="hljs-tag">&lt;/<span class="hljs-name">druid.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mybatis.spring.boot.version</span>&gt;</span>2.2.0<span class="hljs-tag">&lt;/<span class="hljs-name">mybatis.spring.boot.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--子模块继承之后，提供作用：锁定版本+子module不用写groupId和version --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 只是声明依赖，不会引入具体依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><span class="hljs-comment">&lt;!--定义规范，但不导入 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-project-info-reports-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--spring boot 2.5.4 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.5.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--spring cloud Hoxton.SR12 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>Hoxton.SR12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--spring cloud 阿里巴巴 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.6.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--mysql --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- druid --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--mybatis --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mybatis.spring.boot.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--junit --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--log4j --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--热启动插件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">fork</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">fork</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">addResources</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">addResources</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modules</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">module</span>&gt;</span>springcloud-alibaba-nacos-provider-01<span class="hljs-tag">&lt;/<span class="hljs-name">module</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">modules</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> alibaba </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringCloudAlibaba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年09月05日 Nacos安装</title>
      <link href="/2021/09/05/2021/202109/2021-09-05-Nacos%E5%AE%89%E8%A3%85/"/>
      <url>/2021/09/05/2021/202109/2021-09-05-Nacos%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h3 id="Nacos安装"><a href="#Nacos安装" class="headerlink" title="Nacos安装"></a>Nacos安装</h3><blockquote><p>Nacos:英文全称Dynamic Naming and Configuration Service(动态命名和配置服务)，Na为naming&#x2F;nameServer即注册中心,co为configuration即配置中心，service是指该注册&#x2F;配置中心都是以服务为核心。服务在nacos是一等公民</p></blockquote><p>下载地址: <a href="https://github.com/alibaba/nacos">GitHub</a> 本文下载nacos-server-2.0.2.zip</p><h4 id="单节点安装"><a href="#单节点安装" class="headerlink" title="单节点安装"></a>单节点安装</h4><p>将安装文件解压后启动,进入bin目录, cmd 进入bin目录</p><ul><li>启动命令<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">startup.cmd -m standalone <br></code></pre></td></tr></table></figure></li></ul><ol><li>启动</li></ol><p><img src="https://gitee.com/dbin0123/picgo/raw/master/image/20210905205132.png" alt="startup.cmd -m standalone"></p><ol start="2"><li>浏览器打开 <a href="http://127.0.0.1:8848/nacos/index.html">http://127.0.0.1:8848/nacos/index.html</a> 默认用户密码 <code>nacos:nacos</code></li></ol><p><img src="https://gitee.com/dbin0123/picgo/raw/master/image/20210905205526.png"></p><ul><li>关闭命令<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">shutdown.cmd<br></code></pre></td></tr></table></figure></li></ul><h5 id="使用mysql作为存储-本次使用mysql-8-0-25"><a href="#使用mysql作为存储-本次使用mysql-8-0-25" class="headerlink" title="使用mysql作为存储(本次使用mysql-8.0.25)"></a>使用mysql作为存储(本次使用mysql-8.0.25)</h5><ul><li>进入<code>conf</code>目录,找到<code>nacos-mysql.sql</code> 创建<code>nacos_config的数据库</code>并执行(mysql安装请自行百度)</li></ul><p><img src="https://gitee.com/dbin0123/picgo/raw/master/image/20210905210318.png"></p><ul><li>修改 <code>application.properties</code> 配置</li></ul><p><img src="https://gitee.com/dbin0123/picgo/raw/master/image/20210905210459.png"></p><ul><li>再次启动nacos <code>startup.cmd -m standalone </code></li></ul><h4 id="集群安装"><a href="#集群安装" class="headerlink" title="集群安装"></a>集群安装</h4><blockquote><p>本次安装在windows机器上, 使用伪集群(生产环境不建议使用)</p></blockquote><ul><li>安装文件解压后重命名为nacos8810,nacos8820,nacos8830</li></ul><p><img src="https://gitee.com/dbin0123/picgo/raw/master/image/20210905214914.png"></p><ul><li><p>依次修改8810,8820,8830的配置文件,修改如下</p><ul><li>application.properties(数据源不能使用本地,需要使用mysql)<blockquote><p>端口修改</p></blockquote></li></ul><p>  <img src="https://gitee.com/dbin0123/picgo/raw/master/image/20210905214818.png"></p><blockquote><p>数据源修改</p></blockquote><p>  <img src="https://gitee.com/dbin0123/picgo/raw/master/image/20210905210459.png"></p><blockquote><p>重命名<code>cluster.conf.example</code> 为<code>cluster.conf</code>, 并修改内容为</p></blockquote><p>  <img src="https://gitee.com/dbin0123/picgo/raw/master/image/20210905214939.png"></p></li><li><p>依次启动服务</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">startup.cmd<br></code></pre></td></tr></table></figure></li></ul><p><img src="https://gitee.com/dbin0123/picgo/raw/master/image/20210905214556.png"></p><ul><li><p>nginx配置nacos节点(nginx下载安装请自行百度)</p><ul><li>进入nginx的conf目录 打开nginx.conf文件<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs nginx.conf"># 配置nginx集群负载均衡<br>upstream nacos&#123;<br>    server 192.168.5.98:8810;<br>    server 192.168.5.98:8820;<br>    server 192.168.5.98:8830;<br>&#125;<br>location / &#123;<br>    # root   html;<br>    # index  index.html index.htm;<br>    proxy_pass http://nacos; <br>&#125;<br></code></pre></td></tr></table></figure></li><li>启动nginx  打开cmd,进入nginx安装目录 <figure class="highlight cmd"><table><tr><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">start</span> nginx<br></code></pre></td></tr></table></figure></li><li>访问 <a href="http://192.168.5.98/nacos">http://192.168.5.98/nacos</a></li></ul><p><img src="https://gitee.com/dbin0123/picgo/raw/master/image/20210905220050.png">  </p><p><img src="https://gitee.com/dbin0123/picgo/raw/master/image/20210905220151.png"></p></li><li><p>伪集群安装注意</p><blockquote><p>端口不要紧挨(nacos2.x开始启动会占用如下端口) 2.0需要4个端口</p></blockquote><ul><li>server.port(默认8848）</li><li>raft port: ${server.port} - 1000</li><li>grpc port: ${server.port} + 1000</li><li>grpc port for server: ${server.port} + 1001</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> alibaba </category>
          
          <category> nacos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年09月04日 sharding-sphere自定义数据源数据分表加密</title>
      <link href="/2021/09/04/2021/202109/2021-09-04-sharding-sphere%E6%95%B0%E6%8D%AE%E5%88%86%E7%89%87%E5%8A%A0%E5%AF%86/"/>
      <url>/2021/09/04/2021/202109/2021-09-04-sharding-sphere%E6%95%B0%E6%8D%AE%E5%88%86%E7%89%87%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<h3 id="sharding-sphere自定义数据源数据分片加密"><a href="#sharding-sphere自定义数据源数据分片加密" class="headerlink" title="sharding-sphere自定义数据源数据分片加密"></a>sharding-sphere自定义数据源数据分片加密</h3><blockquote><p>基于<code>application.properties</code> 配置见 <a href="https://blog.aiwiown.com/2021/08/sharding-sphere%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86/">sharding-sphere数据加密</a></p></blockquote><h4 id="变更点"><a href="#变更点" class="headerlink" title="变更点"></a>变更点</h4><h5 id="Maven依赖配置调整"><a href="#Maven依赖配置调整" class="headerlink" title="Maven依赖配置调整"></a>Maven依赖配置调整</h5><blockquote><p>maven调整 <code>sharding-jdbc-spring-boot-starter</code> 调整为 <code>sharding-jdbc-core</code> 其他不變</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- sm2加密--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.bouncycastle<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>bcprov-jdk15on<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.69<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--     sharding-jdbc依赖--&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;dependency&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;groupId&gt;org.apache.shardingsphere&lt;/groupId&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;artifactId&gt;sharding-jdbc-spring-boot-starter&lt;/artifactId&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--        &lt;version&gt;4.1.1&lt;/version&gt;--&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;/dependency&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sharding-jdbc-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- druid连接池--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- mybatis-plus--&gt;</span><br>    <span class="hljs-comment">&lt;!--        &lt;dependency&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--            &lt;version&gt;3.4.2&lt;/version&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--        &lt;/dependency&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!-- jpa --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-lang3<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="新增jpa数据源配置"><a href="#新增jpa数据源配置" class="headerlink" title="新增jpa数据源配置"></a>新增jpa数据源配置</h5><p>修改<code>application.properties</code>文件名为 <code>application.properties1</code> 或者删除</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> com.alibaba.druid.pool.DruidDataSource;<br><span class="hljs-keyword">import</span> org.apache.shardingsphere.api.config.sharding.ShardingRuleConfiguration;<br><span class="hljs-keyword">import</span> org.apache.shardingsphere.encrypt.api.EncryptColumnRuleConfiguration;<br><span class="hljs-keyword">import</span> org.apache.shardingsphere.encrypt.api.EncryptRuleConfiguration;<br><span class="hljs-keyword">import</span> org.apache.shardingsphere.encrypt.api.EncryptTableRuleConfiguration;<br><span class="hljs-keyword">import</span> org.apache.shardingsphere.encrypt.api.EncryptorRuleConfiguration;<br><span class="hljs-keyword">import</span> org.apache.shardingsphere.shardingjdbc.api.ShardingDataSourceFactory;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Primary;<br><span class="hljs-keyword">import</span> org.springframework.data.jpa.repository.config.EnableJpaRepositories;<br><span class="hljs-keyword">import</span> org.springframework.jdbc.core.JdbcTemplate;<br><span class="hljs-keyword">import</span> org.springframework.orm.jpa.JpaTransactionManager;<br><span class="hljs-keyword">import</span> org.springframework.orm.jpa.JpaVendorAdapter;<br><span class="hljs-keyword">import</span> org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;<br><span class="hljs-keyword">import</span> org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;<br><span class="hljs-keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;<br><br><span class="hljs-keyword">import</span> javax.sql.DataSource;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> : JpaConfig</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> :</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : dbin0123</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2021-09-04 08:27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableTransactionManagement</span><br><span class="hljs-meta">@EnableJpaRepositories(basePackages = &#123;&quot;xxxxx.dao.repository&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JpaConfig</span> &#123;<br><br>    <span class="hljs-meta">@Primary</span><br>    <span class="hljs-meta">@Bean(name = &quot;entityManagerFactory&quot;)</span><br>    <span class="hljs-keyword">public</span> LocalContainerEntityManagerFactoryBean <span class="hljs-title function_">entityManagerFactory</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;shardingDataSource&quot;)</span> DataSource dataSource)</span> &#123;<br>        <span class="hljs-type">LocalContainerEntityManagerFactoryBean</span> <span class="hljs-variable">em</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalContainerEntityManagerFactoryBean</span>();<br>        em.setDataSource(dataSource);<br>        em.setPackagesToScan(<span class="hljs-string">&quot;xxxxx.dao.entity&quot;</span>);<br><br>        <span class="hljs-type">JpaVendorAdapter</span> <span class="hljs-variable">vendorAdapter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HibernateJpaVendorAdapter</span>();<br>        em.setJpaVendorAdapter(vendorAdapter);<br>        em.setJpaProperties(additionalProperties());<br>        <span class="hljs-keyword">return</span> em;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Properties <span class="hljs-title function_">additionalProperties</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties.setProperty(<span class="hljs-string">&quot;hibernate.dialect&quot;</span>, <span class="hljs-string">&quot;org.hibernate.dialect.MySQL5Dialect&quot;</span>);<br>        <span class="hljs-keyword">return</span> properties;<br>    &#125;<br><br>    <span class="hljs-meta">@Primary</span><br>    <span class="hljs-meta">@Bean(name = &quot;transactionManager&quot;)</span><br>    <span class="hljs-keyword">public</span> JpaTransactionManager <span class="hljs-title function_">transactionManager</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;entityManagerFactory&quot;)</span> LocalContainerEntityManagerFactoryBean entityManagerFactory)</span> &#123;<br>        <span class="hljs-type">JpaTransactionManager</span> <span class="hljs-variable">manager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JpaTransactionManager</span>();<br>        manager.setEntityManagerFactory(entityManagerFactory.getObject());<br>        <span class="hljs-keyword">return</span> manager;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Primary</span><br>    <span class="hljs-meta">@Bean(name = &quot;shardingDataSource&quot;)</span><br>    <span class="hljs-keyword">public</span> DataSource <span class="hljs-title function_">shardingDataSource</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">//显示sql</span><br>        props.put(<span class="hljs-string">&quot;sql.show&quot;</span>, <span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//加密规则配置</span><br>        <span class="hljs-type">EncryptRuleConfiguration</span> <span class="hljs-variable">encryptRuleConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EncryptRuleConfiguration</span>();<br><br>        <span class="hljs-comment">//数据加密模块</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">encryptorProperts</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        encryptorProperts.put(<span class="hljs-string">&quot;sm2.prik&quot;</span>, <span class="hljs-string">&quot;ae91044472cd879b405914cc1fc14d44728bc09eb7b371ba89bea95e5d6d61ac&quot;</span>);<br>        encryptorProperts.put(<span class="hljs-string">&quot;sm2.pubk&quot;</span>, <span class="hljs-string">&quot;049f364fe12d0c02d37ad15c26ec7ca3ac36a2ce1ec00e425d33ff7a49eeb1ed4834d8bacec123ecc75fc309b9b1bda78ba7af02ca93300d51ee0e460e71fa63cb&quot;</span>);<br>        <span class="hljs-type">EncryptorRuleConfiguration</span> <span class="hljs-variable">encryptorConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EncryptorRuleConfiguration</span>(<span class="hljs-string">&quot;SM2&quot;</span>, encryptorProperts);<br>        <span class="hljs-comment">//加密算法配置Key, 自定义配置</span><br>        encryptRuleConfig.getEncryptors().put(<span class="hljs-string">&quot;encryptor_sm2&quot;</span>, encryptorConfig);<br>        <span class="hljs-comment">//数据加密字段配置</span><br>        Map&lt;String, EncryptColumnRuleConfiguration&gt; columnConfigMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>        <span class="hljs-comment">//user_card_no字段配置 EncryptColumnRuleConfiguration 参数(明文字段, 密文字段, hash字段, 加密算法配置Key)</span><br>        <span class="hljs-type">EncryptColumnRuleConfiguration</span> <span class="hljs-variable">userCardNoColumnConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EncryptColumnRuleConfiguration</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;ciphertext_user_card_no&quot;</span>, <span class="hljs-string">&quot;assist_user_card_no&quot;</span>, <span class="hljs-string">&quot;encryptor_sm2&quot;</span>);<br>        columnConfigMap.put(<span class="hljs-string">&quot;user_card_no&quot;</span>, userCardNoColumnConfig);<br>        <span class="hljs-comment">//user_name 字段配置</span><br>        <span class="hljs-type">EncryptColumnRuleConfiguration</span> <span class="hljs-variable">userNameColumnConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EncryptColumnRuleConfiguration</span>(<span class="hljs-string">&quot;user_name&quot;</span>, <span class="hljs-string">&quot;ciphertext_user_name&quot;</span>, <span class="hljs-string">&quot;assist_user_name&quot;</span>, <span class="hljs-string">&quot;encryptor_sm2&quot;</span>);<br>        columnConfigMap.put(<span class="hljs-string">&quot;user_name&quot;</span>, userNameColumnConfig);<br><br>        <span class="hljs-comment">//加密表规则配置</span><br>        <span class="hljs-type">EncryptTableRuleConfiguration</span> <span class="hljs-variable">tableConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EncryptTableRuleConfiguration</span>(columnConfigMap);<br>        encryptRuleConfig.getTables().put(<span class="hljs-string">&quot;tb_course&quot;</span>, tableConfig);<br>        <span class="hljs-comment">//======================================只加密不分表返回数据源================================================</span><br>        <span class="hljs-comment">//return EncryptDataSourceFactory.createDataSource(getDataSource(), encryptRuleConfig, props);</span><br><br>        <span class="hljs-comment">//=====================================加密分表返回数据源=====================================================</span><br>        <span class="hljs-comment">//数据源配置(分表)</span><br>        Map&lt;String, DataSource&gt; shardingDataSource = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        shardingDataSource.put(<span class="hljs-string">&quot;ds0&quot;</span>, getDataSource());<br>        <span class="hljs-comment">//分片规则配置</span><br>        <span class="hljs-type">ShardingRuleConfiguration</span> <span class="hljs-variable">shardingRuleConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ShardingRuleConfiguration</span>();<br>        List&lt;TableRuleConfiguration&gt; listTableRuleConfiguration = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">//tb_user 分表配置</span><br>        <span class="hljs-type">TableRuleConfiguration</span> <span class="hljs-variable">tableUser</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TableRuleConfiguration</span>(<span class="hljs-string">&quot;tb_user&quot;</span>, <span class="hljs-string">&quot;ds0.tb_user_$-&gt;&#123;1..2&#125;&quot;</span>);<br>        <span class="hljs-comment">//主键策略</span><br>        tableUser.setKeyGeneratorConfig(<span class="hljs-keyword">new</span> <span class="hljs-title class_">KeyGeneratorConfiguration</span>(<span class="hljs-string">&quot;SNOWFLAKE&quot;</span>, <span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>()));<br>        listTableRuleConfiguration.add(tableUser);<br>        shardingRuleConfig.setTableRuleConfigs(listTableRuleConfiguration);<br>        <span class="hljs-comment">//加密配置</span><br>        shardingRuleConfig.setEncryptRuleConfig(encryptRuleConfig);<br>        <span class="hljs-keyword">return</span> ShardingDataSourceFactory.createDataSource(shardingDataSource, shardingRuleConfig, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>());<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> DataSource <span class="hljs-title function_">getDataSource</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">DruidDataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DruidDataSource</span>();<br>        dataSource.setDriverClassName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br>        dataSource.setUrl(<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai&quot;</span>);<br>        dataSource.setUsername(<span class="hljs-string">&quot;root&quot;</span>);<br>        dataSource.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>        dataSource.setInitialSize(<span class="hljs-number">10</span>);<br>        dataSource.setMinIdle(<span class="hljs-number">1</span>);<br>        dataSource.setMaxActive(<span class="hljs-number">2000</span>);<br>        dataSource.setMaxWait(<span class="hljs-number">60000L</span>);<br>        dataSource.setTimeBetweenEvictionRunsMillis(<span class="hljs-number">60000L</span>);<br>        dataSource.setMinEvictableIdleTimeMillis(<span class="hljs-number">300000L</span>);<br>        dataSource.setValidationQuery(<span class="hljs-string">&quot;SELECT 1&quot;</span>);<br>        dataSource.setTestWhileIdle(<span class="hljs-literal">true</span>);<br>        dataSource.setTestOnBorrow(<span class="hljs-literal">true</span>);<br>        dataSource.setTestOnReturn(<span class="hljs-literal">false</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            dataSource.setFilters(<span class="hljs-string">&quot;wall&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException ex) &#123;<br>            <span class="hljs-comment">//ignore</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> dataSource;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean(&quot;jdbcTemplate&quot;)</span><br>    <span class="hljs-keyword">public</span> JdbcTemplate <span class="hljs-title function_">jdbcTemplate</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;shardingDataSource&quot;)</span> DataSource dataSource)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JdbcTemplate</span>(dataSource);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> sharding-sphere </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> sharding-sphere </tag>
            
            <tag> 数据加密 </tag>
            
            <tag> 自定义数据源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年08月24日 sharding-sphere数据加密</title>
      <link href="/2021/08/24/2021/202108/2021-08-24-sharding-sphere%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86/"/>
      <url>/2021/08/24/2021/202108/2021-08-24-sharding-sphere%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<h3 id="sharding-sphere数据加密"><a href="#sharding-sphere数据加密" class="headerlink" title="sharding-sphere数据加密"></a>sharding-sphere数据加密</h3><h4 id="Maven依赖配置"><a href="#Maven依赖配置" class="headerlink" title="Maven依赖配置"></a>Maven依赖配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- sm2加密--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.bouncycastle<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>bcprov-jdk15on<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.69<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- sharding-jdbc依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- druid连接池--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- mybatis-plus--&gt;</span><br>    <span class="hljs-comment">&lt;!--        &lt;dependency&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--            &lt;groupId&gt;com.baomidou&lt;/groupId&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--            &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--            &lt;version&gt;3.4.2&lt;/version&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!--        &lt;/dependency&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!-- jpa --&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-lang3<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.22<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="自定义加解密类-本次实现ShardingQueryAssistedEncryptor接口"><a href="#自定义加解密类-本次实现ShardingQueryAssistedEncryptor接口" class="headerlink" title="自定义加解密类(本次实现ShardingQueryAssistedEncryptor接口)"></a>自定义加解密类(本次实现ShardingQueryAssistedEncryptor接口)</h4><p><a href="https://shardingsphere.apache.org/document/legacy/4.x/document/cn/features/orchestration/encrypt/#shardingqueryassistedencryptor">参考</a> 文中使用的SM2工具类 见 <a href="https://blog.aiwiown.com/2021/03/safe_sm2_101/">SM2工具类</a></p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.aiwiown.sharding.utils.Sm2V2Util;<br><span class="hljs-keyword">import</span> lombok.Getter;<br><span class="hljs-keyword">import</span> lombok.Setter;<br><span class="hljs-keyword">import</span> lombok.SneakyThrows;<br><span class="hljs-keyword">import</span> org.apache.commons.codec.digest.DigestUtils;<br><span class="hljs-keyword">import</span> org.apache.shardingsphere.encrypt.strategy.spi.QueryAssistedEncryptor;<br><br><span class="hljs-keyword">import</span> java.util.Objects;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sm2Encryptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">QueryAssistedEncryptor</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加密类型</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;SM2&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化加密工具</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 辅助加密字段</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> plaintext 明文</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 密文</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">queryAssistedEncrypt</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String plaintext)</span> &#123;<br>        <span class="hljs-keyword">if</span> (Objects.isNull(plaintext)) &#123;<br>            <span class="hljs-keyword">return</span> plaintext;<br>        &#125;<br>        <span class="hljs-keyword">return</span> DigestUtils.md5Hex(plaintext);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加密</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> plaintext 明文</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 密文</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@SneakyThrows</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">encrypt</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Object plaintext)</span> &#123;<br>        <span class="hljs-keyword">if</span> (Objects.isNull(plaintext)) &#123;<br>            <span class="hljs-keyword">return</span> (String) plaintext;<br>        &#125;<br>        <span class="hljs-keyword">return</span> Sm2V2Util.encrypt(String.valueOf(plaintext), properties.getProperty(<span class="hljs-string">&quot;sm2.pubk&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解密</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ciphertext 密文</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 明文</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@SneakyThrows</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">decrypt</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String ciphertext)</span> &#123;<br>        <span class="hljs-keyword">if</span> (Objects.isNull(ciphertext)) &#123;<br>            <span class="hljs-keyword">return</span> ciphertext;<br>        &#125;<br>        <span class="hljs-keyword">return</span> Sm2V2Util.decrypt(ciphertext, properties.getProperty(<span class="hljs-string">&quot;sm2.prik&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="配置自定义加解密类"><a href="#配置自定义加解密类" class="headerlink" title="配置自定义加解密类"></a>配置自定义加解密类</h4><blockquote><p>在项目resources目录新增META-INF&#x2F;services目录新增文件org.apache.shardingsphere.encrypt.strategy.spi.Encryptor中配置新增类</p></blockquote><ul><li>org.apache.shardingsphere.encrypt.strategy.impl.AESEncryptor 自带AES加解密工具</li><li>org.apache.shardingsphere.encrypt.strategy.impl.MD5Encryptor MD5工具</li></ul><figure class="highlight txt"><table><tr><td class="code"><pre><code class="hljs txt">org.apache.shardingsphere.encrypt.strategy.impl.AESEncryptor<br>org.apache.shardingsphere.encrypt.strategy.impl.MD5Encryptor<br>包名.类名<br></code></pre></td></tr></table></figure><h4 id="配置加解密表字段"><a href="#配置加解密表字段" class="headerlink" title="配置加解密表字段"></a>配置加解密表字段</h4><figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 数据源配置</span><br><span class="hljs-comment"># 给数据库取名本次测试-&gt;user</span><br><span class="hljs-attr">spring.shardingsphere.datasource.names</span>=<span class="hljs-string">user</span><br><span class="hljs-comment"># 连接池</span><br><span class="hljs-attr">spring.shardingsphere.datasource.user.type</span>=<span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br><span class="hljs-comment"># 数据库渠道,连接URL,用户名,密码</span><br><span class="hljs-attr">spring.shardingsphere.datasource.user.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">spring.shardingsphere.datasource.user.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai</span><br><span class="hljs-attr">spring.shardingsphere.datasource.user.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.shardingsphere.datasource.user.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-comment"># 分表策略 tb_user(水平分表为tb_user_1,tb_user_2表)</span><br><span class="hljs-attr">spring.shardingsphere.sharding.tables.tb_user.actual-data-nodes</span>=<span class="hljs-string">user.tb_user_$-&gt;&#123;1..2&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 主键策略</span><br><span class="hljs-comment"># tb_user 主键生成策略(主键字段:id, 生成策略:SNOWFLAKE 雪花算法)</span><br><span class="hljs-attr">spring.shardingsphere.sharding.tables.tb_user.key-generator.column</span>=<span class="hljs-string">id</span><br><span class="hljs-attr">spring.shardingsphere.sharding.tables.tb_user.key-generator.type</span>=<span class="hljs-string">SNOWFLAKE</span><br><span class="hljs-comment"># 数据分表策略 根据ID%2 把数据写入不同的表</span><br><span class="hljs-attr">spring.shardingsphere.sharding.tables.tb_user.table-strategy.inline.sharding-column</span>=<span class="hljs-string">id</span><br><span class="hljs-attr">spring.shardingsphere.sharding.tables.tb_user.table-strategy.inline.algorithm-expression</span>=<span class="hljs-string">tb_user_$-&gt;&#123;id % 2+1&#125;</span><br><span class="hljs-attr">spring.shardingsphere.sharding.tables.tb_course.actual-data-nodes</span>=<span class="hljs-string">user.tb_course</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 数据加密策略</span><br><span class="hljs-comment"># 使用自定义的SM2解密策略</span><br><span class="hljs-attr">spring.shardingsphere.sharding.encrypt-rule.encryptors.encryptor_sm2.type</span>=<span class="hljs-string">SM2</span><br><span class="hljs-comment"># 配置密钥(公钥,私钥)</span><br><span class="hljs-attr">spring.shardingsphere.sharding.encrypt-rule.encryptors.encryptor_sm2.props.sm2.pubk</span>=<span class="hljs-string">049f364fe12d0c02d37ad15c26ec7ca3ac36a2ce1ec00e425d33ff7a49eeb1ed4834d8bacec123ecc75fc309b9b1bda78ba7af02ca93300d51ee0e460e71fa63cb</span><br><span class="hljs-attr">spring.shardingsphere.sharding.encrypt-rule.encryptors.encryptor_sm2.props.sm2.prik</span>=<span class="hljs-string">ae91044472cd879b405914cc1fc14d44728bc09eb7b371ba89bea95e5d6d61ac</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># =============================================字段加密配置==============================================</span><br><span class="hljs-comment"># 加密策略</span><br><span class="hljs-attr">spring.shardingsphere.sharding.encrypt-rule.tables.tb_user.columns.mobile.encryptor</span>=<span class="hljs-string">encryptor_sm2</span><br><span class="hljs-comment"># 明文字段 tb_user逻辑表的mobile字段(非必须,不配置则不存储mobile字段) 可用于数据迁移后使用密文查询,不存储明文</span><br><span class="hljs-attr">spring.shardingsphere.sharding.encrypt-rule.tables.tb_user.columns.mobile.plainColumn</span>=<span class="hljs-string">mobile</span><br><span class="hljs-comment"># 密文字段 对tb_user逻辑表的mobile字段加密后存储字段</span><br><span class="hljs-attr">spring.shardingsphere.sharding.encrypt-rule.tables.tb_user.columns.mobile.cipherColumn</span>=<span class="hljs-string">ciphertext_mobile</span><br><span class="hljs-comment"># 辅助查询字段 对tb_user逻辑表的mobile字段调用queryAssistedEncrypt方法解密后存储字段</span><br><span class="hljs-attr">spring.shardingsphere.sharding.encrypt-rule.tables.tb_user.columns.mobile.assistedQueryColumn</span>=<span class="hljs-string">assist_mobile</span><br><br><br><span class="hljs-attr">spring.shardingsphere.sharding.encrypt-rule.tables.tb_course.columns.user_card_no.plainColumn</span>=<span class="hljs-string">user_card_no</span><br><span class="hljs-attr">spring.shardingsphere.sharding.encrypt-rule.tables.tb_course.columns.user_card_no.cipherColumn</span>=<span class="hljs-string">ciphertext_user_card_no</span><br><span class="hljs-attr">spring.shardingsphere.sharding.encrypt-rule.tables.tb_course.columns.user_card_no.assistedQueryColumn</span>=<span class="hljs-string">assist_user_card_no</span><br><span class="hljs-attr">spring.shardingsphere.sharding.encrypt-rule.tables.tb_course.columns.user_card_no.encryptor</span>=<span class="hljs-string">encryptor_sm2</span><br><span class="hljs-attr">spring.shardingsphere.sharding.encrypt-rule.tables.tb_course.columns.user_name.plainColumn</span>=<span class="hljs-string">user_name</span><br><span class="hljs-attr">spring.shardingsphere.sharding.encrypt-rule.tables.tb_course.columns.user_name.cipherColumn</span>=<span class="hljs-string">ciphertext_user_name</span><br><span class="hljs-attr">spring.shardingsphere.sharding.encrypt-rule.tables.tb_course.columns.user_name.assistedQueryColumn</span>=<span class="hljs-string">assist_user_name</span><br><span class="hljs-attr">spring.shardingsphere.sharding.encrypt-rule.tables.tb_course.columns.user_name.encryptor</span>=<span class="hljs-string">encryptor_sm2</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 控制台显示SQL</span><br><span class="hljs-attr">spring.shardingsphere.props.sql.show</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"># 加密类查询使用 assist_user_name字段查询</span><br><span class="hljs-attr">spring.shardingsphere.props.query.with.cipher.column</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><h4 id="示例表结构"><a href="#示例表结构" class="headerlink" title="示例表结构"></a>示例表结构</h4><blockquote><p>使用mysql</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tb_course` (<br>  `id` <span class="hljs-type">varchar</span>(<span class="hljs-number">36</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;主键&#x27;</span>,<br>  `name` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `description` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `user_id` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `user_card_no1` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `ciphertext_user_card_no` <span class="hljs-type">varchar</span>(<span class="hljs-number">1000</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `assist_user_card_no` <span class="hljs-type">varchar</span>(<span class="hljs-number">36</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `create_time` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `user_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `ciphertext_user_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">1000</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `assist_user_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tb_user_1` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键&#x27;</span>,<br>  `user_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `user_psd` <span class="hljs-type">varchar</span>(<span class="hljs-number">36</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `mobile` <span class="hljs-type">varchar</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `ciphertext_mobile` <span class="hljs-type">varchar</span>(<span class="hljs-number">250</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `assist_mobile` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `create_time` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `tb_user_2` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键&#x27;</span>,<br>  `user_name` <span class="hljs-type">varchar</span>(<span class="hljs-number">40</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `user_psd` <span class="hljs-type">varchar</span>(<span class="hljs-number">36</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `mobile` <span class="hljs-type">varchar</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `ciphertext_mobile` <span class="hljs-type">varchar</span>(<span class="hljs-number">250</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `assist_mobile` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  `create_time` datetime <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br><br></code></pre></td></tr></table></figure><h5 id="repository"><a href="#repository" class="headerlink" title="repository"></a>repository</h5><h6 id="CourseRepository"><a href="#CourseRepository" class="headerlink" title="CourseRepository"></a>CourseRepository</h6><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sharing.jdbc.entity.Course;<br><span class="hljs-keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CourseRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;Course, String&gt; &#123;<br>List&lt;Course&gt; <span class="hljs-title function_">findByUserCardNo</span><span class="hljs-params">(String cardNo)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="UserRepository"><a href="#UserRepository" class="headerlink" title="UserRepository"></a>UserRepository</h6><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sharing.jdbc.entity.User;<br><span class="hljs-keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-meta">@Repository</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;User, Long&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="entity对象"><a href="#entity对象" class="headerlink" title="entity对象"></a>entity对象</h5><h6 id="Course"><a href="#Course" class="headerlink" title="Course"></a>Course</h6><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> javax.persistence.Column;<br><span class="hljs-keyword">import</span> javax.persistence.Entity;<br><span class="hljs-keyword">import</span> javax.persistence.Id;<br><span class="hljs-keyword">import</span> javax.persistence.Transient;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Entity(name = &quot;tb_course&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Course</span> &#123;<br><br><span class="hljs-meta">@Id</span><br><span class="hljs-meta">@Column(name = &quot;`id`&quot;)</span><br><span class="hljs-keyword">private</span> String id;<br><span class="hljs-meta">@Column(name = &quot;`name`&quot;)</span><br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-meta">@Column(name = &quot;`description`&quot;)</span><br><span class="hljs-keyword">private</span> String description;<br><span class="hljs-meta">@Column(name = &quot;`user_id`&quot;)</span><br><span class="hljs-keyword">private</span> String userId;<br><span class="hljs-meta">@Column(name = &quot;`user_card_no`&quot;)</span><br><span class="hljs-keyword">private</span> String userCardNo;<br><span class="hljs-meta">@Column(name = &quot;`user_name`&quot;)</span><br><span class="hljs-keyword">private</span> String userName;<br><span class="hljs-meta">@Column(name = &quot;`create_time`&quot;)</span><br><span class="hljs-keyword">private</span> LocalDateTime localDateTime;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="User"><a href="#User" class="headerlink" title="User"></a>User</h6><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> javax.persistence.Column;<br><span class="hljs-keyword">import</span> javax.persistence.Entity;<br><span class="hljs-keyword">import</span> javax.persistence.GeneratedValue;<br><span class="hljs-keyword">import</span> javax.persistence.GenerationType;<br><span class="hljs-keyword">import</span> javax.persistence.Id;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Entity(name = &quot;tb_user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br><span class="hljs-meta">@Id</span><br><span class="hljs-meta">@Column(name = &quot;id&quot;)</span><br><span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><br><span class="hljs-keyword">private</span> Long id;<br><span class="hljs-meta">@Column(name = &quot;user_name&quot;)</span><br><span class="hljs-keyword">private</span> String userName;<br><span class="hljs-meta">@Column(name = &quot;user_psd&quot;)</span><br><span class="hljs-keyword">private</span> String userPsd;<br><span class="hljs-meta">@Column(name = &quot;mobile&quot;)</span><br><span class="hljs-keyword">private</span> String mobile;<br><span class="hljs-comment">//@Column(name = &quot;ciphertext_mobile&quot;)</span><br><span class="hljs-comment">//private String ciphertextMobile;</span><br><span class="hljs-comment">//@Column(name = &quot;assist_mobile&quot;)</span><br><span class="hljs-comment">//private String assistMobile;</span><br><span class="hljs-meta">@Column(name = &quot;create_time&quot;)</span><br><span class="hljs-keyword">private</span> Date createTime;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.sharing.jdbc.entity.Course;<br><span class="hljs-keyword">import</span> com.sharing.jdbc.entity.User;<br><span class="hljs-keyword">import</span> com.sharing.jdbc.repository.CourseRepository;<br><span class="hljs-keyword">import</span> com.sharing.jdbc.repository.UserRepository;<br><span class="hljs-keyword">import</span> org.apache.commons.codec.digest.DigestUtils;<br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;<br><br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ShardingJdbcDemoApplicationTests</span> &#123;<br><br><span class="hljs-comment">//@Autowired</span><br><span class="hljs-comment">//private UserMapper userMapper;</span><br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> UserRepository userRepository;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> CourseRepository courseRepository;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>user.setUserName(<span class="hljs-string">&quot;jack_&quot;</span> + i);<br>user.setUserPsd(DigestUtils.md5Hex(user.getUserName()));<br>user.setMobile(<span class="hljs-string">&quot;1301101112&quot;</span> + i);<br>user.setCreateTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>userRepository.save(user);<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addCourse</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">Course</span> <span class="hljs-variable">course</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Course</span>();<br>course.setId(UUID.randomUUID().toString());<br>course.setName(<span class="hljs-string">&quot;java入门到放弃&quot;</span>);<br>course.setDescription(<span class="hljs-string">&quot;java入门到放弃&quot;</span>);<br>course.setUserId(<span class="hljs-string">&quot;10001&quot;</span>);<br>course.setUserName(<span class="hljs-string">&quot;jack&quot;</span>);<br>course.setUserCardNo(<span class="hljs-string">&quot;11010119900307054X&quot;</span>);<br>course.setLocalDateTime(LocalDateTime.now());<br>courseRepository.save(course);<br>&#125;<br><br><span class="hljs-comment">//查询</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findCourse</span><span class="hljs-params">()</span>&#123;<br>List&lt;Course&gt; byUserCardNo = courseRepository.findByUserCardNo(<span class="hljs-string">&quot;11010119900307054X&quot;</span>);<br>System.out.println(byUserCardNo);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> sharding-sphere </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> sharding-sphere </tag>
            
            <tag> 数据加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年05月24日 CSS固定元素</title>
      <link href="/2021/05/24/2021/202105/2021-05-24-CSS%E5%9B%BA%E5%AE%9A%E5%85%83%E7%B4%A0/"/>
      <url>/2021/05/24/2021/202105/2021-05-24-CSS%E5%9B%BA%E5%AE%9A%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h4 id="CSS固定元素"><a href="#CSS固定元素" class="headerlink" title="CSS固定元素"></a>CSS固定元素</h4><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;page&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;search-box&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;search-box-wapper&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../static/search/search.png&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;search-ico&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> @<span class="hljs-attr">confirm</span>=<span class="hljs-string">&quot;confirmSearch&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入名称&quot;</span> <span class="hljs-attr">maxlength</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;search-input&quot;</span> <span class="hljs-attr">confirm-type</span>=<span class="hljs-string">&quot;search&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.search-box</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">flex-direction</span>: row;<br>    <span class="hljs-attribute">flex-wrap</span>: nowrap;<br>    <span class="hljs-attribute">justify-content</span>: flex-start;<br>    <span class="hljs-comment">/* 固定搜索框 */</span><br>    <span class="hljs-attribute">position</span>: fixed;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">100</span>;<br>    <span class="hljs-attribute">z-index</span>: <span class="hljs-number">2000</span>;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#F8F8F8</span>;<br>&#125;<br><br><span class="hljs-selector-class">.search-box-wapper</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50</span>upx;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">50</span>upx;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>upx <span class="hljs-number">10</span>upx <span class="hljs-number">10</span>upx <span class="hljs-number">10</span>upx;<br><br>&#125;<br><br><span class="hljs-selector-class">.search-ico</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">50</span>upx;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">50</span>upx;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>upx <span class="hljs-number">10</span>upx <span class="hljs-number">10</span>upx <span class="hljs-number">10</span>upx;<br>&#125;<br><br><span class="hljs-selector-class">.search-input</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">700</span>upx;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>upx <span class="hljs-number">10</span>upx <span class="hljs-number">10</span>upx <span class="hljs-number">10</span>upx;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#fbfbfb</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/dbin0123/picgo/raw/master/image/20210524223346.png"></p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
          <category> 固定元素 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 固定元素 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年05月23日 uni-app 自定义组件(评分)</title>
      <link href="/2021/05/23/2021/202105/2021-05-23-uni-app%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/"/>
      <url>/2021/05/23/2021/202105/2021-05-23-uni-app%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h4 id="uni-app-自定义组件"><a href="#uni-app-自定义组件" class="headerlink" title="uni-app 自定义组件"></a>uni-app 自定义组件</h4><h5 id="在components包新增组件-trailer-stars-vue"><a href="#在components包新增组件-trailer-stars-vue" class="headerlink" title="在components包新增组件(trailer-stars.vue)"></a>在components包新增组件(trailer-stars.vue)</h5><h6 id="定义插件"><a href="#定义插件" class="headerlink" title="定义插件"></a>定义插件</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;!-- name=&quot;trailer-stars&quot; 定义组件名称 --&gt;<br>&lt;template name=&quot;trailer-stars&quot;&gt;<br>&lt;view class=&quot;movie-score-wapper&quot;&gt;<br>&lt;image v-for=&quot;yellow in yellowScore&quot; class=&quot;star-ico&quot; src=&quot;../static/index/score_yes.png&quot;&gt;&lt;/image&gt;<br>&lt;image v-for=&quot;gray in grayScore&quot; class=&quot;star-ico&quot; src=&quot;../static/index/score_no.png&quot;&gt;&lt;/image&gt;<br>&lt;view class=&quot;movie-score&quot; v-if=&quot;show == &#x27;true&#x27;&quot;&gt;&#123;&#123;score&#125;&#125;&lt;/view&gt;<br>&lt;/view&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>    //定义组件名称<br>name: &quot;trailer-stars&quot;,<br>data() &#123;<br>return &#123;<br>yellowScore: 0, //得分<br>grayScore: 5    //失分<br>&#125;;<br>&#125;,<br>props: &#123;<br>score: 0, //分数<br>show: false //是否需要显示<br>&#125;,<br>//组件创建完成后调用<br>created() &#123;<br>var tempScore = 0;<br>if (this.score != null &amp;&amp; this.score != undefined &amp;&amp; this.score != &#x27;&#x27;) &#123;<br>tempScore = this.score;<br>&#125;<br>this.yellowScore = parseInt(tempScore / 2);<br>this.grayScore = 5 - this.yellowScore;<br>&#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.movie-score-wapper &#123;<br>display: flex;<br>flex-direction: row;<br>&#125;<br><br>.star-ico &#123;<br>width: 25upx;<br>height: 25upx;<br>margin-top: 6upx;<br>&#125;<br><br>.movie-score &#123;<br>font-size: 9px;<br>color: grey;<br>margin-left: 8upx;<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><h6 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>   &lt;view&gt;<br>        &lt;score score=&quot;1.0&quot; show=&quot;false&quot;&gt;&lt;/score&gt;<br>        &lt;score score=&quot;4.0&quot; show=&quot;false&quot;&gt;&lt;/score&gt;<br>        &lt;score score=&quot;6.0&quot; show=&quot;false&quot;&gt;&lt;/score&gt;<br>        &lt;score score=&quot;8.0&quot; show=&quot;false&quot;&gt;&lt;/score&gt;<br>        &lt;score score=&quot;10.0&quot; show=&quot;false&quot;&gt;&lt;/score&gt;<br>   &lt;/view&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>//导入自定义组件<br>import score from &quot;../../components/trailer-stars.vue&quot;<br>export default &#123;<br>data() &#123;<br>return &#123;<br>&#125;<br>&#125;,<br>//注册组件<br>components: &#123;<br>score<br>&#125;<br>&#125;<br>&lt;/script&gt;<br>&lt;style&gt;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/dbin0123/picgo/raw/master/image/20210523205356.png"></p>]]></content>
      
      
      <categories>
          
          <category> uni-app </category>
          
          <category> 自定义组件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uni-app </tag>
            
            <tag> 自定义组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年05月23日 Flex 布局</title>
      <link href="/2021/05/23/2021/202105/2021-05-23-Flux%E5%B8%83%E5%B1%80/"/>
      <url>/2021/05/23/2021/202105/2021-05-23-Flux%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h4 id="Flex"><a href="#Flex" class="headerlink" title="Flex"></a>Flex</h4><h5 id="什么是Flex"><a href="#什么是Flex" class="headerlink" title="什么是Flex"></a>什么是Flex</h5><blockquote><p>Flex 是 Flexible Box 的缩写，意为”弹性布局”</p></blockquote><h5 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h5><ol><li><code>容器: 需要添加弹性布局的父元素.</code></li><li><code>主轴: 在弹性布局中，通过属性规定水平/垂直方向为主轴.</code></li><li><code>交叉轴: 与主轴垂直的另一方向,称为交叉轴</code>.</li></ol><h5 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">&lt;div class=&quot;flex-box&quot;&gt;&lt;/div&gt;<br><br>.flex-box&#123;<br>    /*<br>     * flex: 容器添加弹性布局后，显示为块级元素;<br>     * inline-flex; 容器添加弹性布局后，显示为行级元素;<br>     */<br>    display: flex;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>设为Flex布局后,子元素的<code>float</code>,<code>clear</code>和<code>vertical-align</code>属性将失效。position属性依然生效.</p></blockquote><h5 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h5><ol><li><p><code>flex-direction</code> (<strong>决定主轴的方向</strong>[子元素的排列方向])</p><ol><li><code>row</code>（默认值）：主轴为水平方向，起点在左。</li><li><code>row-reverse</code>：主轴为水平方向，起点在右。</li><li><code>column</code>：主轴为垂直方向，起点在上。</li><li><code>column-reverse</code>：主轴为垂直方向，起点在下。</li></ol></li><li><p><code>flex-wrap</code> <strong>设置flex容器内部元素是否换行</strong></p><ol><li><code>nowrap</code>（默认）：不换行。当容器宽度不够时，每个项目会被挤压宽度；</li><li><code>wrap</code>： 换行，并且第一行在容器最上方；</li><li><code>wrap-reverse</code>： 换行，并且第一行在容器最下方。</li></ol></li><li><p><code>flex-flow</code> <strong><code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式</strong>(默认值为row nowrap)</p></li><li><p><code>justify-content</code> <strong>定义了内部元素在主轴上的对齐方式</strong></p><ol><li><code>flex-start</code>（默认值）：左对齐</li><li><code>flex-end</code>：右对齐</li><li><code>center</code>： 居中</li><li><code>space-between</code>：两端对齐，项目之间的间隔都相等。</li><li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li></ol></li><li><p><code>align-items</code> <strong>定义项目（内部元素）在交叉轴对齐方式</strong></p><ol><li><code>flex-start</code>：交叉轴的起点对齐。</li><li><code>flex-end</code>：交叉轴的终点对齐。</li><li><code>center</code>：交叉轴的中点对齐。</li><li><code>baseline</code>: 项目的第一行文字的基线对齐。</li><li><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li></ol></li><li><p><code>align-content</code> <strong>定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</strong></p><ol><li><code>flex-start</code>：与交叉轴的起点对齐。</li><li><code>flex-end</code>：与交叉轴的终点对齐。</li><li><code>center</code>：与交叉轴的中点对齐。</li><li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li><li><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li><li><code>stretch</code>（默认值）：轴线占满整个交叉轴。</li></ol></li></ol><h5 id="内部元素属性"><a href="#内部元素属性" class="headerlink" title="内部元素属性"></a>内部元素属性</h5><ol><li>order <strong>定义内部元素的排列顺序</strong> (数值越小，排列越靠前，默认为0)</li><li>flex-grow <strong>定义内部元素的放大比例</strong> (默认为0，即如果存在剩余空间，也不放大)</li><li>flex-shrink <strong>定义了内部元素的缩小比例</strong> (默认为1，即如果空间不足，该项目将缩小)</li><li>flex-basis <strong>定义内部元素占据的主轴空间</strong> (如果主轴为水平轴，则设置这个属性，相当于设置项目的宽度。 原width将会失效。)</li><li>flex <strong>flex-grow, flex-shrink 和 flex-basis的简写</strong> (默认值为0 1 auto。后两个属性可选)</li><li>align-self <strong>定义单个内部元素自身在交叉轴上的排列方式，可以覆盖掉容器上的align-items属性</strong>。<br>         属性值：与align-items相同，默认值为auto，表示继承父容器的align-items属性值。</li></ol><p>参考:</p><ul><li><a href="https://www.cnblogs.com/echolun/p/11299460.html">https://www.cnblogs.com/echolun/p/11299460.html</a></li><li><a href="https://www.cnblogs.com/yy136/p/10115908.html">https://www.cnblogs.com/yy136/p/10115908.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
          <category> Flex布局 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flex </tag>
            
            <tag> Flex布局 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年05月17日 hibernate-validate使用</title>
      <link href="/2021/05/17/2021/202105/2021-05-17-hibernate-validate%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/05/17/2021/202105/2021-05-17-hibernate-validate%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="hibernate-validate"><a href="#hibernate-validate" class="headerlink" title="hibernate-validate"></a>hibernate-validate</h4><h5 id="什么是hibernate-validate"><a href="#什么是hibernate-validate" class="headerlink" title="什么是hibernate-validate"></a>什么是hibernate-validate</h5><p>Hibernate Validator是Hibernate提供的一个开源框架，使用注解方式非常方便的实现服务端的数据校验。</p><p><a href="http://hibernate.org/validator/">hibernate-validate官网</a></p><h5 id="spring-boot使用"><a href="#spring-boot使用" class="headerlink" title="spring boot使用"></a>spring boot使用</h5><blockquote><p>spring boot 默认集成了hibernate-validator</p></blockquote><h6 id="引入jar-maven"><a href="#引入jar-maven" class="headerlink" title="引入jar(maven)"></a>引入jar(maven)</h6><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.hibernate.validator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hibernate-validator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>last-version<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h6 id="新增配置类"><a href="#新增配置类" class="headerlink" title="新增配置类"></a>新增配置类</h6><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.hibernate.validator.HibernateValidator;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.validation.beanvalidation.MethodValidationPostProcessor;<br><br><span class="hljs-keyword">import</span> javax.validation.Validation;<br><span class="hljs-keyword">import</span> javax.validation.Validator;<br><span class="hljs-keyword">import</span> javax.validation.ValidatorFactory;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ValidatorConfig</span> &#123;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> MethodValidationPostProcessor <span class="hljs-title function_">methodValidationPostProcessor</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">MethodValidationPostProcessor</span> <span class="hljs-variable">postProcessor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodValidationPostProcessor</span>();<br><span class="hljs-comment">/**设置validator模式为快速失败返回*/</span><br>postProcessor.setValidator(validator());<br><span class="hljs-keyword">return</span> postProcessor;<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> Validator <span class="hljs-title function_">validator</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">ValidatorFactory</span> <span class="hljs-variable">validatorFactory</span> <span class="hljs-operator">=</span> Validation.byProvider(HibernateValidator.class)<br>.configure()<br>.failFast(<span class="hljs-literal">true</span>)<br>.buildValidatorFactory();<br><span class="hljs-type">Validator</span> <span class="hljs-variable">validator</span> <span class="hljs-operator">=</span> validatorFactory.getValidator();<br><br><span class="hljs-keyword">return</span> validator;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h6><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonIgnoreProperties;<br><span class="hljs-keyword">import</span> com.aiwiown.constraints.Dict;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><span class="hljs-keyword">import</span> java.math.BigDecimal;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> javax.validation.constraints.DecimalMax;<br><span class="hljs-keyword">import</span> javax.validation.constraints.DecimalMin;<br><span class="hljs-keyword">import</span> javax.validation.constraints.Max;<br><span class="hljs-keyword">import</span> javax.validation.constraints.Min;<br><span class="hljs-keyword">import</span> javax.validation.constraints.NotBlank;<br><span class="hljs-keyword">import</span> javax.validation.constraints.NotEmpty;<br><span class="hljs-keyword">import</span> javax.validation.constraints.NotNull;<br><span class="hljs-keyword">import</span> javax.validation.constraints.Pattern;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.hibernate.validator.group.GroupSequenceProvider;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@JsonIgnoreProperties(ignoreUnknown = true)</span><br><span class="hljs-meta">@GroupSequenceProvider(TestValidate.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestFrom</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">8635187916891118177L</span>;<br><br>    <span class="hljs-comment">/**数据类型[S(收款)|Q(收入及成本的确认)|F(开票)|R(退货)]*/</span><br>    <span class="hljs-meta">@Dict(value = &#123;&quot;S&quot;, &quot;Q&quot;, &quot;F&quot;, &quot;R&quot;&#125;, message = &quot;数据类型无效[S(收款)|Q(收入及成本的确认)|F(开票)|R(退货)]&quot;, hasRequer = true)</span><br>    <span class="hljs-keyword">private</span> String dataType;<br>    <span class="hljs-comment">/**商户号*/</span><br>    <span class="hljs-meta">@NotBlank(message = &quot;商户号不能为空&quot;)</span><br>    <span class="hljs-keyword">private</span> String bizId;<br>    <span class="hljs-comment">/**子商户号*/</span><br>    <span class="hljs-meta">@NotBlank(message = &quot;子商户号不能为空&quot;)</span><br>    <span class="hljs-keyword">private</span> String bizSid;<br>    <span class="hljs-comment">/**订单编号(T0000000001)*/</span><br>    <span class="hljs-meta">@NotBlank(message = &quot;订单编号不能为空&quot;)</span><br>    <span class="hljs-keyword">private</span> String tradeNo;<br>    <span class="hljs-meta">@NotBlank(message = &quot;支付单号不能为空&quot;)</span><br>    <span class="hljs-keyword">private</span> String paymentNo;<br>    <span class="hljs-meta">@Dict(value = &#123;&quot;微信&quot;, &quot;支付宝&quot;, &quot;网银&quot;, &quot;其他&quot;&#125;, message = &quot;收款方式无效[微信/支付宝/网银/其他]&quot;, groups = &#123;TestValidate.Group1Check.class, TestValidate.Group4Check.class&#125;)</span><br>    <span class="hljs-keyword">private</span> String paymentMethod;<br>    <span class="hljs-meta">@NotEmpty(message = &quot;销售渠道不能为空&quot;, groups = &#123;TestValidate.Group1Check.class&#125;)</span><br>    <span class="hljs-keyword">private</span> String salesPlatform;<br>    <span class="hljs-keyword">private</span> String shopName;<br>    <span class="hljs-meta">@NotNull(message = &quot;手续费不能为空&quot;, groups = &#123;TestValidate.Group1Check.class&#125;)</span><br>    <span class="hljs-meta">@DecimalMin(value = &quot;0.00&quot;, message = &quot;手续费必须大于等于0&quot;, groups = &#123;TestValidate.Group1Check.class, TestValidate.Group4Check.class&#125;)</span><br>    <span class="hljs-keyword">private</span> BigDecimal serviceFee;<br>    <span class="hljs-meta">@NotNull(message = &quot;运费不能为空&quot;, groups = &#123;TestValidate.Group1Check.class&#125;)</span><br>    <span class="hljs-meta">@DecimalMin(value = &quot;0.00&quot;, message = &quot;运费必须大于等于0&quot;, groups = &#123;TestValidate.Group1Check.class, TestValidate.Group4Check.class&#125;)</span><br>    <span class="hljs-keyword">private</span> BigDecimal freightFee;<br>    <span class="hljs-keyword">private</span> BigDecimal discountFee;<br>    <span class="hljs-keyword">private</span> String discountType;<br>    <span class="hljs-meta">@NotNull(message = &quot;支付时间不能为空&quot;, groups = &#123;TestValidate.Group1Check.class, TestValidate.Group4Check.class&#125;)</span><br>    <span class="hljs-meta">@Pattern(regexp = &quot;^[1-9]\\d&#123;3&#125;-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])\\s+(20|21|22|23|[0-1]\\d):[0-5]\\d:[0-5]$&quot;, message = &quot;支付时间格式不正确[yyyy-MM-dd HH:mm:ss]&quot;)</span><br>    <span class="hljs-keyword">private</span> String paymentTime;<br>    <span class="hljs-meta">@NotNull(message = &quot;收货时间不能为空&quot;, groups = &#123;TestValidate.Group2Check.class&#125;)</span><br>    <span class="hljs-meta">@Pattern(regexp = &quot;^[1-9]\\d&#123;3&#125;-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])\\s+(20|21|22|23|[0-1]\\d):[0-5]\\d:[0-5]$&quot;, message = &quot;收货时间格式不正确[yyyy-MM-dd HH:mm:ss]&quot;)</span><br>    <span class="hljs-keyword">private</span> String receiptTime;<br>    <span class="hljs-meta">@NotEmpty(message = &quot;订单商品详情不能为空&quot;)</span><br>    <span class="hljs-keyword">private</span> List&lt;TradeOrder&gt; listOrder;<br><br>    <span class="hljs-meta">@Data</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TradeOrder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">9141355495258606857L</span>;<br>        <span class="hljs-comment">/**订单交易明细单号(OT00000000011)*/</span><br>        <span class="hljs-meta">@NotEmpty(message = &quot;订单交易明细单号不能为空&quot;)</span><br>        <span class="hljs-keyword">private</span> String orderNo;<br>        <span class="hljs-meta">@Dict(value = &#123;&quot;自营&quot;, &quot;第三方入驻&quot;&#125;, message = &quot;商品类型无效(自营/第三方入驻)&quot;, hasRequer = true, groups = &#123;TestValidate.Group1Check.class&#125;)</span><br>        <span class="hljs-keyword">private</span> String orderItemChannel;<br>        <span class="hljs-meta">@Dict(value = &#123;&quot;主要责任人&quot;, &quot;代理人&quot;&#125;, message = &quot;履约义务类型无效(主要责任人/代理人)&quot;, hasRequer = true, groups = &#123;TestValidate.Group1Check.class&#125;)</span><br>        <span class="hljs-keyword">private</span> String obligationType;<br>        <span class="hljs-meta">@NotEmpty(message = &quot;商品ID不能为空&quot;, groups = &#123;TestValidate.Group1Check.class&#125;)</span><br>        <span class="hljs-keyword">private</span> String orderItemId;<br>        <span class="hljs-meta">@NotEmpty(message = &quot;商品名称不能为空&quot;, groups = &#123;TestValidate.Group1Check.class&#125;)</span><br>        <span class="hljs-keyword">private</span> String orderItemName;<br>        <span class="hljs-meta">@NotEmpty(message = &quot;商品类别不能为空&quot;, groups = &#123;TestValidate.Group1Check.class&#125;)</span><br>        <span class="hljs-keyword">private</span> String orderItemType;<br>        <span class="hljs-meta">@NotEmpty(message = &quot;详细信息不能为空&quot;, groups = &#123;TestValidate.Group1Check.class&#125;)</span><br>        <span class="hljs-keyword">private</span> String orderItemDesc;<br>        <span class="hljs-meta">@NotNull(message = &quot;销售数量不能为空&quot;, groups = &#123;TestValidate.Group1Check.class, TestValidate.Group4Check.class&#125;)</span><br>        <span class="hljs-meta">@Min(value = 0, message = &quot;付款销售数量必须大于等于0&quot;, groups = &#123;TestValidate.Group1Check.class&#125;)</span><br>        <span class="hljs-meta">@Max(value = 0, message = &quot;退款销售数量必须小于等于0&quot;, groups = &#123;TestValidate.Group4Check.class&#125;)</span><br>        <span class="hljs-keyword">private</span> Integer salesVolume;<br>        <span class="hljs-meta">@NotNull(message = &quot;销售单价不能为空&quot;, groups = &#123;TestValidate.Group1Check.class, TestValidate.Group2Check.class, TestValidate.Group4Check.class&#125;)</span><br>        <span class="hljs-meta">@DecimalMin(value = &quot;0.00&quot;, message = &quot;销售单价必须大于等于0&quot;, groups = &#123;TestValidate.Group1Check.class, TestValidate.Group2Check.class, TestValidate.Group4Check.class&#125;)</span><br>        <span class="hljs-keyword">private</span> BigDecimal salesUnitPrice;<br>        <span class="hljs-meta">@NotNull(message = &quot;销售金额不能为空&quot;, groups = &#123;TestValidate.Group1Check.class, TestValidate.Group2Check.class, TestValidate.Group4Check.class&#125;)</span><br>        <span class="hljs-meta">@DecimalMin(value = &quot;0.00&quot;, message = &quot;付款销售金额必须大于等于0&quot;, groups = &#123;TestValidate.Group1Check.class, TestValidate.Group2Check.class&#125;)</span><br>        <span class="hljs-meta">@DecimalMax(value = &quot;0.00&quot;, message = &quot;退款销售金额必须小于等于0&quot;, groups = &#123;TestValidate.Group4Check.class&#125;)</span><br>        <span class="hljs-keyword">private</span> BigDecimal salesAmount;<br>        <span class="hljs-meta">@NotNull(message = &quot;销售税率不能为空&quot;, groups = &#123;TestValidate.Group1Check.class, TestValidate.Group2Check.class, TestValidate.Group4Check.class&#125;)</span><br>        <span class="hljs-meta">@DecimalMin(value = &quot;0.00&quot;, message = &quot;销售税率必须大于等于0&quot;, groups = &#123;TestValidate.Group1Check.class, TestValidate.Group2Check.class, TestValidate.Group4Check.class&#125;)</span><br>        <span class="hljs-keyword">private</span> BigDecimal salesTaxRate;<br>        <span class="hljs-meta">@NotNull(message = &quot;实收金额不能为空&quot;, groups = &#123;TestValidate.Group1Check.class, TestValidate.Group4Check.class&#125;)</span><br>        <span class="hljs-meta">@DecimalMin(value = &quot;0.00&quot;, message = &quot;付款实收金额必须大于等于0&quot;, groups = &#123;TestValidate.Group1Check.class&#125;)</span><br>        <span class="hljs-meta">@DecimalMax(value = &quot;0.00&quot;, message = &quot;退款实收金额必须小于等于0&quot;, groups = &#123;TestValidate.Group4Check.class&#125;)</span><br>        <span class="hljs-keyword">private</span> BigDecimal actualAmount;<br>        <span class="hljs-meta">@NotNull(message = &quot;收入金额不能为空&quot;, groups = &#123;TestValidate.Group2Check.class&#125;)</span><br>        <span class="hljs-meta">@DecimalMin(value = &quot;0.00&quot;, message = &quot;收入金额必须大于等于0&quot;, groups = &#123;TestValidate.Group2Check.class&#125;)</span><br>        <span class="hljs-keyword">private</span> BigDecimal incomeAmount;<br>        <span class="hljs-meta">@NotNull(message = &quot;结算单价不能为空&quot;, groups = &#123;TestValidate.Group2Check.class&#125;)</span><br>        <span class="hljs-meta">@DecimalMin(value = &quot;0.00&quot;, message = &quot;结算单价必须大于等于0&quot;, groups = &#123;TestValidate.Group2Check.class&#125;)</span><br>        <span class="hljs-keyword">private</span> BigDecimal settlementUnitPrice;<br>        <span class="hljs-meta">@NotNull(message = &quot;结算数量不能为空&quot;, groups = &#123;TestValidate.Group2Check.class&#125;)</span><br>        <span class="hljs-meta">@Min(value = 0, message = &quot;结算数量必须大于等于0&quot;, groups = &#123;TestValidate.Group2Check.class&#125;)</span><br>        <span class="hljs-keyword">private</span> Integer settlementVolume;<br>        <span class="hljs-meta">@NotNull(message = &quot;结算金额不能为空&quot;, groups = &#123;TestValidate.Group2Check.class&#125;)</span><br>        <span class="hljs-meta">@DecimalMin(value = &quot;0.00&quot;, message = &quot;结算金额必须大于等于0&quot;, groups = &#123;TestValidate.Group2Check.class&#125;)</span><br>        <span class="hljs-keyword">private</span> BigDecimal settlementAmount;<br>        <span class="hljs-meta">@NotNull(message = &quot;采购税率不能为空&quot;, groups = &#123;TestValidate.Group2Check.class&#125;)</span><br>        <span class="hljs-meta">@DecimalMin(value = &quot;0.00&quot;, message = &quot;采购税率必须大于等于0&quot;, groups = &#123;TestValidate.Group2Check.class&#125;)</span><br>        <span class="hljs-keyword">private</span> BigDecimal purchaseTaxRate;<br>        <span class="hljs-meta">@NotNull(message = &quot;成本金额不能为空&quot;, groups = &#123;TestValidate.Group2Check.class&#125;)</span><br>        <span class="hljs-meta">@DecimalMin(value = &quot;0.00&quot;, message = &quot;成本金额必须大于等于0&quot;, groups = &#123;TestValidate.Group2Check.class&#125;)</span><br>        <span class="hljs-keyword">private</span> BigDecimal costAmount;<br>        <span class="hljs-meta">@NotNull(message = &quot;结存数量不能为空&quot;)</span><br>        <span class="hljs-meta">@Min(value = 1, message = &quot;结存数量必须大于1&quot;)</span><br>        <span class="hljs-keyword">private</span> Integer balanceQuantity;<br>        <span class="hljs-meta">@NotNull(message = &quot;开票单价不能为空&quot;, groups = &#123;TestValidate.Group3Check.class, TestValidate.Group4Check.class&#125;)</span><br>        <span class="hljs-meta">@DecimalMin(value = &quot;0.00&quot;, message = &quot;开票单价必须大于等于0&quot;, groups = &#123;TestValidate.Group3Check.class&#125;)</span><br>        <span class="hljs-meta">@DecimalMax(value = &quot;0.00&quot;, message = &quot;开票单价必须小于等于0&quot;, groups = &#123;TestValidate.Group4Check.class&#125;)</span><br>        <span class="hljs-keyword">private</span> BigDecimal invoiceUnitPrice;<br>        <span class="hljs-meta">@NotNull(message = &quot;开票数量不能为空&quot;, groups = &#123;TestValidate.Group3Check.class, TestValidate.Group4Check.class&#125;)</span><br>        <span class="hljs-meta">@Min(value = 0, message = &quot;开票数量必须大于等于0&quot;, groups = &#123;TestValidate.Group3Check.class, TestValidate.Group4Check.class&#125;)</span><br>        <span class="hljs-keyword">private</span> Integer invoicedQuantity;<br>        <span class="hljs-meta">@NotNull(message = &quot;开票金额不能为空&quot;, groups = &#123;TestValidate.Group3Check.class, TestValidate.Group4Check.class&#125;)</span><br>        <span class="hljs-meta">@DecimalMin(value = &quot;0.00&quot;, message = &quot;开票金额必须大于等于0&quot;, groups = &#123;TestValidate.Group3Check.class&#125;)</span><br>        <span class="hljs-meta">@DecimalMax(value = &quot;0.00&quot;, message = &quot;开票金额必须小于等于0&quot;, groups = &#123;TestValidate.Group4Check.class&#125;)</span><br>        <span class="hljs-keyword">private</span> BigDecimal invoiceAmount;<br>        <span class="hljs-meta">@NotNull(message = &quot;开票税率不能为空&quot;, groups = &#123;TestValidate.Group3Check.class, TestValidate.Group4Check.class&#125;)</span><br>        <span class="hljs-meta">@DecimalMin(value = &quot;0.00&quot;, message = &quot;开票税率必须大于等于0&quot;, groups = &#123;TestValidate.Group3Check.class, TestValidate.Group4Check.class&#125;)</span><br>        <span class="hljs-keyword">private</span> BigDecimal invoiceBillRate;<br>        <span class="hljs-meta">@NotNull(message = &quot;开票日期不能为空&quot;, groups = &#123;TestValidate.Group3Check.class&#125;)</span><br>        <span class="hljs-meta">@Pattern(regexp = &quot;^[1-9]\\d&#123;3&#125;-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$&quot;, message = &quot;开票日期格式不正确[yyyy-MM-dd]&quot;, groups = &#123;TestValidate.Group3Check.class&#125;)</span><br>        <span class="hljs-keyword">private</span> String invoiceOpenDate;<br>        <span class="hljs-meta">@NotNull(message = &quot;退货日期不能为空&quot;, groups = &#123;TestValidate.Group4Check.class&#125;)</span><br>        <span class="hljs-meta">@Pattern(regexp = &quot;^[1-9]\\d&#123;3&#125;-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$&quot;, message = &quot;退货日期格式不正确[yyyy-MM-dd]&quot;, groups = &#123;TestValidate.Group3Check.class&#125;)</span><br>        <span class="hljs-keyword">private</span> String refundTime;<br>        <span class="hljs-keyword">private</span> List&lt;OrderDiscount&gt; listDiscount;<br><br>        <span class="hljs-meta">@Data</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderDiscount</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>            <span class="hljs-meta">@NotNull(message = &quot;商品折扣金额不能为空&quot;, groups = &#123;TestValidate.Group1Check.class, TestValidate.Group2Check.class, TestValidate.Group4Check.class&#125;)</span><br>            <span class="hljs-meta">@DecimalMin(value = &quot;0.00&quot;, message = &quot;商品折扣金额必须大于等于0&quot;, groups = &#123;TestValidate.Group1Check.class, TestValidate.Group2Check.class, TestValidate.Group4Check.class&#125;)</span><br>            <span class="hljs-keyword">private</span> BigDecimal discountFee;<br>            <span class="hljs-meta">@NotBlank(message = &quot;商品折扣类型不能为空&quot;, groups = &#123;TestValidate.Group1Check.class, TestValidate.Group2Check.class, TestValidate.Group4Check.class&#125;)</span><br>            <span class="hljs-keyword">private</span> String discountType;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h6 id="分组校验使用"><a href="#分组校验使用" class="headerlink" title="分组校验使用"></a>分组校验使用</h6><ul><li>新增分组校验类A实现DefaultGroupSequenceProvider接口<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestValidate</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DefaultGroupSequenceProvider</span>&lt;TestFrom&gt; &#123;&#125;<br></code></pre></td></tr></table></figure></li><li>实现getValidationGroups方法<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;Class&lt;?&gt;&gt; getValidationGroups(TestFrom testFrom) &#123;<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;&#125;<br></code></pre></td></tr></table></figure></li><li>按需求新增分组校验逻辑</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> List&lt;Class&lt;?&gt;&gt; getValidationGroups(TestFrom testFrom) &#123;<br>    List&lt;Class&lt;?&gt;&gt; listGroudSequence = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    listGroudSequence.add(TestFrom.class);<br>    <span class="hljs-keyword">if</span> (Objects.nonNull(financialStatementFrom)) &#123;<br>        <span class="hljs-comment">//[S(group1)|Q(group2)|F(group3)|R(group4)]</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">dataType</span> <span class="hljs-operator">=</span> testFrom.getDataType();<br>        <span class="hljs-keyword">switch</span> (dataType) &#123;<br>            <span class="hljs-keyword">case</span> DATA_TYPE_GROUP1:<br>                listGroudSequence.add(TestValidate.Group1Check.class);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> DATA_TYPE_GROUP2:<br>                listGroudSequence.add(TestValidate.Group2Check.class);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> DATA_TYPE_GROUP3:<br>                listGroudSequence.add(TestValidate.Group3Check.class);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> DATA_TYPE_GROUP4:<br>                listGroudSequence.add(TestValidate.Group4Check.class);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> listGroudSequence;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Group1Check</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Group2Check</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Group3Check</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Group4Check</span> &#123;<br>&#125;<br><br></code></pre></td></tr></table></figure><h6 id="spring-boot使用-1"><a href="#spring-boot使用-1" class="headerlink" title="spring boot使用"></a>spring boot使用</h6><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> JSONResult <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> TestFrom testFrom, BindingResult bindingResult)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;入参:&#123;&#125;&quot;</span>, testFrom);<br>    <span class="hljs-comment">//参数校验 Default.class用于全局参数校验</span><br>    ValidatorUtils.validateFastException(testFrom, &#123;TestValidate.Group1Check.class,Default.class&#125;);<br>    <span class="hljs-comment">//TODO ... 业务逻辑</span><br>    <span class="hljs-keyword">return</span> JSONResult.ok();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>控制层类</p><h4 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h4><h5 id="相关注解"><a href="#相关注解" class="headerlink" title="相关注解"></a>相关注解</h5><table>    <tr>        <th>分类</th>        <th>注解</th>        <th>描述</th>      </tr >    <tr >        <td rowspan="4">空和非空检查</td>        <td>@Null</td>        <td>被注释的元素必须为null</td>    </tr>    <tr>        <td>@NotNull</td>        <td>被注释的元素必须不为null</td>    </tr>    <tr>        <td>@NotEmpty</td>        <td>被注释的元素的必须非空(字符串长度不为0,集合长度不为0)</td>    </tr>    <tr>        <td>@NotBlank</td>        <td>注释元素的值不为空(不为null, 去首尾空格后长度为0</td>    </tr>    <tr >        <td rowspan="2">Boolean检查</td>        <td>@AssertFalse</td>        <td>元素值必须为false</td>    </tr>    <tr>        <td>@AssertTrue</td>        <td>元素值必须为true</td>    </tr>    <tr>        <td rowspan="1">长度检查</td>        <td>@Size(max, min)</td>        <td>元素值(字符串)的长度需在min,max之间(between and)</td>    </tr>    <tr >        <td rowspan="5">日期时间检查</td>        <td>@Past</td>        <td>元素必须为过去时间</td>    </tr>    <tr>        <td >@Future</td>        <td>元素的值必须为当前时间之后</td>    </tr>    <tr>        <td >@FutureOrPresent</td>        <td>元素的值必须为当前时间或当前时间之后</td>    </tr>    <tr>        <td >@Past</td>        <td>元素的值必须为当前时间之前</td>    </tr>    <tr>        <td >@PastOrPresent</td>        <td>元素的值必须为当前时间或当前时间之前</td>    </tr>    <tr>        <td  rowspan="9">数值校验</td>        <td >@Max(value)</td>        <td >元素的值必须大于等于指定值</td>    </tr>    <tr>        <td >@Min(value)</td>        <td >元素的值必须小于等于指定值</td>    </tr>        <tr>        <td >@DecimalMax(value)</td>        <td >元素的值必须大于等于指定值</td>    </tr>        <tr>        <td >@DecimalMin(value)</td>        <td >元素的值必须小于等于指定值</td>    </tr>    <tr>        <td >@Digits(integer, function)</td>        <td >元素值必须是一个数字，其值必须在可接受的范围内</td>    </tr>    <tr>        <td >@Negative</td>        <td >元素值必须为负数</td>    </tr>    <tr>        <td >@NegativeOrZero</td>        <td >元素值必须为负数或0</td>    </tr>    <tr>        <td >@Positive</td>        <td >元素值必须为这正整数</td>    </tr>    <tr>        <td >@PositiveOrZero</td>        <td >元素值必须为这正整数或0</td>    </tr>    <tr>        <td rowspan="1">正则校验</td>        <td>@Pattern(value)</td>        <td>元素值必须符合正则表达式</td>    </tr>    <tr>        <td rowspan="1">邮箱校验</td>        <td>@Email</td>        <td>元素值必须为邮箱</td>    </tr>    <tr>        <td rowspan="1">URL校验</td>        <td>@URL(protocol=,host=, port=,regexp=, flags=)</td>        <td>元素值为URL</td>    </tr>    <tr>        <td rowspan="1">信用卡校验</td>        <td>@CreditCardNumber</td>        <td>元素值为必须必须通过Luhn校验算法</td>    </tr></table><h5 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h5><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HibernateValidatedExceptionHandler</span> &#123;<br> <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 处理<span class="hljs-doctag">@Validated</span>参数校验失败异常</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> exception 异常类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 响应</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@ResponseStatus(HttpStatus.BAD_REQUEST)</span><br>    <span class="hljs-meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span><br>    <span class="hljs-keyword">public</span> ModelAndView <span class="hljs-title function_">exceptionHandler</span><span class="hljs-params">(MethodArgumentNotValidException exception)</span>&#123;<br>        <span class="hljs-type">BindingResult</span> <span class="hljs-variable">bindingResult</span> <span class="hljs-operator">=</span> exception.getBindingResult();<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">stringBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-type">FieldError</span> <span class="hljs-variable">fieldError</span> <span class="hljs-operator">=</span> bindingResult.getFieldError();<br><span class="hljs-type">MappingJackson2JsonView</span> <span class="hljs-variable">view</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MappingJackson2JsonView</span>();<br>view.setExtractValueFromSingleKeyModel(<span class="hljs-literal">true</span>);<br><span class="hljs-type">ModelAndView</span> <span class="hljs-variable">modelAndView</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ModelAndView</span>(view);<br>modelAndView.addObject(fieldError);<br>        <span class="hljs-keyword">return</span> modelAndView;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="级联校验工具类型"><a href="#级联校验工具类型" class="headerlink" title="级联校验工具类型"></a>级联校验工具类型</h5><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> com.aiwiown.exceptions.CommonException;<br><span class="hljs-keyword">import</span> java.util.Set;<br><span class="hljs-keyword">import</span> javax.validation.ConstraintViolation;<br><span class="hljs-keyword">import</span> javax.validation.Validation;<br><span class="hljs-keyword">import</span> javax.validation.Validator;<br><span class="hljs-keyword">import</span> org.hibernate.validator.HibernateValidator;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ValidatorUtils</span> &#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">Validator</span> <span class="hljs-variable">validatorFast</span> <span class="hljs-operator">=</span> Validation.byProvider(HibernateValidator.class).configure().failFast(<span class="hljs-literal">true</span>).buildValidatorFactory().getValidator();<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">Validator</span> <span class="hljs-variable">validatorAll</span> <span class="hljs-operator">=</span> Validation.byProvider(HibernateValidator.class).configure().failFast(<span class="hljs-literal">false</span>).buildValidatorFactory().getValidator();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 校验遇到第一个不合法的字段直接返回不合法字段，后续字段不再校验</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> domain 校验对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Set&lt;ConstraintViolation&lt;T&gt;&gt; <span class="hljs-title function_">validateFast</span><span class="hljs-params">(T domain, Class&lt;?&gt;... groups)</span> &#123;<br>        <span class="hljs-keyword">return</span> validatorFast.validate(domain, groups);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 校验遇到第一个不合法的字段直接返回不合法字段，后续字段不再校验(存在不合法参数 异常提示)</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> domain 校验对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">validateFastException</span><span class="hljs-params">(T domain, Class&lt;?&gt;... groups)</span> &#123;<br>        Set&lt;ConstraintViolation&lt;T&gt;&gt; constraintViolations = validateFast(domain, groups);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != constraintViolations &amp;&amp; constraintViolations.size() &gt; <span class="hljs-number">0</span>) &#123;<br>            ConstraintViolation&lt;T&gt; violation = constraintViolations.iterator().next();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonException</span>(violation.getMessage());<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 校验所有字段并返回不合法字段</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> domain</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; Set&lt;ConstraintViolation&lt;T&gt;&gt; <span class="hljs-title function_">validateAll</span><span class="hljs-params">(T domain, Class&lt;?&gt;... groups)</span> &#123;<br>        <span class="hljs-keyword">return</span> validatorAll.validate(domain, groups);<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 校验所有字段 存在不合法的异常</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> domain 校验对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">validateAllException</span><span class="hljs-params">(T domain, Class&lt;?&gt;... groups)</span> &#123;<br>        Set&lt;ConstraintViolation&lt;T&gt;&gt; constraintViolations = validateAll(domain, groups);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> != constraintViolations &amp;&amp; constraintViolations.size() &gt; <span class="hljs-number">0</span>) &#123;<br>            ConstraintViolation&lt;T&gt; violation = constraintViolations.iterator().next();<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonException</span>(violation.getMessage());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 参数校验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> hibernate-validate </tag>
            
            <tag> 参数校验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年05月13日 NavicatPassword查看</title>
      <link href="/2021/05/13/2021/202105/2021-05-13-NavicatPassword%E6%9F%A5%E7%9C%8B/"/>
      <url>/2021/05/13/2021/202105/2021-05-13-NavicatPassword%E6%9F%A5%E7%9C%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="NavicatPassword查看"><a href="#NavicatPassword查看" class="headerlink" title="NavicatPassword查看"></a>NavicatPassword查看</h3><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li>Navicat导出链接</li><li>文件文件打开导出文件搜索关键字(<code>password</code>)</li><li>打开<a href="https://tool.lu/coderunner">tool.lu在线PHP运行</a> 附录脚本(主要修改脚本中的密码) 点击运行获取用户密码;</li></ol><h4 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h4><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NavicatPassword</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$version</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$aesKey</span> = <span class="hljs-string">&#x27;libcckeylibcckey&#x27;</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$aesIv</span> = <span class="hljs-string">&#x27;libcciv libcciv &#x27;</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$blowString</span> = <span class="hljs-string">&#x27;3DC5CA39&#x27;</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$blowKey</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$blowIv</span> = <span class="hljs-literal">null</span>;<br>     <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$version</span> = <span class="hljs-number">12</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;version = <span class="hljs-variable">$version</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;blowKey = <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-string">&#x27;3DC5CA39&#x27;</span>, <span class="hljs-literal">true</span>);<br>        <span class="hljs-variable language_">$this</span>-&gt;blowIv = <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-string">&#x27;d9c7c3c8870d64bd&#x27;</span>);<br>    &#125;<br>     <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encrypt</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$result</span> = <span class="hljs-literal">FALSE</span>;<br>        <span class="hljs-keyword">switch</span> (<span class="hljs-variable language_">$this</span>-&gt;version) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>                <span class="hljs-variable">$result</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">encryptEleven</span>(<span class="hljs-variable">$string</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<br>                <span class="hljs-variable">$result</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">encryptTwelve</span>(<span class="hljs-variable">$string</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>         <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>    &#125;<br>     <br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encryptEleven</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$round</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-title function_ invoke__">floor</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$string</span>) / <span class="hljs-number">8</span>));<br>        <span class="hljs-variable">$leftLength</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$string</span>) % <span class="hljs-number">8</span>;<br>        <span class="hljs-variable">$result</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-variable">$currentVector</span> = <span class="hljs-variable language_">$this</span>-&gt;blowIv;<br>         <br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$round</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$temp</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">encryptBlock</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">xorBytes</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$string</span>, <span class="hljs-number">8</span> * <span class="hljs-variable">$i</span>, <span class="hljs-number">8</span>), <span class="hljs-variable">$currentVector</span>));<br>            <span class="hljs-variable">$currentVector</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">xorBytes</span>(<span class="hljs-variable">$currentVector</span>, <span class="hljs-variable">$temp</span>);<br>            <span class="hljs-variable">$result</span> .= <span class="hljs-variable">$temp</span>;<br>        &#125;<br>         <br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$leftLength</span>) &#123;<br>            <span class="hljs-variable">$currentVector</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">encryptBlock</span>(<span class="hljs-variable">$currentVector</span>);<br>            <span class="hljs-variable">$result</span> .= <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">xorBytes</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$string</span>, <span class="hljs-number">8</span> * <span class="hljs-variable">$i</span>, <span class="hljs-variable">$leftLength</span>), <span class="hljs-variable">$currentVector</span>);<br>        &#125;<br>         <br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">strtoupper</span>(<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-variable">$result</span>));<br>    &#125;<br>     <br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encryptBlock</span>(<span class="hljs-params"><span class="hljs-variable">$block</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">openssl_encrypt</span>(<span class="hljs-variable">$block</span>, <span class="hljs-string">&#x27;BF-ECB&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;blowKey, OPENSSL_RAW_DATA|OPENSSL_NO_PADDING);<br>    &#125;<br>     <br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decryptBlock</span>(<span class="hljs-params"><span class="hljs-variable">$block</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">openssl_decrypt</span>(<span class="hljs-variable">$block</span>, <span class="hljs-string">&#x27;BF-ECB&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;blowKey, OPENSSL_RAW_DATA|OPENSSL_NO_PADDING);<br>    &#125;<br>     <br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">xorBytes</span>(<span class="hljs-params"><span class="hljs-variable">$str1</span>, <span class="hljs-variable">$str2</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$result</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str1</span>); <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$result</span> .= <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$str1</span>[<span class="hljs-variable">$i</span>]) ^ <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$str2</span>[<span class="hljs-variable">$i</span>]));<br>        &#125;<br>         <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>    &#125;<br>     <br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encryptTwelve</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">openssl_encrypt</span>(<span class="hljs-variable">$string</span>, <span class="hljs-string">&#x27;AES-128-CBC&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;aesKey, OPENSSL_RAW_DATA, <span class="hljs-variable">$this</span>-&gt;aesIv);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">strtoupper</span>(<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-variable">$result</span>));<br>    &#125;<br>     <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decrypt</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$result</span> = <span class="hljs-literal">FALSE</span>;<br>        <span class="hljs-keyword">switch</span> (<span class="hljs-variable language_">$this</span>-&gt;version) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>                <span class="hljs-variable">$result</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">decryptEleven</span>(<span class="hljs-variable">$string</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<br>                <span class="hljs-variable">$result</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">decryptTwelve</span>(<span class="hljs-variable">$string</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>         <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>    &#125;<br>     <br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decryptEleven</span>(<span class="hljs-params"><span class="hljs-variable">$upperString</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$string</span> = <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$upperString</span>));<br>         <br>        <span class="hljs-variable">$round</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-title function_ invoke__">floor</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$string</span>) / <span class="hljs-number">8</span>));<br>        <span class="hljs-variable">$leftLength</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$string</span>) % <span class="hljs-number">8</span>;<br>        <span class="hljs-variable">$result</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-variable">$currentVector</span> = <span class="hljs-variable language_">$this</span>-&gt;blowIv;<br>         <br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$round</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$encryptedBlock</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$string</span>, <span class="hljs-number">8</span> * <span class="hljs-variable">$i</span>, <span class="hljs-number">8</span>);<br>            <span class="hljs-variable">$temp</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">xorBytes</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">decryptBlock</span>(<span class="hljs-variable">$encryptedBlock</span>), <span class="hljs-variable">$currentVector</span>);<br>            <span class="hljs-variable">$currentVector</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">xorBytes</span>(<span class="hljs-variable">$currentVector</span>, <span class="hljs-variable">$encryptedBlock</span>);<br>            <span class="hljs-variable">$result</span> .= <span class="hljs-variable">$temp</span>;<br>        &#125;<br>         <br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$leftLength</span>) &#123;<br>            <span class="hljs-variable">$currentVector</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">encryptBlock</span>(<span class="hljs-variable">$currentVector</span>);<br>            <span class="hljs-variable">$result</span> .= <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">xorBytes</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$string</span>, <span class="hljs-number">8</span> * <span class="hljs-variable">$i</span>, <span class="hljs-variable">$leftLength</span>), <span class="hljs-variable">$currentVector</span>);<br>        &#125;<br>         <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>    &#125;<br>     <br>    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decryptTwelve</span>(<span class="hljs-params"><span class="hljs-variable">$upperString</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$string</span> = <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$upperString</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">openssl_decrypt</span>(<span class="hljs-variable">$string</span>, <span class="hljs-string">&#x27;AES-128-CBC&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;aesKey, OPENSSL_RAW_DATA, <span class="hljs-variable">$this</span>-&gt;aesIv);<br>    &#125;<br>&#125;;<br> <br> <br><span class="hljs-comment">//需要指定版本两种，11或12</span><br><span class="hljs-comment">//$navicatPassword = new NavicatPassword(11);</span><br><span class="hljs-variable">$navicatPassword</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NavicatPassword</span>(<span class="hljs-number">11</span>);<br> <br><span class="hljs-comment">//解密</span><br><span class="hljs-comment">//$decode = $navicatPassword-&gt;decrypt(&#x27;xxxx&#x27;);</span><br><span class="hljs-variable">$decode</span> = <span class="hljs-variable">$navicatPassword</span>-&gt;<span class="hljs-title function_ invoke__">decrypt</span>(<span class="hljs-string">&#x27;xxxx&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$decode</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> Navicat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Navicat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年04月30日 ElasticSearch 索引</title>
      <link href="/2021/04/30/2021/202104/2021-04-30-ES%20%E7%B4%A2%E5%BC%95%EF%BC%88index%EF%BC%89_101/"/>
      <url>/2021/04/30/2021/202104/2021-04-30-ES%20%E7%B4%A2%E5%BC%95%EF%BC%88index%EF%BC%89_101/</url>
      
        <content type="html"><![CDATA[<h4 id="ES-索引-Index-API"><a href="#ES-索引-Index-API" class="headerlink" title="ES 索引(Index) API"></a>ES 索引(Index) API</h4><h5 id="创建索引示例"><a href="#创建索引示例" class="headerlink" title="创建索引示例"></a>创建索引示例</h5><p><img src="https://gitee.com/dbin0123/picgo/raw/master/image/20210419224844.png"></p><p>_shards 副本集信息</p><ul><li><code>total</code> 指示应对索引操作执行多少分片副本(主分片和副本分片)</li><li><code>successful</code> 指示索引操作成功处理的分片复制数</li><li><code>failed</code> 在复制碎片上索引操作失败的情况下，包含复制相关错误的数组</li></ul><h5 id="自动创建索引"><a href="#自动创建索引" class="headerlink" title="自动创建索引"></a>自动创建索引</h5><blockquote><p>如果索引不存在，则索引操作将自动创建索引，并应用所配置的任何索引模板。如果指定的类型尚不存在，则索引操作还将为其创建动态类型映射。默认情况下，如果需要，新的字段和对象将自动添加到指定类型的映射定义中</p></blockquote><h5 id="设置创建索引参数"><a href="#设置创建索引参数" class="headerlink" title="设置创建索引参数"></a>设置创建索引参数</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">PUT _cluster/settings<br>&#123;<br>    &quot;persistent&quot;: &#123;<br>        &quot;action.auto_create_index&quot;: &quot;true&quot; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>action.auto_create_index</p><ul><li><code>&quot;action.auto_create_index&quot;: &quot;twitter,index10,-index1*,+ind*&quot;</code> 只允许自动创建名为 twitter、 index10的索引，不允许创建索引 index1* 和 可任意创建ind*的索引。模式按照给定的顺序进行匹配。</li><li><code>&quot;action.auto_create_index&quot;: &quot;false&quot; </code> 完全禁用自动创建索引。</li><li><code>&quot;action.auto_create_index&quot;: &quot;true&quot; </code> 允许自动创建任意名称的索引。</li></ul><h5 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h5><blockquote><p>每个索引文档都有一个版本号。相关的版本号作为响应索引 API 请求的一部分返回。当指定版本参数时，索引 API 可以选择允许乐观并发控制。这将控制要对其执行操作的文档的版本。版本控制用例的一个很好的例子就是执行事务性的读然后更新。指定文档最初读取的版本可以确保在此期间不会发生任何更改(为了更新而读取时，建议将首选项设置为 _ primary)</p></blockquote><ul><li>显示指定修改版本号<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">curl -X PUT &quot;localhost:9200/twitter/_doc/1?version=2&amp;pretty&quot; -H &#x27;Content-Type: application/json&#x27; -d&#x27;<br>&#123;<br>    &quot;message&quot; : &quot;elasticsearch now has versioning support, double cool!&quot;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><code>version:指定需要修改的版本号（如果es数据的版本号与传入的版本号不一致则不更新）</code></p><blockquote><p>默认情况下，使用从1开始的内部版本控制，每次更新增加一个版本，包括删除。可选地，版本号可以用外部值作为补充(例如，如果在数据库中维护)。若要启用此功能，应将 version_type 设置为 external。所提供的值必须是一个大于或等于0，小于9.2 e + 18的数值。当使用外部版本类型时，系统不检查匹配的版本号，而是检查传递给索引请求的版本号是否大于当前存储的文档的版本号。如果为真，文档将被索引并使用新的版本号。如果提供的值小于或等于存储文档的版本号，则会发生版本冲突，索引操作将失败。</p></blockquote><h5 id="ES版本类型"><a href="#ES版本类型" class="headerlink" title="ES版本类型"></a>ES版本类型</h5><p>除了上面解释的内部和外部（version_type：external）版本类型之外，Elasticsearch 还支持针对特定用例的其他类型。下面是不同版本类型及其语义的概述</p><ul><li><code>internal</code>：如果给定的版本与所存储的文档的版本相同，则只对文档进行索引</li><li><code>external or</code>:如果给定的版本严格高于存储文档的版本，则只对文档进行索引or </li><li><code>external_gt</code>:如果没有现存的文件。给定的版本将作为新版本使用，并与新文档一起存储。所提供的版本必须是一个非负的长号</li><li><code>external_gte</code>:如果给定的版本是equal相等的,或高于存储文档的版本。如果没有现有的文档，操作也会成功。给定的版本将作为新版本使用，并与新文档一起存储。所提供的版本必须是一个非负的长号</li></ul><h5 id="操作选项"><a href="#操作选项" class="headerlink" title="操作选项"></a>操作选项</h5><p>索引操作还接受 op_类型，该类型可用于强制创建操作，允许“如果缺失则放置”行为。使用 <code>create</code> 时，如果索引中已存在该 id 的文档，则索引操作将失败。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">PUT /twitter/_doc/1?op_type=create&amp;pretty<br>&#123;<br>    &quot;user&quot; : &quot;kimchy&quot;,<br>    &quot;post_date&quot; : &quot;2009-11-15T14:12:12&quot;,<br>    &quot;message&quot; : &quot;trying out Elasticsearch&quot;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/dbin0123/picgo/raw/master/image/20210430101611.png"></p><p>另一种写法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">curl -X PUT &quot;localhost:9200/twitter/_doc/1/_create?pretty&quot; -H &#x27;Content-Type: application/json&#x27; -d&#x27;<br>&#123;<br>    &quot;user&quot; : &quot;kimchy&quot;,<br>    &quot;post_date&quot; : &quot;2009-11-15T14:12:12&quot;,<br>    &quot;message&quot; : &quot;trying out Elasticsearch&quot;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="ID自动生成"><a href="#ID自动生成" class="headerlink" title="ID自动生成"></a>ID自动生成</h5><p>请求方式PUT修改为POST, op_type默认为<code>create</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">POST twitter/_doc/<br>&#123;<br>    &quot;user&quot; : &quot;kimchy&quot;,<br>    &quot;post_date&quot; : &quot;2009-11-15T14:12:12&quot;,<br>    &quot;message&quot; : &quot;trying out Elasticsearch&quot;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
          <category> 索引 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
            <tag> 索引 </tag>
            
            <tag> Index </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年04月06日 ElasticSearch 分词器（插件）安装</title>
      <link href="/2021/04/06/2021/202104/2021-04-06-ES%20analyze%E5%88%86%E8%AF%8D%E5%99%A8%EF%BC%88elasticsearch-analysis-ik%EF%BC%89_101/"/>
      <url>/2021/04/06/2021/202104/2021-04-06-ES%20analyze%E5%88%86%E8%AF%8D%E5%99%A8%EF%BC%88elasticsearch-analysis-ik%EF%BC%89_101/</url>
      
        <content type="html"><![CDATA[<h3 id="ES-分词器（elasticsearch-analysis）"><a href="#ES-分词器（elasticsearch-analysis）" class="headerlink" title="ES 分词器（elasticsearch analysis）"></a>ES 分词器（elasticsearch analysis）</h3><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><h5 id="正排索引，倒排索引（https-www-it610-com-article-1297280663585628160-htm）"><a href="#正排索引，倒排索引（https-www-it610-com-article-1297280663585628160-htm）" class="headerlink" title="正排索引，倒排索引（https://www.it610.com/article/1297280663585628160.htm）"></a>正排索引，倒排索引（<a href="https://www.it610.com/article/1297280663585628160.htm%EF%BC%89">https://www.it610.com/article/1297280663585628160.htm）</a></h5><h4 id="分词器"><a href="#分词器" class="headerlink" title="分词器"></a>分词器</h4><p>Analysis(分词）： 文本分析是把全文本转换一系列单词(term&#x2F;token)的过程，也叫分词。<br>Analysis是通过Analyzer来实现的。</p><p>Analysis组成（分词流程）</p><ul><li>Character Filters：针对原始文本进行处理，比如去除html标签；</li><li>Tokenizer：将原始文本按照一定规则切分为单词；</li><li>Token Filters：针对Tokenizer处理的单词进行再加工，比如转小写、删除或增新等处理；</li></ul><p><img src="https://gitee.com/dbin0123/picgo/raw/master/image/20210406222453.png" alt="流程"></p><blockquote><p>ES内置分词器</p></blockquote><ul><li><p>Standard - 默认分词器，按词切分，小写处理</p><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs JSON"># 分词<br>GET /_analyze<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;standard&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;He gave his wife a ring as a token of his love.&quot;</span><br><span class="hljs-punctuation">&#125;</span><br># 响应<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;tokens&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;he&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gave&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">7</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;his&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">11</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;wife&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">12</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">16</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;a&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">17</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">18</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ring&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">19</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">23</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;as&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">24</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">26</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">6</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;a&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">27</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">28</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">7</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;token&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">29</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">34</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;of&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">35</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">37</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">9</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;his&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">38</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">41</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;love&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">42</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">46</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">11</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>Simple - 按照非字母切分(符号被过滤), 小写处理</p><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs JSON"># simple分词<br>GET /_analyze<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;simple&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;He gave his wife a ring as a token of his love.&quot;</span><br><span class="hljs-punctuation">&#125;</span><br># 响应<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;tokens&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;he&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;word&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gave&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">7</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;word&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;his&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">11</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;word&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;wife&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">12</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">16</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;word&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ring&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">19</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">23</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;word&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;token&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">29</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">34</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;word&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;his&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">38</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">41</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;word&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;love&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">42</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">46</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;word&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">11</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>Stop - 小写处理，停用词过滤(the,a,is)</p><blockquote><p><a href="http://www.ranks.nl/stopwords">英文停用词</a> <a href="http://www.ranks.nl/stopwords/chinese-stopwords">中文停用词</a></p></blockquote><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs JSON"># stop分词<br>GET /_analyze<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;stop&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;He gave his wife a ring as a token of his love.&quot;</span><br><span class="hljs-punctuation">&#125;</span><br># 响应<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;tokens&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;he&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;word&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gave&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">7</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;word&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;his&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">11</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;word&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;wife&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">12</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">16</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;word&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ring&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">19</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">23</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;word&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;token&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">29</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">34</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;word&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">8</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;his&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">38</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">41</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;word&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;love&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">42</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">46</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;word&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">11</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>Whitespace - 按照空格切分，不转小写</p></li><li><p>Keyword - 不分词，直接将输入当作输出</p><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs JSON"># keyword分词<br>GET /_analyze<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;He gave his wife a ring as a token of his love.&quot;</span><br><span class="hljs-punctuation">&#125;</span><br># 输出<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;tokens&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;He gave his wife a ring as a token of his love.&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">47</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;word&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>Patter - 正则表达式，默认\W+(非字符分割)</p></li><li><p>Language - 提供了30多种常见语言的分词器</p></li><li><p>Customer 自定义分词器</p></li></ul><h4 id="IK分词器安装"><a href="#IK分词器安装" class="headerlink" title="IK分词器安装"></a>IK分词器安装</h4><ol><li>下载与ES对于的版本 <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></li><li>解压安装包至ES config目录</li><li>重启ES就可以使用 ik_max_word,ik_smart</li></ol><h5 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h5><blockquote><p>ik_max_word（细粒度拆分）</p></blockquote><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs JSON"><br># ik_max_word分词<br>GET /_analyze<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ik_max_word&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;我是中国人&quot;</span><br><span class="hljs-punctuation">&#125;</span><br># 结果<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;tokens&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;我&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_CHAR&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;是&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_CHAR&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;中国人&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;中国&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;国人&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>ik_smart(粗粒度拆分)</p></blockquote><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs JSON"># ik_smart分词<br>GET /_analyze<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ik_smart&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;我是中国人&quot;</span><br><span class="hljs-punctuation">&#125;</span><br># 结果<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;tokens&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;我&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_CHAR&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;是&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_CHAR&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;token&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;中国人&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;start_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;end_offset&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN_WORD&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;position&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h5 id="在线安装analysis-kuromoji分词器"><a href="#在线安装analysis-kuromoji分词器" class="headerlink" title="在线安装analysis-kuromoji分词器"></a>在线安装analysis-kuromoji分词器</h5><ul><li><p>.&#x2F;bin&#x2F;elasticsearch-plugin install –help<br><img src="https://gitee.com/dbin0123/picgo/raw/master/image/20210406230253.png" alt="列举可以在线安装的插件"></p></li><li><p>安装</p></li></ul><blockquote><p>.&#x2F;es_master&#x2F;bin&#x2F;elasticsearch-plugin install analysis-kuromoji</p></blockquote><p><img src="https://gitee.com/dbin0123/picgo/raw/master/image/20210406230852.png" alt="在线安装的插件"></p><p><img src="https://gitee.com/dbin0123/picgo/raw/master/image/20210406231541.png" alt="测试"></p>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
          <category> 插件安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
            <tag> 插件 </tag>
            
            <tag> IK 分词器 </tag>
            
            <tag> kuromoji </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年04月05日 ElasticSearch 集群安装</title>
      <link href="/2021/04/05/2021/202104/2021-04-05-ElasticSearch%20%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85_102/"/>
      <url>/2021/04/05/2021/202104/2021-04-05-ElasticSearch%20%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85_102/</url>
      
        <content type="html"><![CDATA[<h1 id="ES-集群搭建"><a href="#ES-集群搭建" class="headerlink" title="ES 集群搭建"></a>ES 集群搭建</h1><h4 id="装备工作"><a href="#装备工作" class="headerlink" title="装备工作"></a>装备工作</h4><ul><li>下载ElasticSearch安装包（6.3.2）</li></ul><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.3.2.tar.gz<br></code></pre></td></tr></table></figure><ul><li>安装路径说明</li></ul><p><img src="https://gitee.com/dbin0123/picgo/raw/master/image/20210405120023.png" alt="安装目录结构"></p><ol><li>es_master：主节点</li><li>es_slave_01: 子节点1</li><li>es_slave_02: 子节点2</li></ol><ul><li>解压安装文件至 （es_master,es_slave_01,es_slave_02）</li></ul><h4 id="安装工作"><a href="#安装工作" class="headerlink" title="安装工作"></a>安装工作</h4><ul><li>es_master安装</li></ul><p>master配置文件（elasticsearch.yml）</p><figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><br><span class="hljs-comment"># 集群名称</span><br><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">aiwiown-master</span><br><span class="hljs-comment"># 节点名称</span><br><span class="hljs-attr">node.name:</span> <span class="hljs-string">master</span><br><span class="hljs-comment"># 绑定IP</span><br><span class="hljs-attr">network.host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br><span class="hljs-comment"># http端口</span><br><span class="hljs-attr">http.port:</span> <span class="hljs-number">9200</span><br><br><span class="hljs-comment"># head插件配置跨域</span><br><span class="hljs-attr">http.cors.enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">http.cors.allow-origin:</span> <span class="hljs-string">&quot;*&quot;</span><br><br></code></pre></td></tr></table></figure><p>启动 .&#x2F;bin&#x2F;elasticsearch -d (-d 后台启动)</p><p><img src="https://gitee.com/dbin0123/picgo/raw/master/image/20210405124149.png" alt="head插件查看"></p><ul><li>es_slave_01安装</li></ul><p>slave_01配置文件（elasticsearch.yml）</p><figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><br><span class="hljs-comment"># 集群名称</span><br><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">aiwiown-master</span><br><span class="hljs-comment"># 节点名称</span><br><span class="hljs-attr">node.name:</span> <span class="hljs-string">slave_01</span><br><span class="hljs-comment"># 绑定IP</span><br><span class="hljs-attr">network.host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br><span class="hljs-comment"># http端口</span><br><span class="hljs-attr">http.port:</span> <span class="hljs-number">9201</span><br><span class="hljs-comment"># master节点</span><br><span class="hljs-attr">discovery.zen.ping.unicast.hosts:</span> [<span class="hljs-string">&quot;127.0.0.1&quot;</span>]<br><span class="hljs-comment"># 为了避免脑裂，集群节点数最少为 半数+1</span><br><span class="hljs-attr">discovery.zen.minimum_master_nodes:</span> <span class="hljs-number">2</span><br><br></code></pre></td></tr></table></figure><p>启动 .&#x2F;bin&#x2F;elasticsearch -d (-d 后台启动)</p><ul><li>es_slave_02安装</li></ul><p>slave_02配置文件（elasticsearch.yml）</p><figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><br><span class="hljs-comment"># 集群名称</span><br><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">aiwiown-master</span><br><span class="hljs-comment"># 节点名称</span><br><span class="hljs-attr">node.name:</span> <span class="hljs-string">slave_02</span><br><span class="hljs-comment"># 绑定IP</span><br><span class="hljs-attr">network.host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br><span class="hljs-comment"># http端口</span><br><span class="hljs-attr">http.port:</span> <span class="hljs-number">9202</span><br><span class="hljs-comment"># master节点</span><br><span class="hljs-attr">discovery.zen.ping.unicast.hosts:</span> [<span class="hljs-string">&quot;127.0.0.1&quot;</span>]<br><span class="hljs-comment"># 为了避免脑裂，集群节点数最少为 半数+1</span><br><span class="hljs-attr">discovery.zen.minimum_master_nodes:</span> <span class="hljs-number">2</span><br><br></code></pre></td></tr></table></figure><p>启动 .&#x2F;bin&#x2F;elasticsearch -d (-d 后台启动)</p><p><img src="https://gitee.com/dbin0123/picgo/raw/master/image/20210405125429.png" alt="head插件查看"></p><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><h4 id="配置描述（转：https-www-cnblogs-com-sunsky303-p-9438737-html）"><a href="#配置描述（转：https-www-cnblogs-com-sunsky303-p-9438737-html）" class="headerlink" title="配置描述（转：https://www.cnblogs.com/sunsky303/p/9438737.html）"></a>配置描述（转：<a href="https://www.cnblogs.com/sunsky303/p/9438737.html%EF%BC%89">https://www.cnblogs.com/sunsky303/p/9438737.html）</a></h4><table><thead><tr><th>配置</th><th>描述</th></tr></thead><tbody><tr><td>cluster.name</td><td>配置elasticsearch的集群名称，默认是elasticsearch</td></tr><tr><td>node.name</td><td>节点名称（默认随机指定一个name.txt列表中名字）</td></tr><tr><td>node.master</td><td>指定该节点是否有<span style='color:red;'>资格</span>被选举成为master，默认是true，elasticsearch默认集群中的第一台启动的机器为master，master挂了会重新选举master</td></tr><tr><td>node.data</td><td>指定该节点是否存储索引数据，默认为true，（如果节点配置node.master:false并且node.data: false，则该节点将起到负载均衡的作用）</td></tr><tr><td>index.number_of_shards</td><td>设置索引分片个数，默认为5片</td></tr><tr><td>index.number_of_replicas</td><td>设置默认索引副本个数，默认为1个副本（默认5个分片1个拷贝；即总分片数为10）</td></tr><tr><td>path.conf</td><td>设置配置文件的存储路径，默认是es根目录下的config文件夹</td></tr><tr><td>path.data</td><td>设置索引数据的存储路径，默认是es根目录下的data文件夹，可以设置多个存储路径，用逗号隔开。</td></tr><tr><td>path.work</td><td>设置临时文件的存储路径，默认是es根目录下的work文件夹。</td></tr><tr><td>path.logs</td><td>设置日志文件的存储路径，默认是es根目录下的logs文件夹。</td></tr><tr><td>path.plugins</td><td>设置插件的存放路径，默认是es根目录下的plugins文件夹。</td></tr><tr><td>bootstrap.mlockall</td><td><span style='color:red;'>设置为true来锁住内存。因为当jvm开始swapping时es的效率会降低，所以要保证它不swap，可以把ES_MIN_MEM和ES_MAX_MEM两个环境变量设置成同一个值，并且保证机器有足够的内存分配给es。同时也要允许elasticsearch的进程可以锁住内存，linux下可以通过ulimit -l unlimited命令。</span></td></tr><tr><td>network.bind_host</td><td>设置绑定的ip地址，可以是ipv4或ipv6的，默认为0.0.0.0。</td></tr><tr><td>network.publish_host</td><td>设置其它节点和该节点交互的ip地址，如果不设置它会自动判断，值必须是个真实的ip地址。</td></tr><tr><td>network.host</td><td>这个参数是用来同时设置<span style='color:red;'>bind_host</span>和<span style='color:red;'>publish_host</span>上面两个参数。</td></tr><tr><td>transport.tcp.port</td><td>设置节点间交互的tcp端口，默认是9300。</td></tr><tr><td>transport.tcp.compress</td><td>设置是否压缩tcp传输时的数据，默认为false，不压缩。</td></tr><tr><td>http.port</td><td>设置对外服务的http端口，默认为9200。</td></tr><tr><td>http.max_content_length</td><td>设置内容的最大容量，默认<span style='color:red;'>100mb</span>。</td></tr><tr><td>http.enabled</td><td>是否使用http协议对外提供服务，默认为true，开启。</td></tr><tr><td>gateway.type</td><td>gateway的类型，默认为local即为本地文件系统，可以设置为本地文件系统，分布式文件系统，hadoop的HDFS，和amazon的s3服务器，其它文件系统的设置。</td></tr><tr><td>gateway.recover_after_nodes</td><td>设置集群中N个节点启动时进行数据恢复，默认为1。</td></tr><tr><td>gateway.recover_after_time</td><td>设置初始化数据恢复进程的超时时间，默认是5分钟。</td></tr><tr><td>gateway.expected_nodes</td><td>设置这个集群中节点的数量，默认为2，一旦这N个节点启动，就会立即进行数据恢复。</td></tr><tr><td>cluster.routing.allocation.node_initial_primaries_recoveries</td><td>初始化数据恢复时，并发恢复线程的个数，默认为4。</td></tr><tr><td>cluster.routing.allocation.node_concurrent_recoveries</td><td>添加删除节点或负载均衡时并发恢复线程的个数，默认为4。</td></tr><tr><td>indices.recovery.max_size_per_sec</td><td>设置数据恢复时限制的带宽，如入100mb，默认为0，即无限制。</td></tr><tr><td>indices.recovery.concurrent_streams</td><td>设置这个参数来限制从其它分片恢复数据时最大同时打开并发流的个数，默认为5。</td></tr><tr><td>discovery.zen.minimum_master_nodes</td><td>设置这个参数来保证集群中的节点可以知道其它N个有master资格的节点。默认为1，对于大的集群来说，可以设置大一点的值（2-4）</td></tr><tr><td>discovery.zen.ping.timeout</td><td>设置集群中自动发现其它节点时ping连接超时时间，默认为3秒，对于比较差的网络环境可以高点的值来防止自动发现时出错。</td></tr><tr><td>discovery.zen.ping.multicast.enabled</td><td>设置是否打开多播发现节点，默认是true。</td></tr><tr><td>discovery.zen.ping.unicast.hosts</td><td>设置集群中master节点的初始列表，可以通过这些节点来自动发现新加入集群的节点。</td></tr><tr><td>threadpool.search.type</td><td>查询线程池配置（fixed 固定）</td></tr><tr><td>threadpool.search.min</td><td>最小线程数</td></tr><tr><td>threadpool.search.max</td><td>最大线程数</td></tr><tr><td>threadpool.search.queue_size</td><td>线程池队列大小</td></tr><tr><td>index.store.type</td><td>ES索引存储 memory（内存）</td></tr><tr><td>index.mapper.dynamic</td><td>禁止自动创建mapping（默认false）</td></tr><tr><td>index.query.parse.allow_unmapped_fields</td><td>不能查找没有在mapping中定义的属性</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
            <tag> ES集群 </tag>
            
            <tag> ES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年04月05日 ElasticSearch Head插件安装</title>
      <link href="/2021/04/05/2021/202104/2021-04-05-ElasticSearch-Head%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85_101/"/>
      <url>/2021/04/05/2021/202104/2021-04-05-ElasticSearch-Head%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85_101/</url>
      
        <content type="html"><![CDATA[<h3 id="ES-head插件安装"><a href="#ES-head插件安装" class="headerlink" title="ES head插件安装"></a>ES head插件安装</h3><h4 id="下载-head插件"><a href="#下载-head插件" class="headerlink" title="下载 head插件"></a>下载 head插件</h4><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 进入安装目录</span><br><span class="hljs-built_in">cd</span> /run/media/duanbin/programs/opt/elastic_head<br><span class="hljs-comment"># 下载</span><br>wget https://github.com/mobz/elasticsearch-head/archive/refs/heads/master.zip<br><span class="hljs-comment"># 解压</span><br>unzip master.zip<br><span class="hljs-comment"># 进入解压目录</span><br><span class="hljs-built_in">cd</span> elasticsearch-head-master<br><span class="hljs-comment"># 安装（确保安装node）</span><br>npm install<br><span class="hljs-comment"># 启动</span><br>npm run start<br></code></pre></td></tr></table></figure><h4 id="浏览器打开-http-127-0-0-1-9100"><a href="#浏览器打开-http-127-0-0-1-9100" class="headerlink" title="浏览器打开 http://127.0.0.1:9100"></a>浏览器打开 <a href="http://127.0.0.1:9100/">http://127.0.0.1:9100</a></h4><p><img src="https://gitee.com/dbin0123/picgo/raw/master/image/20210405122441.png" alt="Head插件启动"></p><h4 id="ES配置跨域访问"><a href="#ES配置跨域访问" class="headerlink" title="ES配置跨域访问"></a>ES配置跨域访问</h4><p>在elasticsearch中启用CORS</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">http.cors.enabled: true<br>http.cors.allow-origin: &quot;*&quot;<br></code></pre></td></tr></table></figure><p>需要身份认证链接</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">http:/127.0.0.1:9100?auth_user=elastic&amp;auth_password=pwd<br></code></pre></td></tr></table></figure><ul><li>base_uri 强制elasticsearch-head连接到特定节点。</li><li>dashboard实验性功能，以适合仪表板&#x2F;散热器的模式打开elasticsearch-head。接受一个参数dashboard&#x3D;cluster</li><li>auth_user向http请求添加基本身份验证凭据（需要elasticsearch-http-basic插件或反向代理）</li><li>auth_password如上所述的基本身份验证密码（注意：没有其他安全层，密码将通过网络以明文形式发送）</li><li>lang 强制elasticsearch-head使用指定的ui语言（例如：en，fr，pt，zh，​​zh-TW，tr，ja）</li></ul>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
          <category> 插件安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch Head插件 ES </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年03月25日 JfreeChar</title>
      <link href="/2021/03/23/2021/202103/2021-03-25-JfreeChar_101/"/>
      <url>/2021/03/23/2021/202103/2021-03-25-JfreeChar_101/</url>
      
        <content type="html"><![CDATA[<h4 id="jfreechat使用"><a href="#jfreechat使用" class="headerlink" title="jfreechat使用"></a>jfreechat使用</h4><blockquote><p>快速入门参考(<a href="http://www.jfree.org/jfreechart/jfreechart-demo-1.5.2-jar-with-dependencies.jar">jfreechart-demo-1.5.2-jar-with-dependencies.jar</a>)使用</p></blockquote><p>使用步骤</p><ul><li>java -jar jfreechart-demo-1.5.2-jar-with-dependencies.jar</li><li>找到适合的图表类</li><li>使用反编译软件打开jfreechart-demo-1.5.2-jar-with-dependencies.jar</li><li>反编译图表类即可查看源代码(一般在<code>org.jfree.chart.demo</code>中)</li></ul><h5 id="中文乱码问题"><a href="#中文乱码问题" class="headerlink" title="中文乱码问题"></a>中文乱码问题</h5><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Common</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Font</span> <span class="hljs-variable">ITEXTPDF_FONT_8</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Font</span> <span class="hljs-variable">ITEXTPDF_FONT_BOLD8_WHITE</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> java.awt.<span class="hljs-type">Font</span> <span class="hljs-variable">AWT_FONT_12</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> java.awt.<span class="hljs-type">Font</span> <span class="hljs-variable">AWT_FONT_20</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">BaseFont</span> <span class="hljs-variable">BASE_FONT</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Color</span> <span class="hljs-variable">COLOR_81_81_81</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Color</span> <span class="hljs-variable">COLOR_85_85_85</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Color</span> <span class="hljs-variable">COLOR_90_90_90</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Color</span> <span class="hljs-variable">COLOR_51_51_51</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Color</span> <span class="hljs-variable">COLOR_8_55_114</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Color</span> <span class="hljs-variable">COLOR_72_118_202</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Color</span> <span class="hljs-variable">COLOR_104_104_104</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Color</span> <span class="hljs-variable">COLOR_192_208_224</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Color</span> <span class="hljs-variable">COLOR_192_192_192</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">BaseColor</span> <span class="hljs-variable">BASE_COLOR_91_155_213</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">BaseColor</span> <span class="hljs-variable">BASE_COLOR_221_235_247</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">BaseColor</span> <span class="hljs-variable">BASE_COLOR_155_194_230</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">//加载自定义字体文件</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//加载自定义字体文件</span><br>            resource = OperationDailyServiceImpl.class.getResource(<span class="hljs-string">&quot;/static/font/simsun.ttf&quot;</span>).getPath();<br>            <span class="hljs-comment">//pdf字体</span><br>            BASE_FONT = BaseFont.createFont(resource, BaseFont.IDENTITY_H, BaseFont.EMBEDDED);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        &#125;<br>        <span class="hljs-comment">//java字体</span><br>        AWT_FONT_12 = FontUtils.getSelfDefinedFont(resource, <span class="hljs-number">12</span>);<br>        AWT_FONT_20 = FontUtils.getSelfDefinedFont(resource, <span class="hljs-number">20</span>);<br>        ITEXTPDF_FONT_8 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Font</span>(BASE_FONT, <span class="hljs-number">8</span>, Font.NORMAL);<br>        ITEXTPDF_FONT_BOLD8_WHITE = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Font</span>(BASE_FONT, <span class="hljs-number">8</span>, Font.BOLD);<br>        ITEXTPDF_FONT_BOLD8_WHITE.setColor(BaseColor.WHITE);<br>        <span class="hljs-comment">//颜色处理</span><br>        COLOR_90_90_90 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>(<span class="hljs-number">90</span>, <span class="hljs-number">90</span>, <span class="hljs-number">90</span>);<br>        COLOR_81_81_81 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>(<span class="hljs-number">81</span>, <span class="hljs-number">81</span>, <span class="hljs-number">81</span>);<br>        COLOR_85_85_85 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>(<span class="hljs-number">85</span>, <span class="hljs-number">85</span>, <span class="hljs-number">85</span>);<br>        COLOR_51_51_51 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>(<span class="hljs-number">51</span>, <span class="hljs-number">51</span>, <span class="hljs-number">51</span>);<br>        COLOR_8_55_114 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>(<span class="hljs-number">8</span>, <span class="hljs-number">55</span>, <span class="hljs-number">114</span>);<br>        COLOR_72_118_202 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>(<span class="hljs-number">72</span>, <span class="hljs-number">118</span>, <span class="hljs-number">202</span>);<br>        COLOR_192_208_224 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>(<span class="hljs-number">192</span>, <span class="hljs-number">208</span>, <span class="hljs-number">224</span>);<br>        COLOR_192_192_192 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>(<span class="hljs-number">192</span>, <span class="hljs-number">192</span>, <span class="hljs-number">192</span>);<br>        COLOR_104_104_104 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Color</span>(<span class="hljs-number">104</span>, <span class="hljs-number">104</span>, <span class="hljs-number">104</span>);<br>        BASE_COLOR_91_155_213 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseColor</span>(<span class="hljs-number">91</span>, <span class="hljs-number">155</span>, <span class="hljs-number">213</span>);<br>        BASE_COLOR_221_235_247 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseColor</span>(<span class="hljs-number">221</span>, <span class="hljs-number">235</span>, <span class="hljs-number">247</span>);<br>        BASE_COLOR_155_194_230 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BaseColor</span>(<span class="hljs-number">155</span>, <span class="hljs-number">194</span>, <span class="hljs-number">230</span>);<br>        <span class="hljs-comment">// 设置中文主题样式 解决乱码</span><br>        <span class="hljs-type">StandardChartTheme</span> <span class="hljs-variable">chartTheme</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardChartTheme</span>(<span class="hljs-string">&quot;CN&quot;</span>);<br>        <span class="hljs-comment">// 设置标题字体</span><br>        chartTheme.setExtraLargeFont(Common.AWT_FONT_20);<br>        <span class="hljs-comment">// 设置图例的字体</span><br>        chartTheme.setRegularFont(Common.AWT_FONT_12);<br>        <span class="hljs-comment">// 设置轴向的字体</span><br>        chartTheme.setLargeFont(Common.AWT_FONT_12);<br>        chartTheme.setSmallFont(Common.AWT_FONT_12);<br>        chartTheme.setTitlePaint(Color.white);<br>        chartTheme.setSubtitlePaint(Common.COLOR_85_85_85);<br><br>        <span class="hljs-comment">// 设置标注</span><br>        chartTheme.setLegendBackgroundPaint(Common.COLOR_81_81_81);<br>        chartTheme.setLegendItemPaint(Color.WHITE);<br>        chartTheme.setChartBackgroundPaint(Common.COLOR_81_81_81);<br><br>        Paint[] OUTLINE_PAINT_SEQUENCE = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Paint</span>[]&#123;Color.WHITE&#125;;<br>        <span class="hljs-comment">// 绘制器颜色源</span><br>        <span class="hljs-type">DefaultDrawingSupplier</span> <span class="hljs-variable">drawingSupplier</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DefaultDrawingSupplier</span>(ChartUtils.CHART_COLORS, ChartUtils.CHART_COLORS, OUTLINE_PAINT_SEQUENCE,<br>                DefaultDrawingSupplier.DEFAULT_STROKE_SEQUENCE, DefaultDrawingSupplier.DEFAULT_OUTLINE_STROKE_SEQUENCE,<br>                DefaultDrawingSupplier.DEFAULT_SHAPE_SEQUENCE);<br>        chartTheme.setDrawingSupplier(drawingSupplier);<br>        <span class="hljs-comment">// Y坐标轴水平网格颜色</span><br>        chartTheme.setRangeGridlinePaint(Color.white);<br><br>        chartTheme.setBaselinePaint(Color.WHITE);<br>        <span class="hljs-comment">// 不确定含义</span><br>        chartTheme.setCrosshairPaint(Color.BLUE);<br>        <span class="hljs-comment">// 坐标轴标题文字颜色</span><br>        chartTheme.setAxisLabelPaint(Color.white);<br>        <span class="hljs-comment">// 刻度数字</span><br>        chartTheme.setTickLabelPaint(Color.white);<br>        <span class="hljs-comment">// 设置柱状图渲染</span><br>        chartTheme.setBarPainter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardBarPainter</span>());<br>        <span class="hljs-comment">// XYBar 渲染</span><br>        chartTheme.setXYBarPainter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StandardXYBarPainter</span>());<br>        ChartFactory.setChartTheme(chartTheme);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="JFreeChart方法描述"><a href="#JFreeChart方法描述" class="headerlink" title="JFreeChart方法描述"></a>JFreeChart方法描述</h5><ul><li>jFreeChart.getTitle() 设置标题大小字体颜色等<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">TextTitle</span> <span class="hljs-variable">title</span> <span class="hljs-operator">=</span> jFreeChart.getTitle();<br>title.setPaint(Color.white);<br>title.setFont(Common.AWT_FONT_20);<br></code></pre></td></tr></table></figure></li><li>jFreeChart.getLegend() 这张图例数据(该方法有重载方法)<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">LegendTitle</span> <span class="hljs-variable">legend</span> <span class="hljs-operator">=</span> jFreeChart.getLegend();<br>legend.setBorder(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br>legend.setBackgroundPaint(Common.COLOR_81_81_81);<br></code></pre></td></tr></table></figure></li><li>jFreeChart.getPlot() 返回图表的图<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">CategoryPlot</span> <span class="hljs-variable">categoryPlot</span> <span class="hljs-operator">=</span> (CategoryPlot) jFreeChart.getPlot();<br></code></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 图表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 图表 </tag>
            
            <tag> JfreeChar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年03月20日 稀疏数组</title>
      <link href="/2021/03/20/2021/202103/2021-03-20-ARRAY_SparseArray_101/"/>
      <url>/2021/03/20/2021/202103/2021-03-20-ARRAY_SparseArray_101/</url>
      
        <content type="html"><![CDATA[<h4 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h4><h5 id="什么是稀疏数组"><a href="#什么是稀疏数组" class="headerlink" title="什么是稀疏数组?"></a>什么是稀疏数组?</h5><p>矩阵(二维数组)中(非零&#x2F;非空&#x2F;不相似值)元素的个数远远小于矩阵元素的总数，并且(非零&#x2F;非空&#x2F;不相似值)元素的分布没有规律，通常认为矩阵中(非零&#x2F;非空&#x2F;不相似值)元素的总数比上矩阵所有元素总数的值小于等于0.05时，则称该矩阵为稀疏矩阵(sparse matrix)，该比值称为这个矩阵的稠密度;</p><h5 id="稀疏数组数据结构"><a href="#稀疏数组数据结构" class="headerlink" title="稀疏数组数据结构"></a>稀疏数组数据结构</h5><ol><li>第一行记录数组行数、列数和有多少个值。</li><li>把具有不同值得元素依次记录在后面，依次记录行号，列号，值。</li></ol><h5 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.lang.reflect.Array;<br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> : SparseArray</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : 稀疏数组</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : dbin0123</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2021-03-20 20:03</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SparseArray</span> &#123;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 二维数组转稀疏数组(转换)</span><br><span class="hljs-comment">     * 要求对象必须实现hashcode equals方法</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> array</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Object</span>&gt; Object[][] toSparseArray(T[][] array, T commonalityData) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == array || array.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;原数组对象/数据不能为空&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sparseArrayRowNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (Object[] dataRow : array) &#123;<br>            <span class="hljs-keyword">for</span> (Object data : dataRow) &#123;<br>                <span class="hljs-keyword">if</span> (!Objects.equals(data, commonalityData)) &#123;<br>                    sparseArrayRowNum++;<br>                &#125;<br>            &#125;<br>        &#125;<br>        Object[][] arrayObject = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[sparseArrayRowNum + <span class="hljs-number">1</span>][<span class="hljs-number">3</span>];<br>        arrayObject[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = array.length;<br>        arrayObject[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = array[<span class="hljs-number">0</span>].length;<br>        arrayObject[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = sparseArrayRowNum;<br>        <span class="hljs-comment">//保存数据至稀疏数组中</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">indxe</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i1 &lt; array[i].length; i1++) &#123;<br>                <span class="hljs-keyword">if</span> (!Objects.equals(array[i][i1], commonalityData)) &#123;<br>                    indxe++;<br>                    arrayObject[indxe][<span class="hljs-number">0</span>] = i;<br>                    arrayObject[indxe][<span class="hljs-number">1</span>] = i1;<br>                    arrayObject[indxe][<span class="hljs-number">2</span>] = array[i][i1];<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> arrayObject;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 稀疏数组转二维数组(还原)</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sparseArray</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fullData</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> clazz</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &lt;T&gt;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Object</span>&gt; T[][] restoreArray(Object[][] sparseArray, T fullData, Class&lt;T&gt; clazz) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == sparseArray || sparseArray.length &lt; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;sparseArray不能为空&quot;</span>);<br>        &#125;<br>        T[][] arr = (T[][]) Array.newInstance(clazz, (Integer) sparseArray[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>], (Integer) sparseArray[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]);<br>        <span class="hljs-comment">//填充数据</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i1 &lt; arr[i].length; i1++) &#123;<br>                arr[i][i1] = fullData;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; sparseArray.length; i++) &#123;<br>            arr[(Integer) sparseArray[i][<span class="hljs-number">0</span>]][(Integer) sparseArray[i][<span class="hljs-number">1</span>]] = (T) sparseArray[i][<span class="hljs-number">2</span>];<br>        &#125;<br>        <span class="hljs-keyword">return</span> arr;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Persion[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Persion</span>[<span class="hljs-number">10</span>][<span class="hljs-number">10</span>];<br>        arr[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Persion</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">10</span>);<br>        arr[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Persion</span>(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-number">10</span>);<br>        arr[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Persion</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">10</span>);<br>        arr[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Persion</span>(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-number">10</span>);<br>        System.out.println(<span class="hljs-string">&quot;原数据:&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr[i].length; j++) &#123;<br>                System.out.print(arr[i][j] + <span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;稀疏数组:&quot;</span>);<br>        Object[][] objects = SparseArray.toSparseArray(arr, <span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; objects.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; objects[i].length; j++) &#123;<br>                System.out.print(objects[i][j] + <span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;还原数据:&quot;</span>);<br>        Persion[][] objects1 = SparseArray.restoreArray(objects, <span class="hljs-literal">null</span>, Persion.class);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; objects1.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; objects1[i].length; j++) &#123;<br>                System.out.print(objects1[i][j] + <span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Persion</span> &#123;<br>        String name;<br>        Integer age;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Persion</span><span class="hljs-params">()</span> &#123;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Persion</span><span class="hljs-params">(String name, Integer age)</span> &#123;<br>            <span class="hljs-built_in">this</span>.name = name;<br>            <span class="hljs-built_in">this</span>.age = age;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123;&quot;</span> +<br>                    <span class="hljs-string">&quot;name:&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                    <span class="hljs-string">&quot;, age:&quot;</span> + age +<br>                    <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (o == <span class="hljs-literal">null</span> || getClass() != o.getClass()) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-type">Persion</span> <span class="hljs-variable">persion</span> <span class="hljs-operator">=</span> (Persion) o;<br>            <span class="hljs-keyword">return</span> Objects.equals(name, persion.name) &amp;&amp; Objects.equals(age, persion.age);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> Objects.hash(name, age);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>运行结果</p></blockquote><figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">原数据:<br>nullnullnullnullnullnullnullnullnullnull<br>nullnull&#123;name:&#x27;1&#x27;, age:10&#125;nullnullnullnullnullnullnull<br>nullnull&#123;name:&#x27;2&#x27;, age:10&#125;&#123;name:&#x27;1&#x27;, age:10&#125;nullnullnullnullnullnull<br>nullnullnull&#123;name:&#x27;2&#x27;, age:10&#125;nullnullnullnullnullnull<br>nullnullnullnullnullnullnullnullnullnull<br>nullnullnullnullnullnullnullnullnullnull<br>nullnullnullnullnullnullnullnullnullnull<br>nullnullnullnullnullnullnullnullnullnull<br>nullnullnullnullnullnullnullnullnullnull<br>nullnullnullnullnullnullnullnullnullnull<br>稀疏数组:<br>10104<br>12&#123;name:&#x27;1&#x27;, age:10&#125;<br>22&#123;name:&#x27;2&#x27;, age:10&#125;<br>23&#123;name:&#x27;1&#x27;, age:10&#125;<br>33&#123;name:&#x27;2&#x27;, age:10&#125;<br>还原数据:<br>nullnullnullnullnullnullnullnullnullnull<br>nullnull&#123;name:&#x27;1&#x27;, age:10&#125;nullnullnullnullnullnullnull<br>nullnull&#123;name:&#x27;2&#x27;, age:10&#125;&#123;name:&#x27;1&#x27;, age:10&#125;nullnullnullnullnullnull<br>nullnullnull&#123;name:&#x27;2&#x27;, age:10&#125;nullnullnullnullnullnull<br>nullnullnullnullnullnullnullnullnullnull<br>nullnullnullnullnullnullnullnullnullnull<br>nullnullnullnullnullnullnullnullnullnull<br>nullnullnullnullnullnullnullnullnullnull<br>nullnullnullnullnullnullnullnullnullnull<br>nullnullnullnullnullnullnullnullnullnull<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 数组 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数组 </tag>
            
            <tag> 稀疏数组 </tag>
            
            <tag> 数据压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年03月16日 《SQL MVCC》 MVCC 理解</title>
      <link href="/2021/03/16/2021/202103/2021-03-16-SQL_MVCC_101/"/>
      <url>/2021/03/16/2021/202103/2021-03-16-SQL_MVCC_101/</url>
      
        <content type="html"><![CDATA[<h4 id="MYSQL-MVCC"><a href="#MYSQL-MVCC" class="headerlink" title="MYSQL MVCC"></a>MYSQL MVCC</h4><h5 id="什么是MVCC"><a href="#什么是MVCC" class="headerlink" title="什么是MVCC?"></a>什么是MVCC?</h5><p>MVCC，全称Multi-Version Concurrency Control，即多版本并发控制。MVCC是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问，在编程语言中实现事务内存。</p><h5 id="相关术语解释"><a href="#相关术语解释" class="headerlink" title="相关术语解释"></a>相关术语解释</h5><ul><li>隐式字段 <blockquote><p>MYSQL除了我们创建表设计的字段外,还隐式定义的DB_TRX_ID,DB_ROLL_PTR,DB_ROW_ID等字段;</p></blockquote></li></ul><ol><li>DB_TRX_ID(6byte)，最近修改(修改&#x2F;插入)事务ID：记录创建这条记录&#x2F;最后一次修改该记录的事务ID</li><li>DB_ROLL_PTR(7byte)，回滚指针，指向这条记录的上一个版本（存储于rollback segment里）</li><li>DB_ROW_ID(6byte)，隐含的自增ID（隐藏主键），如果数据表没有主键，InnoDB会自动以DB_ROW_ID产生一个聚簇索引</li></ol><ul><li>read-view<blockquote><p>Read View就是事务进行快照读操作的时候生产的读视图(Read View)(可重复读是针对每个Collection)，在该事务执行的快照读的那一刻，会生成数据库系统当前的一个快照，记录并维护系统当前活跃事务的ID(当每个事务开启时，都会被分配一个ID, 这个ID是递增的，所以最新的事务，ID值越大)</p></blockquote></li></ul><h5 id="MYSQL-MVCC查询规则"><a href="#MYSQL-MVCC查询规则" class="headerlink" title="MYSQL MVCC查询规则"></a>MYSQL MVCC查询规则</h5><p>当执行查询sql时会生成一致性视图read-view(针对每个Collection)， 它由执行查询时所有未提交事务id数组(数组里最小的id为mini d) 和已创建的最大事务id(max id) 组成， 查询的数据结果需要跟read-view做比对从而得到快照结果<br>版本链比对规则：</p><ol><li>如果落在绿色部分(trx id&lt;min_id) ， 表示这个版本是已提交的事务生成的， 这个数据是可见的;</li><li>如果落在红色部分(trx_id&gt;max_id) ， 表示这个版本是由将来启动的事务生成的， 是肯定不可见的；</li><li>如果落在黄色部分(mini d&lt;&#x3D;trx id&lt;&#x3D;max id) ， 那就包括两种情况<ul><li>若row的trx_id在数组中， 表示这个版本是由还没提交的事务生成的， 不可见， 当前自己的事务是可见的；</li><li>若row的trx_id不在数组中， 表示这个版本是已经提交了的事务生成的， 可见。</li></ul></li></ol><blockquote><p>对于删除的情况可以认为是update的特殊情况， 会将版本链上最新的数据复制一份， 然后将trx_id修改成删除操作的trx_id， 同时在该条记录的头信息(record_header) 里的(deleted_flag) 标记位写上true， 来表示当前记录已经被删除， 在查询时按照上面的规则查到对应的记录如果delete_flag标记位为true， 意味着记录已被删除， 则不返回数据。</p></blockquote><p><img src="http://dbin0123.github.io/images/posts/mysql/101/mysql_mvcc%E6%9F%A5%E8%AF%A2%E8%A7%84%E5%88%99.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql MVCC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年03月10日 《深入浅出 Java 多线程》第二篇 工具-阻塞队列(BlockingQueue)</title>
      <link href="/2021/03/10/2021/202103/2021-03-10-java_thread_303/"/>
      <url>/2021/03/10/2021/202103/2021-03-10-java_thread_303/</url>
      
        <content type="html"><![CDATA[<h4 id="阻塞队列-BlockingQueue"><a href="#阻塞队列-BlockingQueue" class="headerlink" title="阻塞队列(BlockingQueue)"></a>阻塞队列(BlockingQueue)</h4><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p>BlockingQueue是Java util.concurrent包下重要的数据结构，区别于普通的队列，BlockingQueue提供了线程安全的队列访问方式，并发包下很多高级同步类的实现都是基于BlockingQueue实现的。</p><blockquote><p>BlockingQueue一般用于生产者-消费者模式，生产者是往队列里添加元素的线程，消费者是从队列里拿元素的线程。BlockingQueue就是存放元素的容器。</p></blockquote><p>BlockingQueue 是一个接口，继承自 Queue，所以其实现类也可以作为 Queue 的实现来使用，而 Queue 又继承自 Collection 接口。下面是 BlockingQueue 的相关实现类：</p><h5 id="BlockingQueue的操作方法"><a href="#BlockingQueue的操作方法" class="headerlink" title="BlockingQueue的操作方法"></a>BlockingQueue的操作方法</h5><p>阻塞队列提供了四组不同的方法用于插入、移除、检查元素：</p><table><thead><tr><th>方法\处理方式</th><th>抛出异常</th><th>返回特殊值</th><th>一直阻塞</th><th>超时退出</th></tr></thead><tbody><tr><td>插入方法</td><td>add(e)</td><td>offer(e)</td><td>put(e)</td><td>offer(e,time,unit)</td></tr><tr><td>移除方法</td><td>remove()</td><td>poll()</td><td>take()</td><td>poll(time,unit)</td></tr><tr><td>检查方法</td><td>element()</td><td>peek()</td><td>-</td><td>-</td></tr></tbody></table><ul><li>抛出异常：如果试图的操作无法立即执行，抛异常。当阻塞队列满时候，再往队列里插入元素，会抛出IllegalStateException(“Queue full”)异常。当队列为空时，从队列里获取元素时会抛出NoSuchElementException异常 。</li><li>返回特殊值：如果试图的操作无法立即执行，返回一个特殊值，通常是true &#x2F; false。</li><li>一直阻塞：如果试图的操作无法立即执行，则一直阻塞或者响应中断。</li><li>超时退出：如果试图的操作无法立即执行，该方法调用将会发生阻塞，直到能够执行，但等待时间不会超过给定值。返回一个特定值以告知该操作是否成功，通常是 true &#x2F; false。</li></ul><blockquote><p>注意之处</p><ul><li><strong>不能往阻塞队列中插入null</strong>,会抛出空指针异常。</li><li>可以访问阻塞队列中的任意元素，调用<strong>remove(o)<strong>可以将队列之中的特定对象移除，但并</strong>不高效</strong>，尽量避免使用。</li></ul></blockquote><p>相关实现类<br><img src="http://dbin0123.github.io/images/posts/thread/206/BlockingQueur%E5%AE%9E%E7%8E%B0%E7%B1%BB.png" alt="image"></p><h5 id="实现类介绍"><a href="#实现类介绍" class="headerlink" title="实现类介绍"></a>实现类介绍</h5><h6 id="ArrayBlockingQueue-由数组结构组成的有界阻塞队列。底层采用数组来实现。"><a href="#ArrayBlockingQueue-由数组结构组成的有界阻塞队列。底层采用数组来实现。" class="headerlink" title="ArrayBlockingQueue (由数组结构组成的有界阻塞队列。底层采用数组来实现。)"></a>ArrayBlockingQueue (由数组结构组成的有界阻塞队列。底层采用数组来实现。)</h6><blockquote><p>ArrayBlockingQueue 一旦创建，容量不能改变。其并发控制采用可重入锁来控制，不管是插入操作还是读取操作，都需要获取到锁才能进行操作。当队列容量满时，尝试将元素放入队列将导致操作阻塞;尝试从一个空队列中取一个元素也会同样阻塞。</p></blockquote><ul><li>构造方法<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"><br>/**<br> * 容量和默认访问策略。<br> *<br> * @param capacity the capacity of this queue<br> * @throws IllegalArgumentException if &#123;@code capacity &lt; 1&#125;<br> */<br>public ArrayBlockingQueue(int capacity) &#123;<br>    this(capacity, false);<br>&#125;<br><br>/**<br> * 容量和指定的访问策略。<br> *<br> * @param 这个队列的容量<br> * @param 如果&#123;@code false&#125;未指定访问顺序。默认false ( 默认情况下不能保证线程访问队列的公平性)<br> * @throws IllegalArgumentException if &#123;@code capacity &lt; 1&#125;<br> */<br>public ArrayBlockingQueue(int capacity, boolean fair) &#123;<br>    // ......<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>公平性是指严格按照线程等待的绝对时间顺序, <strong>如果要保证公正性fair传入true即可</strong></p><h6 id="LinkedBlockingQueue-链表结构组成的有界阻塞队列-底层基于单向链表实现"><a href="#LinkedBlockingQueue-链表结构组成的有界阻塞队列-底层基于单向链表实现" class="headerlink" title="LinkedBlockingQueue 链表结构组成的有界阻塞队列,  底层基于单向链表实现"></a>LinkedBlockingQueue 链表结构组成的有界阻塞队列,  底层基于单向链表实现</h6><blockquote><p>LinkedBlockingQueue可以当做无界队列也可以当做有界队列来使用，同样满足 FIFO 的特性，与 ArrayBlockingQueue 相比起来具有更高的吞吐量，为了防止 LinkedBlockingQueue 容量迅速增，损耗大量内存。通常在创建 LinkedBlockingQueue 对象时，会指定其大小，如果未指定，容量等于 Integer.MAX_VALUE</p></blockquote><ul><li>构造方法<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *某种意义上的无界队列</span><br><span class="hljs-comment"> * Creates a &#123;<span class="hljs-doctag">@code</span> LinkedBlockingQueue&#125; with a capacity of</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> Integer#MAX_VALUE&#125;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">LinkedBlockingQueue</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">this</span>(Integer.MAX_VALUE);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *有界队列</span><br><span class="hljs-comment"> * Creates a &#123;<span class="hljs-doctag">@code</span> LinkedBlockingQueue&#125; with the given (fixed) capacity.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> capacity the capacity of this queue</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IllegalArgumentException if &#123;<span class="hljs-doctag">@code</span> capacity&#125; is not greater</span><br><span class="hljs-comment"> *         than zero</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">LinkedBlockingQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> capacity)</span> &#123;<br>    <span class="hljs-keyword">if</span> (capacity &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br>    <span class="hljs-built_in">this</span>.capacity = capacity;<br>    last = head = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>&lt;E&gt;(<span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h6 id="DelayQueue-延迟队列"><a href="#DelayQueue-延迟队列" class="headerlink" title="DelayQueue 延迟队列"></a>DelayQueue 延迟队列</h6><blockquote><p>该队列中的元素只有当其指定的延迟时间到了，才能够从队列中获取到该元素 。注入其中的元素必须实现 java.util.concurrent.Delayed 接口。<br>DelayQueue是一个没有大小限制的队列，因此往队列中插入数据的操作（生产者）永远不会被阻塞，而只有获取数据的操作（消费者）才会被阻塞。 </p></blockquote><h6 id="PriorityQueue-优先队列-支持放入元素的顺序-线程非安全"><a href="#PriorityQueue-优先队列-支持放入元素的顺序-线程非安全" class="headerlink" title="PriorityQueue 优先队列 支持放入元素的顺序 线程非安全"></a>PriorityQueue 优先队列 支持放入元素的顺序 线程非安全</h6><h6 id="PriorityBlockingQueue-优先阻止队列-支持放入元素的顺序-线程安全"><a href="#PriorityBlockingQueue-优先阻止队列-支持放入元素的顺序-线程安全" class="headerlink" title="PriorityBlockingQueue 优先阻止队列 支持放入元素的顺序, 线程安全"></a>PriorityBlockingQueue 优先阻止队列 支持放入元素的顺序, 线程安全</h6><p><strong>PriorityBlockingQueue 如果空间不够的话会自动扩容</strong></p><blockquote><p>基于优先级的无界阻塞队列（优先级的判断通过构造函数传入的Compator对象来决定），内部控制线程同步的锁采用的是非公平锁。</p></blockquote><h6 id="SynchronousQueue-同步队列-没有容量大小的队列"><a href="#SynchronousQueue-同步队列-没有容量大小的队列" class="headerlink" title="SynchronousQueue 同步队列 没有容量大小的队列"></a>SynchronousQueue 同步队列 没有容量大小的队列</h6><p>这个队列比较特殊，没有任何内部容量，甚至连一个队列的容量都没有。并且每个 put 必须等待一个 take，反之亦然。</p><p>需要区别容量为1的ArrayBlockingQueue、LinkedBlockingQueue。</p><p>以下方法的返回值，可以帮助理解这个队列：</p><ul><li>iterator() 永远返回空，因为里面没有东西</li><li>peek() 永远返回null</li><li>put() 往queue放进去一个element以后就一直wait直到有其他thread进来把这个element取走。</li><li>offer() 往queue里放一个element后立即返回，如果碰巧这个element被另一个thread取走了，offer方法返回true，认为offer成功；否则返回false。</li><li>take() 取出并且remove掉queue里的element，取不到东西他会一直等。</li><li>poll() 取出并且remove掉queue里的element，只有到碰巧另外一个线程正在往queue里offer数据或者put数据的时候，该方法才会取到东西。否则立即返回null。</li><li>isEmpty() 永远返回true</li><li>remove()&amp;removeAll() 永远返回false</li></ul><h6 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h6><p><strong>PriorityBlockingQueue不会阻塞数据生产者（因为队列是无界的），而只会在没有可消费的数据时，阻塞数据的消费者。因此使用的时候要特别注意，生产者生产数据的速度绝对不能快于消费者消费数据的速度，否则时间一长，会最终耗尽所有的可用堆内存空间。对于使用默认大小的LinkedBlockingQueue也是一样的。</strong></p><h5 id="阻塞队列的原理-利用Lock锁的多条件（Condition）阻塞控制"><a href="#阻塞队列的原理-利用Lock锁的多条件（Condition）阻塞控制" class="headerlink" title="阻塞队列的原理 (利用Lock锁的多条件（Condition）阻塞控制)"></a>阻塞队列的原理 (利用Lock锁的多条件（Condition）阻塞控制)</h5><h5 id="ArrayBlockingQueue-解析"><a href="#ArrayBlockingQueue-解析" class="headerlink" title="ArrayBlockingQueue 解析"></a>ArrayBlockingQueue 解析</h5><ul><li>属性<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//数据元素数组</span><br><span class="hljs-keyword">final</span> Object[] items;<br><span class="hljs-comment">//下一个待取出元素索引</span><br><span class="hljs-type">int</span> takeIndex;<br><span class="hljs-comment">//下一个待添加元素索引</span><br><span class="hljs-type">int</span> putIndex;<br><span class="hljs-comment">//元素个数</span><br><span class="hljs-type">int</span> count;<br><span class="hljs-comment">//内部锁</span><br><span class="hljs-keyword">final</span> ReentrantLock lock;<br><span class="hljs-comment">//消费者监视器</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Condition notEmpty;<br><span class="hljs-comment">//生产者监视器</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Condition notFull;  <br></code></pre></td></tr></table></figure></li></ul><p>put操作</p><p>总结put的流程：</p><ul><li>所有执行put操作的线程竞争lock锁，拿到了lock锁的线程进入下一步，没有拿到lock锁的线程自旋竞争锁。</li><li>判断阻塞队列是否满了，如果满了，则调用await方法阻塞这个线程，并标记为notFull（生产者）线程，同时释放lock锁,等待被消费者线程唤醒。</li><li>如果没有满，则调用enqueue方法将元素put进阻塞队列。注意这一步的线程还有一种情况是第二步中阻塞的线程被唤醒且又拿到了lock锁的线程。</li><li>唤醒一个标记为notEmpty（消费者）的线程。<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">put</span><span class="hljs-params">(E e)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-comment">//判断元素是否为空</span><br>    checkNotNull(e);<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>    <span class="hljs-comment">// 1.自旋拿锁</span><br>    lock.lockInterruptibly();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 2.判断队列是否满了</span><br>        <span class="hljs-keyword">while</span> (count == items.length)<br>            <span class="hljs-comment">// 2.1如果满了，阻塞该线程，并标记为notFull线程，</span><br>            <span class="hljs-comment">// 等待notFull的唤醒，唤醒之后继续执行while循环。</span><br>            notFull.await();<br>        <span class="hljs-comment">// 3.如果没有满，则进入队列</span><br>        enqueue(e);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">enqueue</span><span class="hljs-params">(E x)</span> &#123;<br>    <span class="hljs-comment">// assert lock.getHoldCount() == 1;</span><br>    <span class="hljs-comment">// assert items[putIndex] == null;</span><br>    <span class="hljs-keyword">final</span> Object[] items = <span class="hljs-built_in">this</span>.items;<br>    items[putIndex] = x;<br>    <span class="hljs-keyword">if</span> (++putIndex == items.length)<br>        putIndex = <span class="hljs-number">0</span>;<br>    count++;<br>    <span class="hljs-comment">// 4 唤醒一个等待的线程</span><br>    notEmpty.signal();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>tack操作</p><p>take操作的流程：</p><ul><li>所有执行take操作的线程竞争lock锁，拿到了lock锁的线程进入下一步，没有拿到lock锁的线程自旋竞争锁。</li><li>判断阻塞队列是否为空，如果是空，则调用await方法阻塞这个线程，并标记为notEmpty（消费者）线程，同时释放lock锁,等待被生产者线程唤醒。</li><li>如果没有空，则调用dequeue方法。注意这一步的线程还有一种情况是第二步中阻塞的线程被唤醒且又拿到了lock锁的线程。</li><li>唤醒一个标记为notFull（生产者）的线程。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> E <span class="hljs-title function_">take</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.lock;<br>    lock.lockInterruptibly();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">while</span> (count == <span class="hljs-number">0</span>)<br>            notEmpty.await();<br>        <span class="hljs-keyword">return</span> dequeue();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">private</span> E <span class="hljs-title function_">dequeue</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// assert lock.getHoldCount() == 1;</span><br>    <span class="hljs-comment">// assert items[takeIndex] != null;</span><br>    <span class="hljs-keyword">final</span> Object[] items = <span class="hljs-built_in">this</span>.items;<br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-type">E</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> (E) items[takeIndex];<br>    items[takeIndex] = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (++takeIndex == items.length)<br>        takeIndex = <span class="hljs-number">0</span>;<br>    count--;<br>    <span class="hljs-keyword">if</span> (itrs != <span class="hljs-literal">null</span>)<br>        itrs.elementDequeued();<br>    notFull.signal();<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意</p><ul><li>put和take操作都需要先获取锁，没有获取到锁的线程会被挡在第一道大门之外自旋拿锁，直到获取到锁。</li><li>就算拿到锁了之后，也不一定会顺利进行put&#x2F;take操作，需要判断队列是否可用（是否满&#x2F;空），如果不可用，则会被阻塞，并释放锁。</li><li>在第2点被阻塞的线程会被唤醒，但是在唤醒之后，依然需要拿到锁才能继续往下执行，否则，自旋拿锁，拿到锁了再while判断队列是否可用（这也是为什么不用if判断，而使用while判断的原因）。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 队列 </tag>
            
            <tag> BlockingQueue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年03月09日 SM2国密加解密工具类(前端使用CryptoJS v3.1.2, 后端 bcprov-jdk15on:1.68)</title>
      <link href="/2021/03/09/2021/202103/2021-03-09-safe_sm2_101/"/>
      <url>/2021/03/09/2021/202103/2021-03-09-safe_sm2_101/</url>
      
        <content type="html"><![CDATA[<h4 id="版本1"><a href="#版本1" class="headerlink" title="版本1"></a>版本1</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> org.bouncycastle.crypto.CipherParameters;<br><span class="hljs-keyword">import</span> org.bouncycastle.crypto.InvalidCipherTextException;<br><span class="hljs-keyword">import</span> org.bouncycastle.crypto.engines.SM2Engine;<br><span class="hljs-keyword">import</span> org.bouncycastle.crypto.params.ECPrivateKeyParameters;<br><span class="hljs-keyword">import</span> org.bouncycastle.crypto.params.ECPublicKeyParameters;<br><span class="hljs-keyword">import</span> org.bouncycastle.crypto.params.ParametersWithRandom;<br><span class="hljs-keyword">import</span> org.bouncycastle.jcajce.provider.asymmetric.util.ECUtil;<br><span class="hljs-keyword">import</span> org.bouncycastle.jce.provider.BouncyCastleProvider;<br><span class="hljs-keyword">import</span> org.bouncycastle.util.encoders.Hex;<br><br><span class="hljs-keyword">import</span> java.nio.charset.Charset;<br><span class="hljs-keyword">import</span> java.security.InvalidKeyException;<br><span class="hljs-keyword">import</span> java.security.KeyFactory;<br><span class="hljs-keyword">import</span> java.security.KeyPair;<br><span class="hljs-keyword">import</span> java.security.KeyPairGenerator;<br><span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;<br><span class="hljs-keyword">import</span> java.security.PrivateKey;<br><span class="hljs-keyword">import</span> java.security.Provider;<br><span class="hljs-keyword">import</span> java.security.PublicKey;<br><span class="hljs-keyword">import</span> java.security.SecureRandom;<br><span class="hljs-keyword">import</span> java.security.spec.ECGenParameterSpec;<br><span class="hljs-keyword">import</span> java.security.spec.InvalidKeySpecException;<br><span class="hljs-keyword">import</span> java.security.spec.KeySpec;<br><span class="hljs-keyword">import</span> java.security.spec.PKCS8EncodedKeySpec;<br><span class="hljs-keyword">import</span> java.security.spec.X509EncodedKeySpec;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> dbin0123</span><br><span class="hljs-comment"> * 基于直接获取private/public获取秘钥串进行加解密</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sm2V1Util</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Charset</span> <span class="hljs-variable">UTF_8</span> <span class="hljs-operator">=</span> Charset.forName(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成密钥对</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> sm2密钥对</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> KeyPair <span class="hljs-title function_">generateSm2KeyPair</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">ECGenParameterSpec</span> <span class="hljs-variable">sm2Spec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ECGenParameterSpec</span>(<span class="hljs-string">&quot;sm2p256v1&quot;</span>);<br>            <span class="hljs-comment">// 获取一个椭圆曲线类型的密钥对生成器</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">kpg</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;EC&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BouncyCastleProvider</span>());<br>            <span class="hljs-type">SecureRandom</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecureRandom</span>();<br>            <span class="hljs-comment">// 使用SM2的算法区域初始化密钥生成器</span><br>            kpg.initialize(sm2Spec, random);<br>            <span class="hljs-comment">// 获取密钥对</span><br>            <span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> kpg.generateKeyPair();<br>            <span class="hljs-keyword">return</span> keyPair;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;生成密钥对失败&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加密</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data      数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> publicKey 公钥</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 加密之后的数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">encrypt</span><span class="hljs-params">(String data, String publicKey)</span> <span class="hljs-keyword">throws</span> InvalidCipherTextException, NoSuchAlgorithmException, InvalidKeyException, InvalidKeySpecException &#123;<br>        <span class="hljs-keyword">return</span> encrypt(data, publicKey, SM2Engine.Mode.C1C2C3);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加密</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data      数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> publicKey 公钥</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 加密之后的数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">encrypt</span><span class="hljs-params">(String data, String publicKey, SM2Engine.Mode mode)</span> <span class="hljs-keyword">throws</span> InvalidCipherTextException, NoSuchAlgorithmException, InvalidKeySpecException, InvalidKeyException &#123;<br>        <span class="hljs-keyword">if</span> (data == <span class="hljs-literal">null</span> || data.length() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> data;<br>        &#125;<br>        <span class="hljs-type">byte</span>[] plaintextDatas = data.getBytes(Sm2V1Util.UTF_8);<br>        <span class="hljs-type">KeySpec</span> <span class="hljs-variable">keySpec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">X509EncodedKeySpec</span>(Hex.decode(publicKey));<br>        <span class="hljs-type">PublicKey</span> <span class="hljs-variable">ecPublic</span> <span class="hljs-operator">=</span> KeyFactory.getInstance(<span class="hljs-string">&quot;EC&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BouncyCastleProvider</span>()).generatePublic(keySpec);<br>        <span class="hljs-type">ECPublicKeyParameters</span> <span class="hljs-variable">publicKeyParameters</span> <span class="hljs-operator">=</span> (ECPublicKeyParameters) ECUtil.generatePublicKeyParameter(ecPublic);<br>        <span class="hljs-type">CipherParameters</span> <span class="hljs-variable">pubKeyParameters</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParametersWithRandom</span>(publicKeyParameters);<br>        <span class="hljs-type">SM2Engine</span> <span class="hljs-variable">engine</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SM2Engine</span>(mode);<br>        engine.init(<span class="hljs-literal">true</span>, pubKeyParameters);<br>        <span class="hljs-keyword">return</span> Hex.toHexString(engine.processBlock(plaintextDatas, <span class="hljs-number">0</span>, plaintextDatas.length));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解密</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data       待解密数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> privateKey 私钥</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 解密之后的数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">decrypt</span><span class="hljs-params">(String data, String privateKey)</span> <span class="hljs-keyword">throws</span> InvalidKeySpecException, InvalidCipherTextException, NoSuchAlgorithmException, InvalidKeyException &#123;<br>        <span class="hljs-keyword">return</span> decrypt(data, privateKey, SM2Engine.Mode.C1C2C3);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解密</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data       待解密数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> privateKey 私钥</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 解密之后的数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">decrypt</span><span class="hljs-params">(String data, String privateKey, SM2Engine.Mode mode)</span> <span class="hljs-keyword">throws</span> NoSuchAlgorithmException, InvalidKeySpecException, InvalidKeyException, InvalidCipherTextException &#123;<br>        <span class="hljs-keyword">if</span> (data == <span class="hljs-literal">null</span> || data.length() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> data;<br>        &#125;<br>        <span class="hljs-type">byte</span>[] decode = Hex.decode(data);<br>        <span class="hljs-type">KeySpec</span> <span class="hljs-variable">keySpec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PKCS8EncodedKeySpec</span>(Hex.decode(privateKey));<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">Provider</span> <span class="hljs-variable">provider</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BouncyCastleProvider</span>();<br>        <span class="hljs-type">PrivateKey</span> <span class="hljs-variable">ecPrivateKey</span> <span class="hljs-operator">=</span> KeyFactory.getInstance(<span class="hljs-string">&quot;EC&quot;</span>, provider).generatePrivate(keySpec);<br><br>        <span class="hljs-type">ECPrivateKeyParameters</span> <span class="hljs-variable">privateKeyParameters</span> <span class="hljs-operator">=</span> (ECPrivateKeyParameters) ECUtil.generatePrivateKeyParameter(ecPrivateKey);<br>        <span class="hljs-type">SM2Engine</span> <span class="hljs-variable">engine</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SM2Engine</span>(mode);<br>        engine.init(<span class="hljs-literal">false</span>, privateKeyParameters);<br>        <span class="hljs-type">byte</span>[] byteDate = engine.processBlock(decode, <span class="hljs-number">0</span>, decode.length);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(byteDate, Sm2V1Util.UTF_8);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> Sm2V1Util.generateSm2KeyPair();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> Hex.toHexString(keyPair.getPrivate().getEncoded());<br>        System.out.println(<span class="hljs-string">&quot;私钥:&quot;</span> + privateKey);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">publicKey</span> <span class="hljs-operator">=</span> Hex.toHexString(keyPair.getPublic().getEncoded());<br>        System.out.println(<span class="hljs-string">&quot;公钥:&quot;</span> + privateKey);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">ciphertext</span> <span class="hljs-operator">=</span> Sm2V1Util.encrypt(<span class="hljs-string">&quot;hello&quot;</span>, publicKey);<br>        System.out.println(<span class="hljs-string">&quot;密文:&quot;</span> + ciphertext);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">plaintextData</span> <span class="hljs-operator">=</span> Sm2V1Util.decrypt(ciphertext, privateKey);<br>        System.out.println(<span class="hljs-string">&quot;明文:&quot;</span> + plaintextData);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="仿CryptoJS前端生成的SM2秘钥串加解密java工具类-版本2"><a href="#仿CryptoJS前端生成的SM2秘钥串加解密java工具类-版本2" class="headerlink" title="仿CryptoJS前端生成的SM2秘钥串加解密java工具类 版本2"></a>仿CryptoJS前端生成的SM2秘钥串加解密java工具类 版本2</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> org.bouncycastle.asn1.gm.GMNamedCurves;<br><span class="hljs-keyword">import</span> org.bouncycastle.asn1.x9.X9ECParameters;<br><span class="hljs-keyword">import</span> org.bouncycastle.crypto.InvalidCipherTextException;<br><span class="hljs-keyword">import</span> org.bouncycastle.crypto.engines.SM2Engine;<br><span class="hljs-keyword">import</span> org.bouncycastle.crypto.params.ECDomainParameters;<br><span class="hljs-keyword">import</span> org.bouncycastle.crypto.params.ECPrivateKeyParameters;<br><span class="hljs-keyword">import</span> org.bouncycastle.crypto.params.ECPublicKeyParameters;<br><span class="hljs-keyword">import</span> org.bouncycastle.crypto.params.ParametersWithRandom;<br><span class="hljs-keyword">import</span> org.bouncycastle.jcajce.provider.asymmetric.ec.BCECPrivateKey;<br><span class="hljs-keyword">import</span> org.bouncycastle.jcajce.provider.asymmetric.ec.BCECPublicKey;<br><span class="hljs-keyword">import</span> org.bouncycastle.jce.provider.BouncyCastleProvider;<br><span class="hljs-keyword">import</span> org.bouncycastle.math.ec.ECPoint;<br><span class="hljs-keyword">import</span> org.bouncycastle.util.encoders.Hex;<br><br><span class="hljs-keyword">import</span> java.math.BigInteger;<br><span class="hljs-keyword">import</span> java.nio.charset.Charset;<br><span class="hljs-keyword">import</span> java.security.KeyPair;<br><span class="hljs-keyword">import</span> java.security.KeyPairGenerator;<br><span class="hljs-keyword">import</span> java.security.SecureRandom;<br><span class="hljs-keyword">import</span> java.security.spec.ECGenParameterSpec;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> dbin0123</span><br><span class="hljs-comment"> * 基于前端(CryptoJS v3.1.2)加解密JAVA版本实现</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sm2V2Util</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Charset</span> <span class="hljs-variable">UTF_8</span> <span class="hljs-operator">=</span> Charset.forName(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成密钥对</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> sm2密钥对</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> KeyPair <span class="hljs-title function_">generateSm2KeyPair</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">ECGenParameterSpec</span> <span class="hljs-variable">sm2Spec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ECGenParameterSpec</span>(<span class="hljs-string">&quot;sm2p256v1&quot;</span>);<br>            <span class="hljs-comment">// 获取一个椭圆曲线类型的密钥对生成器</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">KeyPairGenerator</span> <span class="hljs-variable">kpg</span> <span class="hljs-operator">=</span> KeyPairGenerator.getInstance(<span class="hljs-string">&quot;EC&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BouncyCastleProvider</span>());<br>            <span class="hljs-type">SecureRandom</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecureRandom</span>();<br>            <span class="hljs-comment">// 使用SM2的算法区域初始化密钥生成器</span><br>            kpg.initialize(sm2Spec, random);<br>            <span class="hljs-comment">// 获取密钥对</span><br>            <span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> kpg.generateKeyPair();<br>            <span class="hljs-keyword">return</span> keyPair;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;生成密钥对失败&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加密</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data      数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> publicKey 公钥</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 加密之后的数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">encrypt</span><span class="hljs-params">(String data, String publicKey)</span> <span class="hljs-keyword">throws</span> InvalidCipherTextException &#123;<br>        <span class="hljs-keyword">return</span> encrypt(data, publicKey, SM2Engine.Mode.C1C2C3);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加密</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data      数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> publicKey 公钥</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 加密之后的数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">encrypt</span><span class="hljs-params">(String data, String publicKey, SM2Engine.Mode mode)</span> <span class="hljs-keyword">throws</span> InvalidCipherTextException &#123;<br>        <span class="hljs-keyword">if</span> (data == <span class="hljs-literal">null</span> || data.length() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> data;<br>        &#125;<br>        <span class="hljs-type">byte</span>[] plaintextBytes = data.getBytes(Sm2V2Util.UTF_8);<br>        <span class="hljs-type">X9ECParameters</span> <span class="hljs-variable">sm2ECParameters</span> <span class="hljs-operator">=</span> GMNamedCurves.getByName(<span class="hljs-string">&quot;sm2p256v1&quot;</span>);<br>        <span class="hljs-type">ECDomainParameters</span> <span class="hljs-variable">domainParameters</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ECDomainParameters</span>(sm2ECParameters.getCurve(), sm2ECParameters.getG(), sm2ECParameters.getN());<br>        <span class="hljs-type">ECPoint</span> <span class="hljs-variable">ecPoint</span> <span class="hljs-operator">=</span> domainParameters.getCurve().decodePoint(Hex.decode(publicKey));<br>        <span class="hljs-type">ECPublicKeyParameters</span> <span class="hljs-variable">ecPublicKeyParameters</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ECPublicKeyParameters</span>(ecPoint, domainParameters);<br>        <span class="hljs-comment">//用私钥解密</span><br>        <span class="hljs-type">SM2Engine</span> <span class="hljs-variable">sm2Engine</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SM2Engine</span>(mode);<br>        sm2Engine.init(<span class="hljs-literal">true</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ParametersWithRandom</span>(ecPublicKeyParameters, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecureRandom</span>()));<br>        <span class="hljs-keyword">return</span> Hex.toHexString(sm2Engine.processBlock(plaintextBytes, <span class="hljs-number">0</span>, plaintextBytes.length));<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解密</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data       待解密数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> privateKey 私钥</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 解密之后的数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">decrypt</span><span class="hljs-params">(String data, String privateKey)</span> <span class="hljs-keyword">throws</span> InvalidCipherTextException &#123;<br>        <span class="hljs-keyword">return</span> decrypt(data, privateKey, SM2Engine.Mode.C1C2C3);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解密</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> data       待解密数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> privateKey 私钥</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 解密之后的数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">decrypt</span><span class="hljs-params">(String data, String privateKey, SM2Engine.Mode mode)</span> <span class="hljs-keyword">throws</span> InvalidCipherTextException &#123;<br>        <span class="hljs-keyword">if</span> (data == <span class="hljs-literal">null</span> || data.length() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> data;<br>        &#125;<br>        <span class="hljs-type">X9ECParameters</span> <span class="hljs-variable">sm2ECParameters</span> <span class="hljs-operator">=</span> GMNamedCurves.getByName(<span class="hljs-string">&quot;sm2p256v1&quot;</span>);<br>        <span class="hljs-type">ECDomainParameters</span> <span class="hljs-variable">domainParameters</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ECDomainParameters</span>(sm2ECParameters.getCurve(), sm2ECParameters.getG(), sm2ECParameters.getN());<br>        <span class="hljs-comment">//JS加密产生的密文</span><br>        <span class="hljs-type">byte</span>[] cipherDataByte = Hex.decode(data);<br>        <span class="hljs-comment">//刚才的私钥Hex，先还原私钥</span><br>        <span class="hljs-type">BigInteger</span> <span class="hljs-variable">privateKeyD</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(privateKey, <span class="hljs-number">16</span>);<br>        <span class="hljs-type">ECPrivateKeyParameters</span> <span class="hljs-variable">privateKeyParameters</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ECPrivateKeyParameters</span>(privateKeyD, domainParameters);<br>        <span class="hljs-comment">//用私钥解密</span><br>        <span class="hljs-type">SM2Engine</span> <span class="hljs-variable">sm2Engine</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SM2Engine</span>(mode);<br>        sm2Engine.init(<span class="hljs-literal">false</span>, privateKeyParameters);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(sm2Engine.processBlock(cipherDataByte, <span class="hljs-number">0</span>, cipherDataByte.length), Sm2V2Util.UTF_8);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">KeyPair</span> <span class="hljs-variable">keyPair</span> <span class="hljs-operator">=</span> Sm2V2Util.generateSm2KeyPair();<br>        <span class="hljs-type">BCECPublicKey</span> <span class="hljs-variable">publicKey</span> <span class="hljs-operator">=</span> (BCECPublicKey) keyPair.getPublic();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">publicKeyStr</span> <span class="hljs-operator">=</span> Hex.toHexString(publicKey.getQ().getEncoded(<span class="hljs-literal">false</span>));<br>        System.out.println(<span class="hljs-string">&quot;公钥:&quot;</span> + publicKeyStr);<br>        <span class="hljs-type">BCECPrivateKey</span> <span class="hljs-variable">privateKey</span> <span class="hljs-operator">=</span> (BCECPrivateKey) keyPair.getPrivate();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">privateKeyStr</span> <span class="hljs-operator">=</span> privateKey.getD().toString(<span class="hljs-number">16</span>);<br>        System.out.println(<span class="hljs-string">&quot;私钥:&quot;</span> + privateKeyStr);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ciphertext</span> <span class="hljs-operator">=</span> Sm2V2Util.encrypt(<span class="hljs-string">&quot;hello&quot;</span>, publicKeyStr);<br>        System.out.println(<span class="hljs-string">&quot;密文:&quot;</span> + ciphertext);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">plaintextData</span> <span class="hljs-operator">=</span> Sm2V2Util.decrypt(ciphertext, privateKeyStr);<br>        System.out.println(<span class="hljs-string">&quot;明文:&quot;</span> + plaintextData);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="版本区别"><a href="#版本区别" class="headerlink" title="版本区别"></a>版本区别</h4><ul><li>版本1(生成的秘钥串较长) 使用版本1加密的数据无法使用版本2解密,不兼容CryptoJS v3.1.2生成的秘钥串进行加解密(<del>可用于接口参数加解密</del>);</li><li>版本2(生成的秘钥串较短) 兼容CryptoJS v3.1.2生成的秘钥数据进行加解密, 使用版本1无法解密(<del>可用于接口,前后的加解数据传输</del>);</li></ul><p>两个版本都不能对空字符串加密(会死循环)<br>加密代码(感觉有问题) CryptoJS v3.1.2空字符串能生成加密数据(后的无法解密)</p><blockquote><p>SM2Engine.notEncrypted代码片段</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//encData 加密数据, in 输入的加密数据, (如果加密数据为空字符串 encData,in 的长度都为0 这个方法会一直返回true, 导致外部while循环无法结束</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">notEncrypted</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] encData, <span class="hljs-type">byte</span>[] in, <span class="hljs-type">int</span> inOff)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i != encData.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (encData[i] != in[inOff + i]) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> 加解密 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SM2 </tag>
            
            <tag> 国密 </tag>
            
            <tag> CryptoJS </tag>
            
            <tag> bcprov-jdk15on </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年03月08日 《深入浅出 Java 多线程》第二篇 工具-线程池(Executor ThreadPoolExecutor)</title>
      <link href="/2021/03/08/2021/202103/2021-03-08-java_thread_302/"/>
      <url>/2021/03/08/2021/202103/2021-03-08-java_thread_302/</url>
      
        <content type="html"><![CDATA[<h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><h5 id="为什么使用线程池"><a href="#为什么使用线程池" class="headerlink" title="为什么使用线程池"></a>为什么使用线程池</h5><p>使用线程池主要有以下三个原因：</p><ul><li>创建&#x2F;销毁线程需要消耗系统资源，线程池可以复用已创建的线程。</li><li>控制并发的数量。并发数量过多，可能会导致资源消耗过多，从而造成服务器崩溃。（主要原因）</li><li>可以对线程做统一管理。</li></ul><h5 id="线程池的原理"><a href="#线程池的原理" class="headerlink" title="线程池的原理"></a>线程池的原理</h5><p>Java中的线程池顶层接口是Executor接口，ThreadPoolExecutor是这个接口的实现类。</p><p>我们先看看ThreadPoolExecutor类。</p><h6 id="ThreadPoolExecutor提供的构造方法"><a href="#ThreadPoolExecutor提供的构造方法" class="headerlink" title="ThreadPoolExecutor提供的构造方法"></a>ThreadPoolExecutor提供的构造方法</h6><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Creates a new &#123;<span class="hljs-doctag">@code</span> ThreadPoolExecutor&#125; with the given initial</span><br><span class="hljs-comment"> * parameters and default thread factory and rejected execution handler.</span><br><span class="hljs-comment"> * It may be more convenient to use one of the &#123;<span class="hljs-doctag">@link</span> Executors&#125; factory</span><br><span class="hljs-comment"> * methods instead of this general purpose constructor.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> corePoolSize the number of threads to keep in the pool, even</span><br><span class="hljs-comment"> *        if they are idle, unless &#123;<span class="hljs-doctag">@code</span> allowCoreThreadTimeOut&#125; is set</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> maximumPoolSize the maximum number of threads to allow in the</span><br><span class="hljs-comment"> *        pool</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> keepAliveTime when the number of threads is greater than</span><br><span class="hljs-comment"> *        the core, this is the maximum time that excess idle threads</span><br><span class="hljs-comment"> *        will wait for new tasks before terminating.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> unit the time unit for the &#123;<span class="hljs-doctag">@code</span> keepAliveTime&#125; argument</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> workQueue the queue to use for holding tasks before they are</span><br><span class="hljs-comment"> *        executed.  This queue will hold only the &#123;<span class="hljs-doctag">@code</span> Runnable&#125;</span><br><span class="hljs-comment"> *        tasks submitted by the &#123;<span class="hljs-doctag">@code</span> execute&#125; method.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IllegalArgumentException if one of the following holds:&lt;br&gt;</span><br><span class="hljs-comment"> *         &#123;<span class="hljs-doctag">@code</span> corePoolSize &lt; 0&#125;&lt;br&gt;</span><br><span class="hljs-comment"> *         &#123;<span class="hljs-doctag">@code</span> keepAliveTime &lt; 0&#125;&lt;br&gt;</span><br><span class="hljs-comment"> *         &#123;<span class="hljs-doctag">@code</span> maximumPoolSize &lt;= 0&#125;&lt;br&gt;</span><br><span class="hljs-comment"> *         &#123;<span class="hljs-doctag">@code</span> maximumPoolSize &lt; corePoolSize&#125;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> NullPointerException if &#123;<span class="hljs-doctag">@code</span> workQueue&#125; is null</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize,</span><br><span class="hljs-params">                          <span class="hljs-type">int</span> maximumPoolSize,</span><br><span class="hljs-params">                          <span class="hljs-type">long</span> keepAliveTime,</span><br><span class="hljs-params">                          TimeUnit unit,</span><br><span class="hljs-params">                          BlockingQueue&lt;Runnable&gt; workQueue)</span> &#123;<br>    <span class="hljs-built_in">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,<br>         Executors.defaultThreadFactory(), defaultHandler);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Creates a new &#123;<span class="hljs-doctag">@code</span> ThreadPoolExecutor&#125; with the given initial</span><br><span class="hljs-comment"> * parameters and default rejected execution handler.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> corePoolSize the number of threads to keep in the pool, even</span><br><span class="hljs-comment"> *        if they are idle, unless &#123;<span class="hljs-doctag">@code</span> allowCoreThreadTimeOut&#125; is set</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> maximumPoolSize the maximum number of threads to allow in the</span><br><span class="hljs-comment"> *        pool</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> keepAliveTime when the number of threads is greater than</span><br><span class="hljs-comment"> *        the core, this is the maximum time that excess idle threads</span><br><span class="hljs-comment"> *        will wait for new tasks before terminating.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> unit the time unit for the &#123;<span class="hljs-doctag">@code</span> keepAliveTime&#125; argument</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> workQueue the queue to use for holding tasks before they are</span><br><span class="hljs-comment"> *        executed.  This queue will hold only the &#123;<span class="hljs-doctag">@code</span> Runnable&#125;</span><br><span class="hljs-comment"> *        tasks submitted by the &#123;<span class="hljs-doctag">@code</span> execute&#125; method.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> threadFactory the factory to use when the executor</span><br><span class="hljs-comment"> *        creates a new thread</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IllegalArgumentException if one of the following holds:&lt;br&gt;</span><br><span class="hljs-comment"> *         &#123;<span class="hljs-doctag">@code</span> corePoolSize &lt; 0&#125;&lt;br&gt;</span><br><span class="hljs-comment"> *         &#123;<span class="hljs-doctag">@code</span> keepAliveTime &lt; 0&#125;&lt;br&gt;</span><br><span class="hljs-comment"> *         &#123;<span class="hljs-doctag">@code</span> maximumPoolSize &lt;= 0&#125;&lt;br&gt;</span><br><span class="hljs-comment"> *         &#123;<span class="hljs-doctag">@code</span> maximumPoolSize &lt; corePoolSize&#125;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> NullPointerException if &#123;<span class="hljs-doctag">@code</span> workQueue&#125;</span><br><span class="hljs-comment"> *         or &#123;<span class="hljs-doctag">@code</span> threadFactory&#125; is null</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize,</span><br><span class="hljs-params">                          <span class="hljs-type">int</span> maximumPoolSize,</span><br><span class="hljs-params">                          <span class="hljs-type">long</span> keepAliveTime,</span><br><span class="hljs-params">                          TimeUnit unit,</span><br><span class="hljs-params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="hljs-params">                          ThreadFactory threadFactory)</span> &#123;<br>    <span class="hljs-built_in">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,<br>         threadFactory, defaultHandler);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Creates a new &#123;<span class="hljs-doctag">@code</span> ThreadPoolExecutor&#125; with the given initial</span><br><span class="hljs-comment"> * parameters and default thread factory.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> corePoolSize the number of threads to keep in the pool, even</span><br><span class="hljs-comment"> *        if they are idle, unless &#123;<span class="hljs-doctag">@code</span> allowCoreThreadTimeOut&#125; is set</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> maximumPoolSize the maximum number of threads to allow in the</span><br><span class="hljs-comment"> *        pool</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> keepAliveTime when the number of threads is greater than</span><br><span class="hljs-comment"> *        the core, this is the maximum time that excess idle threads</span><br><span class="hljs-comment"> *        will wait for new tasks before terminating.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> unit the time unit for the &#123;<span class="hljs-doctag">@code</span> keepAliveTime&#125; argument</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> workQueue the queue to use for holding tasks before they are</span><br><span class="hljs-comment"> *        executed.  This queue will hold only the &#123;<span class="hljs-doctag">@code</span> Runnable&#125;</span><br><span class="hljs-comment"> *        tasks submitted by the &#123;<span class="hljs-doctag">@code</span> execute&#125; method.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> handler the handler to use when execution is blocked</span><br><span class="hljs-comment"> *        because the thread bounds and queue capacities are reached</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IllegalArgumentException if one of the following holds:&lt;br&gt;</span><br><span class="hljs-comment"> *         &#123;<span class="hljs-doctag">@code</span> corePoolSize &lt; 0&#125;&lt;br&gt;</span><br><span class="hljs-comment"> *         &#123;<span class="hljs-doctag">@code</span> keepAliveTime &lt; 0&#125;&lt;br&gt;</span><br><span class="hljs-comment"> *         &#123;<span class="hljs-doctag">@code</span> maximumPoolSize &lt;= 0&#125;&lt;br&gt;</span><br><span class="hljs-comment"> *         &#123;<span class="hljs-doctag">@code</span> maximumPoolSize &lt; corePoolSize&#125;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> NullPointerException if &#123;<span class="hljs-doctag">@code</span> workQueue&#125;</span><br><span class="hljs-comment"> *         or &#123;<span class="hljs-doctag">@code</span> handler&#125; is null</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize,</span><br><span class="hljs-params">                          <span class="hljs-type">int</span> maximumPoolSize,</span><br><span class="hljs-params">                          <span class="hljs-type">long</span> keepAliveTime,</span><br><span class="hljs-params">                          TimeUnit unit,</span><br><span class="hljs-params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="hljs-params">                          RejectedExecutionHandler handler)</span> &#123;<br>    <span class="hljs-built_in">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,<br>         Executors.defaultThreadFactory(), handler);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Creates a new &#123;<span class="hljs-doctag">@code</span> ThreadPoolExecutor&#125; with the given initial</span><br><span class="hljs-comment"> * parameters.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> corePoolSize the number of threads to keep in the pool, even</span><br><span class="hljs-comment"> *        if they are idle, unless &#123;<span class="hljs-doctag">@code</span> allowCoreThreadTimeOut&#125; is set</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> maximumPoolSize the maximum number of threads to allow in the</span><br><span class="hljs-comment"> *        pool</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> keepAliveTime when the number of threads is greater than</span><br><span class="hljs-comment"> *        the core, this is the maximum time that excess idle threads</span><br><span class="hljs-comment"> *        will wait for new tasks before terminating.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> unit the time unit for the &#123;<span class="hljs-doctag">@code</span> keepAliveTime&#125; argument</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> workQueue the queue to use for holding tasks before they are</span><br><span class="hljs-comment"> *        executed.  This queue will hold only the &#123;<span class="hljs-doctag">@code</span> Runnable&#125;</span><br><span class="hljs-comment"> *        tasks submitted by the &#123;<span class="hljs-doctag">@code</span> execute&#125; method.</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> threadFactory the factory to use when the executor</span><br><span class="hljs-comment"> *        creates a new thread</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> handler the handler to use when execution is blocked</span><br><span class="hljs-comment"> *        because the thread bounds and queue capacities are reached</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> IllegalArgumentException if one of the following holds:&lt;br&gt;</span><br><span class="hljs-comment"> *         &#123;<span class="hljs-doctag">@code</span> corePoolSize &lt; 0&#125;&lt;br&gt;</span><br><span class="hljs-comment"> *         &#123;<span class="hljs-doctag">@code</span> keepAliveTime &lt; 0&#125;&lt;br&gt;</span><br><span class="hljs-comment"> *         &#123;<span class="hljs-doctag">@code</span> maximumPoolSize &lt;= 0&#125;&lt;br&gt;</span><br><span class="hljs-comment"> *         &#123;<span class="hljs-doctag">@code</span> maximumPoolSize &lt; corePoolSize&#125;</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> NullPointerException if &#123;<span class="hljs-doctag">@code</span> workQueue&#125;</span><br><span class="hljs-comment"> *         or &#123;<span class="hljs-doctag">@code</span> threadFactory&#125; or &#123;<span class="hljs-doctag">@code</span> handler&#125; is null</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize,</span><br><span class="hljs-params">                          <span class="hljs-type">int</span> maximumPoolSize,</span><br><span class="hljs-params">                          <span class="hljs-type">long</span> keepAliveTime,</span><br><span class="hljs-params">                          TimeUnit unit,</span><br><span class="hljs-params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span><br><span class="hljs-params">                          ThreadFactory threadFactory,</span><br><span class="hljs-params">                          RejectedExecutionHandler handler)</span> &#123;<br>    <span class="hljs-keyword">if</span> (corePoolSize &lt; <span class="hljs-number">0</span> ||<br>        maximumPoolSize &lt;= <span class="hljs-number">0</span> ||<br>        maximumPoolSize &lt; corePoolSize ||<br>        keepAliveTime &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();<br>    <span class="hljs-keyword">if</span> (workQueue == <span class="hljs-literal">null</span> || threadFactory == <span class="hljs-literal">null</span> || handler == <span class="hljs-literal">null</span>)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    <span class="hljs-built_in">this</span>.acc = System.getSecurityManager() == <span class="hljs-literal">null</span> ?<br>            <span class="hljs-literal">null</span> :<br>            AccessController.getContext();<br>    <span class="hljs-built_in">this</span>.corePoolSize = corePoolSize;<br>    <span class="hljs-built_in">this</span>.maximumPoolSize = maximumPoolSize;<br>    <span class="hljs-built_in">this</span>.workQueue = workQueue;<br>    <span class="hljs-built_in">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);<br>    <span class="hljs-built_in">this</span>.threadFactory = threadFactory;<br>    <span class="hljs-built_in">this</span>.handler = handler;<br>&#125;<br></code></pre></td></tr></table></figure><p>参数解释</p><ul><li>int corePoolSize：该线程池中核心线程数最大值</li></ul><blockquote><p>核心线程：线程池中有两类线程，核心线程和非核心线程。核心线程默认情况下会一直存在于线程池中，即使这个核心线程什么都不干（铁饭碗），而非核心线程如果长时间的闲置，就会被销毁（临时工）。</p></blockquote><ul><li>int maximumPoolSize：该线程池中线程总数最大值 。</li></ul><blockquote><p>该值等于核心线程数量 + 非核心线程数量。</p></blockquote><ul><li>long keepAliveTime：非核心线程闲置超时时长。</li></ul><blockquote><p>非核心线程如果处于闲置状态超过该值，就会被销毁。如果设置allowCoreThreadTimeOut(true)，则会也作用于核心线程。</p></blockquote><ul><li>TimeUnit unit：keepAliveTime的单位。</li></ul><blockquote><p>TimeUnit是一个枚举类型 ，包括以下属性：</br><br>NANOSECONDS ： 1微毫秒 &#x3D; 1微秒 &#x2F; 1000 </br><br>MICROSECONDS ： 1微秒 &#x3D; 1毫秒 &#x2F; 1000 </br><br>MILLISECONDS ： 1毫秒 &#x3D; 1秒 &#x2F;1000</br><br>SECONDS ： 秒</br><br>MINUTES ： 分</br><br>HOURS ： 小时</br><br>DAYS ： 天</br></p></blockquote><ul><li>BlockingQueue workQueue：阻塞队列，维护着等待执行的Runnable任务对象。</li></ul><blockquote><p>常用的几个阻塞队列：</br></p><ol><li>LinkedBlockingQueue 链式阻塞队列，底层数据结构是链表，默认大小是Integer.MAX_VALUE，也可以指定大小。</br></li><li>ArrayBlockingQueue 数组阻塞队列，底层数据结构是数组，需要指定队列的大小。</br></li><li>SynchronousQueue 同步队列，内部容量为0，每个put操作必须等待一个take操作，反之亦然。</br></li><li>DelayQueue 延迟队列，该队列中的元素只有当其指定的延迟时间到了，才能够从队列中获取到该元素 。</br></li></ol></blockquote><ul><li>ThreadFactory threadFactory 创建线程的工厂 ，用于批量创建线程，统一在创建线程时设置一些参数，如是否守护线程、线程的优先级等。如果不指定，会新建一个默认的线程工厂。</li></ul><p>Executors.defaultThreadFactory() 默认工厂</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultThreadFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ThreadFactory</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">poolNumber</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ThreadGroup group;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">AtomicInteger</span> <span class="hljs-variable">threadNumber</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String namePrefix;<br><br>        DefaultThreadFactory() &#123;<br>            <span class="hljs-type">SecurityManager</span> <span class="hljs-variable">var1</span> <span class="hljs-operator">=</span> System.getSecurityManager();<br>            <span class="hljs-built_in">this</span>.group = var1 != <span class="hljs-literal">null</span> ? var1.getThreadGroup() : Thread.currentThread().getThreadGroup();<br>            <span class="hljs-built_in">this</span>.namePrefix = <span class="hljs-string">&quot;pool-&quot;</span> + poolNumber.getAndIncrement() + <span class="hljs-string">&quot;-thread-&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Thread <span class="hljs-title function_">newThread</span><span class="hljs-params">(Runnable var1)</span> &#123;<br>            <span class="hljs-type">Thread</span> <span class="hljs-variable">var2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-built_in">this</span>.group, var1, <span class="hljs-built_in">this</span>.namePrefix + <span class="hljs-built_in">this</span>.threadNumber.getAndIncrement(), <span class="hljs-number">0L</span>);<br>            <span class="hljs-keyword">if</span> (var2.isDaemon()) &#123;<br>                var2.setDaemon(<span class="hljs-literal">false</span>);<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (var2.getPriority() != <span class="hljs-number">5</span>) &#123;<br>                var2.setPriority(<span class="hljs-number">5</span>);<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> var2;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li>RejectedExecutionHandler handler 拒绝处理策略，线程数量大于最大线程数就会采用拒绝处理策略，四种拒绝处理的策略为 ：</li></ul><blockquote><p>ThreadPoolExecutor.AbortPolicy：默认拒绝处理策略，丢弃任务并抛出RejectedExecutionException异常。</br><br>ThreadPoolExecutor.DiscardPolicy：丢弃新来的任务，但是不抛出异常。</br><br>ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列头部（最旧的）的任务，然后重新尝试执行程序（如果再次失败，重复此过程）。</br><br>ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务。</br></p></blockquote><h6 id="ThreadPoolExecutor的策略"><a href="#ThreadPoolExecutor的策略" class="headerlink" title="ThreadPoolExecutor的策略"></a>ThreadPoolExecutor的策略</h6><p>线程池本身有一个调度线程，这个线程就是用于管理布控整个线程池里的各种任务和事务，例如创建线程、销毁线程、任务队列管理、线程队列管理等等。</p><p><strong>故线程池也有自己的状态</strong>。ThreadPoolExecutor类中定义了一个<strong>volatile int变量runState来表示线程池的状态 ，分别为<code>RUNNING</code>、<code>SHUTDOWN</code>、<code>STOP</code>、<code>TIDYING</code> 、<code>TERMINATED</code>。</strong></p><ul><li>线程池创建后处于RUNNING状态。</li><li>调用shutdown()方法后处于SHUTDOWN状态，线程池不能接受新的任务，清除一些空闲worker,会等待阻塞队列的任务完成。</li><li>调用shutdownNow()方法后处于STOP状态，线程池不能接受新的任务，中断所有线程，阻塞队列中没有被执行的任务全部丢弃。此时，poolsize&#x3D;0,阻塞队列的size也为0。</li><li>当所有的任务已终止，ctl记录的”任务数量”为0，线程池会变为TIDYING状态。接着会执行terminated()函数。<blockquote><p>ThreadPoolExecutor中有一个控制状态的属性叫ctl，它是一个AtomicInteger类型的变量。</p></blockquote></li><li>线程池处在TIDYING状态时，执行完terminated()方法之后，就会由 TIDYING -&gt; TERMINATED， 线程池被设置为TERMINATED状态。</li></ul><h6 id="线程池主要的任务处理流程"><a href="#线程池主要的任务处理流程" class="headerlink" title="线程池主要的任务处理流程"></a>线程池主要的任务处理流程</h6><p>处理任务的核心方法是execute，我们看看 JDK 1.8 源码中ThreadPoolExecutor.execute()是如何处理线程任务的：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execute</span><span class="hljs-params">(Runnable var1)</span> &#123;<br>    <span class="hljs-keyword">if</span> (var1 == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">var2</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.ctl.get();<br>        <span class="hljs-comment">//当前线程数小于corePoolSize</span><br>        <span class="hljs-keyword">if</span> (workerCountOf(var2) &lt; <span class="hljs-built_in">this</span>.corePoolSize) &#123;<br>            <span class="hljs-comment">//新增核心线程</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.addWorker(var1, <span class="hljs-literal">true</span>)) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-comment">//获取线程池状态</span><br>            var2 = <span class="hljs-built_in">this</span>.ctl.get();<br>        &#125;<br>        <span class="hljs-comment">//如果不小于corePoolSize，则将任务添加到workQueue队列。</span><br>        <span class="hljs-keyword">if</span> (isRunning(var2) &amp;&amp; <span class="hljs-built_in">this</span>.workQueue.offer(var1)) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">var3</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.ctl.get();<br>            <span class="hljs-comment">//如果isRunning返回false(状态检查)，则remove这个任务，然后执行拒绝策略。</span><br>            <span class="hljs-keyword">if</span> (!isRunning(var3) &amp;&amp; <span class="hljs-built_in">this</span>.remove(var1)) &#123;<br>                <span class="hljs-comment">//拒绝</span><br>                <span class="hljs-built_in">this</span>.reject(var1);<br>            &#125; <br>            <span class="hljs-comment">//线程池处于running状态，但是没有线程，则创建线程</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (workerCountOf(var3) == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">//加入</span><br>                <span class="hljs-built_in">this</span>.addWorker((Runnable)<span class="hljs-literal">null</span>, <span class="hljs-literal">false</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 如果放入workQueue失败，则创建非核心线程执行任务，</span><br>        <span class="hljs-comment">// 如果这时创建非核心线程失败(当前线程总数不小于maximumPoolSize时)，就会执行拒绝策略。</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.addWorker(var1, <span class="hljs-literal">false</span>)) &#123;<br>            <span class="hljs-built_in">this</span>.reject(var1);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>ctl.get()是获取线程池状态，用int类型表示。第二步中，入队前进行了一次isRunning判断，入队之后，又进行了一次isRunning判断。</p><p><strong>为什么要二次检查线程池的状态?</strong></p><p>在多线程的环境下，线程池的状态是时刻发生变化的。很有可能刚获取线程池状态后线程池状态就改变了。判断是否将command加入workqueue是线程池之前的状态。倘若没有二次检查，万一线程池处于非RUNNING状态（在多线程环境下很有可能发生），那么command永远不会执行。</p><p><strong>总结一下处理流程</strong></p><ul><li>线程总数量 &lt; corePoolSize，无论线程是否空闲，都会新建一个核心线程执行任务（让核心线程数量快速达到corePoolSize，在核心线程数量 &lt; corePoolSize时）。注意，这一步需要获得全局锁。</li><li>线程总数量 &gt;&#x3D; corePoolSize时，新来的线程任务会进入任务队列中等待，然后空闲的核心线程会依次去缓存队列中取任务来执行（体现了线程复用）。</li><li>当缓存队列满了，说明这个时候任务已经多到爆棚，需要一些“临时工”来执行这些任务了。于是会创建非核心线程去执行这个任务。注意，这一步需要获得全局锁。</li><li>缓存队列满了， 且总线程数达到了maximumPoolSize，则会采取上面提到的拒绝策略进行处理。</li></ul><p>整个过程如图所示：</p><p><img src="http://dbin0123.github.io/images/posts/thread/205/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E4%B8%BB%E8%A6%81%E7%9A%84%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.png" alt="image"></p><h6 id="ThreadPoolExecutor如何做到线程复用的？"><a href="#ThreadPoolExecutor如何做到线程复用的？" class="headerlink" title="ThreadPoolExecutor如何做到线程复用的？"></a>ThreadPoolExecutor如何做到线程复用的？</h6><p>我们知道，一个线程在创建的时候会指定一个线程任务，当执行完这个线程任务之后，线程自动销毁。但是线程池却可以复用线程，即一个线程执行完线程任务后不销毁，继续执行另外的线程任务。那么，线程池如何做到线程复用呢？</p><p>原来，ThreadPoolExecutor在创建线程时，会将线程封装成工作线程worker,并放入工作线程组中，然后这个worker反复从阻塞队列中拿任务去执行。话不多说，我们继续看看源码（一定要仔细看，前后有联系）</p><p>这里的addWorker方法是在上面提到的execute方法里面调用的，先看看上半部分：</p><p>ThreadPoolExecutor.addWorker方法源码</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">addWorker</span><span class="hljs-params">(Runnable firstTask, <span class="hljs-type">boolean</span> core)</span> &#123;<br>        retry:<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> ctl.get();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> runStateOf(c);<br><br>            <span class="hljs-comment">// Check if queue empty only if necessary.</span><br>            <span class="hljs-keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp;<br>                ! (rs == SHUTDOWN &amp;&amp;<br>                   firstTask == <span class="hljs-literal">null</span> &amp;&amp;<br>                   ! workQueue.isEmpty()))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>            <span class="hljs-keyword">for</span> (;;) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">wc</span> <span class="hljs-operator">=</span> workerCountOf(c);<br>                <span class="hljs-keyword">if</span> (wc &gt;= CAPACITY ||<br>                    <span class="hljs-comment">// 1.如果core是ture,证明需要创建的线程为核心线程，则先判断当前线程是否大于核心线程</span><br>                    <span class="hljs-comment">// 如果core是false,证明需要创建的是非核心线程，则先判断当前线程数是否大于总线程数</span><br>                    <span class="hljs-comment">// 如果不小于，则返回false</span><br>                    wc &gt;= (core ? corePoolSize : maximumPoolSize))<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                <span class="hljs-keyword">if</span> (compareAndIncrementWorkerCount(c))<br>                    <span class="hljs-keyword">break</span> retry;<br>                c = ctl.get();  <span class="hljs-comment">// Re-read ctl</span><br>                <span class="hljs-keyword">if</span> (runStateOf(c) != rs)<br>                    <span class="hljs-keyword">continue</span> retry;<br>                <span class="hljs-comment">// 否则CAS由于workerCount更改而失败；重试内部循环</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">workerStarted</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">workerAdded</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">Worker</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//1.创建一个worker对象</span><br>            w = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Worker</span>(firstTask);<br>            <span class="hljs-comment">//2.实例化一个Thread对象</span><br>            <span class="hljs-keyword">final</span> <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> w.thread;<br>            <span class="hljs-keyword">if</span> (t != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">//3.线程池全局锁</span><br>                <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">mainLock</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.mainLock;<br>                mainLock.lock();<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 按住锁时重新检查。</span><br>                    <span class="hljs-comment">// 如果ThreadFactory失败或在获得锁之前关闭，请回退。</span><br>                    <span class="hljs-type">int</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> runStateOf(ctl.get());<br><br>                    <span class="hljs-keyword">if</span> (rs &lt; SHUTDOWN ||<br>                        (rs == SHUTDOWN &amp;&amp; firstTask == <span class="hljs-literal">null</span>)) &#123;<br>                        <span class="hljs-keyword">if</span> (t.isAlive()) <span class="hljs-comment">// 预检查t是否可启动</span><br>                            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalThreadStateException</span>();<br>                        workers.add(w);<br>                        <span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> workers.size();<br>                        <span class="hljs-keyword">if</span> (s &gt; largestPoolSize)<br>                            largestPoolSize = s;<br>                        workerAdded = <span class="hljs-literal">true</span>;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    mainLock.unlock();<br>                &#125;<br>                <br>                <span class="hljs-keyword">if</span> (workerAdded) &#123;<br>                    <span class="hljs-comment">//4.启动这个线程</span><br>                    t.start();<br>                    workerStarted = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (! workerStarted)<br>                addWorkerFailed(w);<br>        &#125;<br>        <span class="hljs-keyword">return</span> workerStarted;<br>    &#125;<br></code></pre></td></tr></table></figure><p>创建worker对象，并初始化一个Thread对象，然后启动这个线程对象。</p><p>我们接着看看Worker类，仅展示部分源码：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Worker类部分源码</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Worker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-keyword">final</span> Thread thread;<br>    Runnable firstTask;<br><br>    Worker(Runnable firstTask) &#123;<br>        setState(-<span class="hljs-number">1</span>); <span class="hljs-comment">// 禁止中断，直到runWorker</span><br>        <span class="hljs-built_in">this</span>.firstTask = firstTask;<br>        <span class="hljs-built_in">this</span>.thread = getThreadFactory().newThread(<span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>            runWorker(<span class="hljs-built_in">this</span>);<br>    &#125;<br>    <span class="hljs-comment">//其余代码略...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Worker类实现了Runnable接口，所以Worker也是一个线程任务。在构造方法中，创建了一个线程，线程的任务就是自己。故addWorker方法调用addWorker方法源码下半部分中的第4步t.start，会触发Worker类的run方法被JVM调用。</p><p>我们再看看runWorker的逻辑：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Worker.runWorker方法源代码</span><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">runWorker</span><span class="hljs-params">(Worker w)</span> &#123;<br>    <span class="hljs-type">Thread</span> <span class="hljs-variable">wt</span> <span class="hljs-operator">=</span> Thread.currentThread();<br>    <span class="hljs-type">Runnable</span> <span class="hljs-variable">task</span> <span class="hljs-operator">=</span> w.firstTask;<br>    w.firstTask = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// 1.线程启动之后，通过unlock方法释放锁</span><br>    w.unlock(); <span class="hljs-comment">// allow interrupts</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">completedAbruptly</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 2.Worker执行firstTask或从workQueue中获取任务，如果getTask方法不返回null,循环不退出</span><br>        <span class="hljs-keyword">while</span> (task != <span class="hljs-literal">null</span> || (task = getTask()) != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 2.1进行加锁操作，保证thread不被其他线程中断（除非线程池被中断）</span><br>            w.lock();<br>            <span class="hljs-comment">// 2.2检查线程池状态，倘若线程池处于中断状态，当前线程将中断。 </span><br>            <span class="hljs-keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||<br>                 (Thread.interrupted() &amp;&amp;<br>                  runStateAtLeast(ctl.get(), STOP))) &amp;&amp;<br>                !wt.isInterrupted())<br>                wt.interrupt();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 2.3执行beforeExecute </span><br>                beforeExecute(wt, task);<br>                <span class="hljs-type">Throwable</span> <span class="hljs-variable">thrown</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">// 2.4执行任务</span><br>                    task.run();<br>                &#125; <span class="hljs-keyword">catch</span> (RuntimeException x) &#123;<br>                    thrown = x; <span class="hljs-keyword">throw</span> x;<br>                &#125; <span class="hljs-keyword">catch</span> (Error x) &#123;<br>                    thrown = x; <span class="hljs-keyword">throw</span> x;<br>                &#125; <span class="hljs-keyword">catch</span> (Throwable x) &#123;<br>                    thrown = x; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(x);<br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br>                    <span class="hljs-comment">// 2.5执行afterExecute方法 </span><br>                    afterExecute(task, thrown);<br>                &#125;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                task = <span class="hljs-literal">null</span>;<br>                w.completedTasks++;<br>                <span class="hljs-comment">// 2.6解锁操作</span><br>                w.unlock();<br>            &#125;<br>        &#125;<br>        completedAbruptly = <span class="hljs-literal">false</span>;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        processWorkerExit(w, completedAbruptly);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先去执行创建这个worker时就有的任务，当执行完这个任务后，worker的生命周期并没有结束，在while循环中，worker会不断地调用getTask方法从阻塞队列中获取任务然后调用task.run()执行任务,从而达到复用线程的目的。只要getTask方法不返回null,此线程就不会退出。</p><p>当然，核心线程池中创建的线程想要拿到阻塞队列中的任务，先要判断线程池的状态，如果STOP或者TERMINATED，返回null。</p><p>最后看看getTask方法的实现:</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Worker.getTask方法源码</span><br><span class="hljs-keyword">private</span> Runnable <span class="hljs-title function_">getTask</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">timedOut</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// Did the last poll() time out?</span><br><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> ctl.get();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> runStateOf(c);<br><br>        <span class="hljs-comment">// Check if queue empty only if necessary.</span><br>        <span class="hljs-keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123;<br>            decrementWorkerCount();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">wc</span> <span class="hljs-operator">=</span> workerCountOf(c);<br><br>        <span class="hljs-comment">// Are workers subject to culling?</span><br>        <span class="hljs-comment">// 1.allowCoreThreadTimeOut变量默认是false,核心线程即使空闲也不会被销毁</span><br>        <span class="hljs-comment">// 如果为true,核心线程在keepAliveTime内仍空闲则会被销毁。 </span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">timed</span> <span class="hljs-operator">=</span> allowCoreThreadTimeOut || wc &gt; corePoolSize;<br>        <span class="hljs-comment">// 2.如果运行线程数超过了最大线程数，但是缓存队列已经空了，这时递减worker数量。 </span><br>　　　　 <span class="hljs-comment">// 如果有设置允许线程超时或者线程数量超过了核心线程数量，</span><br>        <span class="hljs-comment">// 并且线程在规定时间内均未poll到任务且队列为空则递减worker数量</span><br>        <span class="hljs-keyword">if</span> ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut))<br>            &amp;&amp; (wc &gt; <span class="hljs-number">1</span> || workQueue.isEmpty())) &#123;<br>            <span class="hljs-keyword">if</span> (compareAndDecrementWorkerCount(c))<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 3.如果timed为true(想想哪些情况下timed为true),则会调用workQueue的poll方法获取任务.</span><br>            <span class="hljs-comment">// 超时时间是keepAliveTime。如果超过keepAliveTime时长，</span><br>            <span class="hljs-comment">// poll返回了null，上边提到的while循序就会退出，线程也就执行完了。</span><br>            <span class="hljs-comment">// 如果timed为false（allowCoreThreadTimeOut为falsefalse</span><br>            <span class="hljs-comment">// 且wc &gt; corePoolSize为false），则会调用workQueue的take方法阻塞在当前。</span><br>            <span class="hljs-comment">// 队列中有任务加入时，线程被唤醒，take方法返回任务，并执行。</span><br>            <span class="hljs-type">Runnable</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> timed ?<br>                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :<br>                workQueue.take();<br>            <span class="hljs-keyword">if</span> (r != <span class="hljs-literal">null</span>)<br>                <span class="hljs-keyword">return</span> r;<br>            timedOut = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException retry) &#123;<br>            timedOut = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>核心线程的会一直卡在workQueue.take方法，被阻塞并挂起，不会占用CPU资源，直到拿到Runnable 然后返回（当然如果allowCoreThreadTimeOut设置为true,那么核心线程就会去调用poll方法，因为poll可能会返回null,所以这时候核心线程满足超时条件也会被销毁）。</p><p>非核心线程会workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) ，如果超时还没有拿到，下一次循环判断compareAndDecrementWorkerCount就会返回null,Worker对象的run()方法循环体的判断为null,任务结束，然后线程被系统回收 。</p><p>源码解析完毕，你理解的源码是否和图中的处理流程一致？如果不一致，那么就多看两遍吧，加油。</p><h6 id="四种常见的线程池"><a href="#四种常见的线程池" class="headerlink" title="四种常见的线程池"></a>四种常见的线程池</h6><p>Executors类中提供的几个静态方法来创建线程池。大家到了这一步，如果看懂了前面讲的ThreadPoolExecutor构造方法中各种参数的意义，那么一看到Executors类中提供的线程池的源码就应该知道这个线程池是干嘛的。</p><p>####### newCachedThreadPool</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title function_">newCachedThreadPool</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">0</span>, Integer.MAX_VALUE,<br>                                  <span class="hljs-number">60L</span>, TimeUnit.SECONDS,<br>                                  <span class="hljs-keyword">new</span> <span class="hljs-title class_">SynchronousQueue</span>&lt;Runnable&gt;());<br>&#125;<br></code></pre></td></tr></table></figure><p>CacheThreadPool的运行流程如下：</p><ul><li>提交任务进线程池。</li><li>因为<strong>corePoolSize为0的关系，不创建核心线程</strong>，线程池最大为Integer.MAX_VALUE。</li><li>尝试将任务添加到SynchronousQueue队列。</li><li>如果SynchronousQueue入列成功，等待被当前运行的线程空闲后拉取执行。如果当前没有空闲线程，那么就创建一个非核心线程，然后从SynchronousQueue拉取任务并在当前线程执行。</li><li>如果SynchronousQueue已有任务在等待，入列操作将会阻塞。<br>当需要<strong>执行很多短时间的任务时，CacheThreadPool的线程复用率比较高， 会显著的提高性能。而且线程60s后会回收，意味着即使没有任务进来，CacheThreadPool并不会占用很多资源</strong>。</li></ul><p>####### newFixedThreadPoo</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title function_">newFixedThreadPool</span><span class="hljs-params">(<span class="hljs-type">int</span> nThreads)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(nThreads, nThreads,<br>                                      <span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                                      <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;());<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>核心线程数量和总线程数量相等</strong>，都是传入的参数nThreads，所以只能创建核心线程，不能创建非核心线程。因为LinkedBlockingQueue的默认大小是Integer.MAX_VALUE，故如果核心线程空闲，则交给核心线程处理；如果核心线程不空闲，则入列等待，直到核心线程空闲。</p><p><strong>与CachedThreadPool的区别</strong>：</p><ul><li>因为 corePoolSize &#x3D;&#x3D; maximumPoolSize ，所以FixedThreadPool只会创建核心线程。 而CachedThreadPool因为corePoolSize&#x3D;0，所以只会创建非核心线程。</li><li>在 getTask() 方法，如果队列里没有任务可取，线程会一直阻塞在 LinkedBlockingQueue.take() ，线程不会被回收。 CachedThreadPool会在60s后收回。</li><li>由于线程不会被回收，会一直卡在阻塞，<strong>所以没有任务的情况下， FixedThreadPool占用资源更多</strong>。</li><li>都几乎不会触发拒绝策略，但是原理不同。FixedThreadPool是因为阻塞队列可以很大（最大为Integer最大值），故几乎不会触发拒绝策略；CachedThreadPool是因为线程池很大（最大为Integer最大值），几乎不会导致线程数量大于最大线程数，故几乎不会触发拒绝策略。</li></ul><p>####### newSingleThreadExecutor</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ExecutorService <span class="hljs-title function_">newSingleThreadExecutor</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FinalizableDelegatedExecutorService</span><br>        (<span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadPoolExecutor</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>,<br>                                <span class="hljs-number">0L</span>, TimeUnit.MILLISECONDS,<br>                                <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedBlockingQueue</span>&lt;Runnable&gt;()));<br>&#125;<br></code></pre></td></tr></table></figure><p>有且仅有一个核心线程（ corePoolSize &#x3D;&#x3D; maximumPoolSize&#x3D;1），使用了LinkedBlockingQueue（容量很大），所以，<strong>不会创建非核心线程</strong>。所有任务按照<strong>先来先执行</strong>的顺序执行。如果这个唯一的线程不空闲，那么新来的任务会存储在任务队列里等待执行。</p><p>####### newScheduledThreadPool<br><strong>创建一个定长线程池，支持定时及周期性任务执行。</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ScheduledExecutorService <span class="hljs-title function_">newScheduledThreadPool</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScheduledThreadPoolExecutor</span>(corePoolSize);<br>&#125;<br><br><span class="hljs-comment">//ScheduledThreadPoolExecutor():</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">ScheduledThreadPoolExecutor</span><span class="hljs-params">(<span class="hljs-type">int</span> corePoolSize)</span> &#123;<br>    <span class="hljs-built_in">super</span>(corePoolSize, Integer.MAX_VALUE,<br>          DEFAULT_KEEPALIVE_MILLIS, MILLISECONDS,<br>          <span class="hljs-keyword">new</span> <span class="hljs-title class_">DelayedWorkQueue</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>四种常见的线程池基本够我们使用了，但是《阿里把把开发手册》不建议我们直接使用Executors类中的线程池，而是通过ThreadPoolExecutor的方式，这样的处理方式让写的同学需要更加明确线程池的运行规则，规避资源耗尽的风险。</p><p>但如果你及团队本身对线程池非常熟悉，又确定业务规模不会大到资源耗尽的程度（比如线程数量或任务队列长度可能达到Integer.MAX_VALUE）时，其实是可以使用JDK提供的这几个接口的，它能让我们的代码具有更强的可读性。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> java多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Executor </tag>
            
            <tag> ThreadPoolExecutor </tag>
            
            <tag> 线程池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年03月07日 《深入浅出 Java 多线程》第二篇 原理片-synchronized与锁</title>
      <link href="/2021/03/07/2021/202103/2021-03-07-java_thread_301/"/>
      <url>/2021/03/07/2021/202103/2021-03-07-java_thread_301/</url>
      
        <content type="html"><![CDATA[<h4 id="synchronized与锁"><a href="#synchronized与锁" class="headerlink" title="synchronized与锁"></a>synchronized与锁</h4><p>首先需要明确的一点是：<strong>Java多线程的锁都是基于对象的，Java中的每一个对象都可以作为一个锁。</strong></p><p>还有一点需要注意的是，我们常听到的类锁其实也是对象锁。</p><p><strong>Java类只有一个Class对象</strong>（<strong>可以有多个实例对象，多个实例共享这个Class对象</strong>），<strong>而Class对象也是特殊的Java对象。所以我们常说的类锁，其实就是Class对象的锁。</strong></p><h5 id="Synchronized关键字（汉译：同步）"><a href="#Synchronized关键字（汉译：同步）" class="headerlink" title="Synchronized关键字（汉译：同步）"></a>Synchronized关键字（汉译：同步）</h5><p>synchronized关键字来给一段代码或一个方法上锁。它通常有以下三种形式<br>示例代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SynchronizedDemo01</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * synchronized 加在静态方法上(关键字在静态方法上，锁为当前Class对象)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">method01</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//code</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * synchronized 加在实例方法上(关键字在静态方法上，锁为当前Class对象)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">method02</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//code</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 关键字在代码块上，锁为括号里面的对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mehtod03</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>        <span class="hljs-keyword">synchronized</span> (obj)&#123;<br>            <span class="hljs-comment">//code</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>“临界区”，指的是某一块代码区域，它同一时刻只能由一个线程执行。</p></blockquote><p>在上面的例子中，如果synchronized关键字在方法上，那临界区就是整个方法内部。而如果是使用synchronized代码块，那临界区就指的是代码块内部的区域。</p><h5 id="java中的几种锁（java6之前都是重量锁）"><a href="#java中的几种锁（java6之前都是重量锁）" class="headerlink" title="java中的几种锁（java6之前都是重量锁）"></a>java中的几种锁（java6之前都是重量锁）</h5><ul><li>无锁状态</li><li>偏向锁状态</li><li>轻量级锁状态</li><li>重量级锁状态</li></ul><p>无锁就是没有对资源进行锁定，任何线程都可以尝试去修改它，无锁在这里不再细讲。</p><p>几种锁会随着竞争情况逐渐升级，锁的升级很容易发生，但是锁降级发生的条件会比较苛刻，锁降级发生在Stop The World期间，当JVM进入安全点的时候，会检查是否有闲置的锁，然后进行降级。</p><blockquote><p>关于锁降级有两点说明：</p></blockquote><blockquote><p>1.不同于大部分文章说锁不能降级，实际上HotSpot JVM 是支持锁降级的，文末有链接。</p></blockquote><blockquote><p>2.上面提到的Stop The World期间，以及安全点，这些知识是属于JVM的知识范畴，本文不做细讲。</p></blockquote><p>下面分别介绍这几种锁以及它们之间的升级。</p><h6 id="Java对象头"><a href="#Java对象头" class="headerlink" title="Java对象头"></a>Java对象头</h6><p>前面我们提到，Java的锁都是基于对象的。首先我们来看看一个对象的“锁”的信息是存放在什么地方的。</p><p>每个Java对象都有对象头。如果是非数组类型，则用2个字宽来存储对象头，如果是数组，则会用3个字宽来存储对象头。在32位处理器中，一个字宽是32位；在64位虚拟机中，一个字宽是64位。对象头的内容如下表：</p><table><thead><tr><th>长度</th><th>内容</th><th>说明</th></tr></thead><tbody><tr><td>32&#x2F;64bit</td><td>Mark Word</td><td>存储对象的hashCode或锁信息等</td></tr><tr><td>32&#x2F;64bit</td><td>Class Metadata Address</td><td>存储到对象类型数据的指针</td></tr><tr><td>32&#x2F;64bit</td><td>Array length</td><td>数组的长度（如果是数组）</td></tr></tbody></table><p>我们主要来看看Mark Word的格式：</p><table><thead><tr><th>锁状态</th><th>29 bit 或 61 bit</th><th>1 bit 是否是偏向锁？</th><th>2 bit 锁标志位</th></tr></thead><tbody><tr><td>无锁</td><td></td><td>0</td><td>01</td></tr><tr><td>偏向锁</td><td>线程ID</td><td>1</td><td>01</td></tr><tr><td>轻量级锁</td><td>指向栈中锁记录的指针</td><td>此时这一位不用于标识偏向锁</td><td>00</td></tr><tr><td>重量级锁</td><td>指向互斥量（重量级锁）的指针</td><td>此时这一位不用于标识偏向锁</td><td>10</td></tr><tr><td>GC标记</td><td></td><td>此时这一位不用于标识偏向锁</td><td>11</td></tr></tbody></table><p>可以看到，当对象状态为偏向锁时，<code>Mark Word</code>存储的是偏向的线程ID；当状态为轻量级锁时，Mark Word存储的是指向线程栈中Lock Record的指针；当状态为重量级锁时，Mark Word为指向堆中的monitor对象的指针。</p><h6 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h6><p>Hotspot的作者经过以往的研究发现大多数情况下<strong>锁不仅不存在多线程竞争，而且总是由同一线程多次获得，于是引入了偏向锁。</strong></p><p>偏向锁会偏向于第一个访问锁的线程，如果在接下来的运行过程中，该锁没有被其他的线程访问，则持有偏向锁的线程将永远不需要触发同步。也就是说，<strong>偏向锁在资源无竞争情况下消除了同步语句，连CAS操作都不做了，提高了程序的运行性能。</strong></p><blockquote><p>偏向锁就是对锁置个变量，如果发现为true，代表资源无竞争，则无需再走各种加锁&#x2F;解锁流程。如果为false，代表存在其他线程竞争资源，那么就会走后面的流程。</p></blockquote><p>####### 实现原理<br>一个线程在第一次进入同步块时，会在对象头和栈帧中的锁记录里存储锁的偏向的线程ID。当下次该线程进入这个同步块时，会去检查锁的Mark Word里面是不是放的自己的线程ID。</p><p>如果是，表明该线程已经获得了锁，以后该线程在进入和退出同步块时不需要花费CAS操作来加锁和解锁 ；如果不是，就代表有另一个线程来竞争这个偏向锁。这个时候会尝试使用CAS来替换Mark Word里面的线程ID为新线程的ID，这个时候要分两种情况：</p><ul><li>成功，表示之前的线程不存在了， Mark Word里面的线程ID为新线程的ID，锁不会升级，仍然为偏向锁；</li><li>失败，表示之前的线程仍然存在，那么暂停之前的线程，设置偏向锁标识为0，并设置锁标志位为00，升级为轻量级锁，会按照轻量级锁的方式进行竞争锁。<blockquote><p>CAS: Compare and Swap</p><p>比较并设置。用于在硬件层面上提供原子性操作。在 Intel 处理器中，比较并交换通过指令cmpxchg实现。 比较是否和给定的数值一致，如果一致则修改，不一致则不修改。</p></blockquote></li></ul><p>线程竞争偏向锁的过程如下：</p><p><img src="http://dbin0123.github.io/images/posts/thread/204/%E5%81%8F%E5%90%91%E9%94%81.png" alt="image"></p><p>图中涉及到了lock record指针指向当前堆栈中的最近一个lock record，是轻量级锁按照先来先服务的模式进行了轻量级锁的加锁。</p><p>####### 撤销偏向锁<br><strong>偏向锁使用了一种等到竞争出现才释放锁的机制</strong>，所以当其他线程尝试竞争偏向锁时， 持有偏向锁的线程才会释放锁。</p><p>偏向锁升级成轻量级锁时，会暂停拥有偏向锁的线程，重置偏向锁标识，这个过程看起来容易，实则开销还是很大的，大概的过程如下：</p><ol><li>在一个安全点（在这个时间点上没有字节码正在执行）停止拥有锁的线程。</li><li>遍历线程栈，如果存在锁记录的话，需要修复锁记录和Mark Word，使其变成无锁状态。</li><li>唤醒被停止的线程，将当前锁升级成轻量级锁。</li></ol><p>所以，如果应用程序里所有的锁通常处于竞争状态，那么偏向锁就会是一种累赘，对于这种情况，我们可以一开始就把偏向锁这个默认功能给关闭：</p><blockquote><p>-XX:UseBiasedLocking&#x3D;false。</p></blockquote><p>下面这个经典的图总结了偏向锁的获得和撤销：</p><p><img src="http://dbin0123.github.io/images/posts/thread/204/%E5%81%8F%E5%90%91%E9%94%812.png" alt="image"></p><h6 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h6><p>多个线程在不同时段获取同一把锁，即不存在锁竞争的情况，也就没有线程阻塞。针对这种情况，JVM采用轻量级锁来避免线程的阻塞与唤醒。</p><p>####### 轻量级锁的加锁<br>JVM会为每个线程在当前线程的栈帧中创建用于存储锁记录的空间，我们称为Displaced Mark Word。如果一个线程获得锁的时候发现是轻量级锁，会把锁的Mark Word复制到自己的Displaced Mark Word里面。</p><p>然后线程尝试用CAS将锁的Mark Word替换为指向锁记录的指针。如果成功，当前线程获得锁，如果失败，表示Mark Word已经被替换成了其他线程的锁记录，说明在与其它线程竞争锁，当前线程就尝试使用自旋来获取锁。</p><blockquote><p>自旋：不断尝试去获取锁，一般用循环来实现。</p></blockquote><p>自旋是需要消耗CPU的，如果一直获取不到锁的话，那该线程就一直处在自旋状态，白白浪费CPU资源。解决这个问题最简单的办法就是指定自旋的次数，例如让其循环10次，如果还没获取到锁就进入阻塞状态。</p><p>但是JDK采用了更聪明的方式——适应性自旋，简单来说就是线程如果自旋成功了，则下次自旋的次数会更多，如果自旋失败了，则自旋的次数就会减少。</p><p>自旋也不是一直进行下去的，如果自旋到一定程度（和JVM、操作系统相关），依然没有获取到锁，称为自旋失败，那么这个线程会阻塞。同时这个锁就会升级成重量级锁。</p><p>####### 轻量级锁的释放：</p><p>在释放锁时，当前线程会使用CAS操作将Displaced Mark Word的内容复制回锁的Mark Word里面。如果没有发生竞争，那么这个复制的操作会成功。如果有其他线程因为自旋多次导致轻量级锁升级成了重量级锁，那么CAS操作会失败，此时会释放锁并唤醒被阻塞的线程。</p><p>一张图说明加锁和释放锁的过程：</p><p><img src="http://dbin0123.github.io/images/posts/thread/204/%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="image"></p><h6 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h6><p>重量级锁依赖于操作系统的互斥量（mutex） 实现的，而操作系统中线程间状态的转换需要相对比较长的时间，所以重量级锁效率很低，但被阻塞的线程不会消耗CPU。</p><p>前面说到，每一个对象都可以当做一个锁，当多个线程同时请求某个对象锁时，对象锁会设置几种状态用来区分请求的线程：</p><blockquote><p>Contention List：所有请求锁的线程将被首先放置到该竞争队列</p><p>Entry List：Contention List中那些有资格成为候选人的线程被移到Entry List</p><p>Wait Set：那些调用wait方法被阻塞的线程被放置到Wait Set</p><p>OnDeck：任何时刻最多只能有一个线程正在竞争锁，该线程称为OnDeck</p><p>Owner：获得锁的线程称为Owner</p><p>!Owner：释放锁的线程</p></blockquote><p>当一个线程尝试获得锁时，如果该锁已经被占用，则会将该线程封装成一个ObjectWaiter对象插入到Contention List的队列的队首，然后调用park函数挂起当前线程。</p><p>当线程释放锁时，会从Contention List或EntryList中挑选一个线程唤醒，被选中的线程叫做Heir presumptive即假定继承人，假定继承人被唤醒后会尝试获得锁，但synchronized是非公平的，所以假定继承人不一定能获得锁。这是因为对于重量级锁，线程先自旋尝试获得锁，这样做的目的是为了减少执行操作系统同步操作带来的开销。如果自旋不成功再进入等待队列。这对那些已经在等待队列中的线程来说，稍微显得不公平，还有一个不公平的地方是自旋线程可能会抢占了Ready线程的锁。</p><p>如果线程获得锁后调用Object.wait方法，则会将线程加入到WaitSet中，当被Object.notify唤醒后，会将线程从WaitSet移动到Contention List或EntryList中去。需要注意的是，当调用一个锁对象的wait或notify方法时，<strong>如当前锁的状态是偏向锁或轻量级锁则会先膨胀成重量级锁</strong>。</p><h6 id="总结锁的升级流程"><a href="#总结锁的升级流程" class="headerlink" title="总结锁的升级流程"></a>总结锁的升级流程</h6><p>每一个线程在准备获取共享资源时： 第一步，检查MarkWord里面是不是放的自己的ThreadId ,如果是，表示当前线程是处于 “偏向锁” 。</p><p>第二步，如果MarkWord不是自己的ThreadId，锁升级，这时候，用CAS来执行切换，新的线程根据MarkWord里面现有的ThreadId，通知之前线程暂停，之前线程将Markword的内容置为空。</p><p>第三步，两个线程都把锁对象的HashCode复制到自己新建的用于存储锁的记录空间，接着开始通过CAS操作， 把锁对象的MarKword的内容修改为自己新建的记录空间的地址的方式竞争MarkWord。</p><p>第四步，第三步中成功执行CAS的获得资源，失败的则进入自旋 。</p><p>第五步，自旋的线程在自旋过程中，成功获得资源(即之前获的资源的线程执行完成并释放了共享资源)，则整个状态依然处于 轻量级锁的状态，如果自旋失败 。</p><p>第六步，进入重量级锁的状态，这个时候，自旋的线程进行阻塞，等待之前线程执行完成并唤醒自己。</p><h6 id="各种锁的优缺点对比"><a href="#各种锁的优缺点对比" class="headerlink" title="各种锁的优缺点对比"></a>各种锁的优缺点对比</h6><p>|锁|优点|缺点|适用场景|<br>| — |— | — | — |<br>|偏向锁|加锁和解锁不需要额外的消耗，和执行非同步方法比仅存在纳秒级的差距。|如果线程间存在锁竞争，会带来额外的锁撤销的消耗。|适用于只有一个线程访问同步块场景。|<br>|轻量级锁|竞争的线程不会阻塞，提高了程序的响应速度。|如果始终得不到锁竞争的线程使用自旋会消耗CPU。|追求响应时间。同步块执行速度非常快。|<br>|重量级锁|线程竞争不使用自旋，不会消耗CPU。|线程阻塞，响应时间缓慢。|追求吞吐量。同步块执行时间较长。|</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> java多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> synchronized </tag>
            
            <tag> Lock </tag>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年03月06日 《深入浅出 Java 多线程》第一篇 ThreadLocal类(附加)</title>
      <link href="/2021/03/06/2021/202103/2021-03-06-java_thread_102/"/>
      <url>/2021/03/06/2021/202103/2021-03-06-java_thread_102/</url>
      
        <content type="html"><![CDATA[<h4 id="ThreadLocal类-附加"><a href="#ThreadLocal类-附加" class="headerlink" title="ThreadLocal类(附加)"></a>ThreadLocal类(附加)</h4><ul><li>ThreadLocal是一个本地线程副本变量工具类。内部是一个弱引用的Map来维护。这里不详细介绍它的原理，而是只是介绍它的使用，以后有独立章节来介绍ThreadLocal类的原理。</li></ul><p>有些朋友称ThreadLocal为线程本地变量或线程本地存储。严格来说，ThreadLocal类并不属于多线程间的通信，而是让每个线程有自己”独立“的变量，线程之间互不影响。它为每个线程都创建一个副本，每个线程可以访问自己内部的副本变量。</p><p>ThreadLocal类最常用的就是set方法和get方法。示例代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">public class ThreadLocalDemo &#123;<br>    static class ThreadA implements Runnable &#123;<br>        private ThreadLocal&lt;String&gt; threadLocal;<br><br>        public ThreadA(ThreadLocal&lt;String&gt; threadLocal) &#123;<br>            this.threadLocal = threadLocal;<br>        &#125;<br><br>        @Override<br>        public void run() &#123;<br>            threadLocal.set(&quot;A&quot;);<br>            try &#123;<br>                Thread.sleep(1000);<br>            &#125; catch (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(&quot;ThreadA输出：&quot; + threadLocal.get());<br>        &#125;<br><br>        static class ThreadB implements Runnable &#123;<br>            private ThreadLocal&lt;String&gt; threadLocal;<br><br>            public ThreadB(ThreadLocal&lt;String&gt; threadLocal) &#123;<br>                this.threadLocal = threadLocal;<br>            &#125;<br><br>            @Override<br>            public void run() &#123;<br>                threadLocal.set(&quot;B&quot;);<br>                try &#123;<br>                    Thread.sleep(1000);<br>                &#125; catch (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                System.out.println(&quot;ThreadB输出：&quot; + threadLocal.get());<br>            &#125;<br>        &#125;<br><br>        public static void main(String[] args) &#123;<br>            ThreadLocal&lt;String&gt; threadLocal = new ThreadLocal&lt;&gt;();<br>            new Thread(new ThreadA(threadLocal)).start();<br>            new Thread(new ThreadB(threadLocal)).start();<br>        &#125;<br>    &#125;<br>&#125;<br><br>// 输出：<br>ThreadA输出：A<br>ThreadB输出：B<br></code></pre></td></tr></table></figure><p>可以看到，虽然两个线程使用的同一个ThreadLocal实例（通过构造方法传入），但是它们各自可以存取自己当前线程的一个值。</p><p>那ThreadLocal有什么作用呢？如果只是单纯的想要线程隔离，在每个线程中声明一个私有变量就好了呀，为什么要使用ThreadLocal？</p><p>如果开发者希望将类的某个静态变量（user ID或者transaction ID）与线程状态关联，则可以考虑使用ThreadLocal。</p><p>最常见的ThreadLocal使用场景为用来解决数据库连接、Session管理等。数据库连接和Session管理涉及多个复杂对象的初始化和关闭。如果在每个线程中声明一些私有变量来进行操作，那这个线程就变得不那么“轻量”了，需要频繁的创建和关闭连接。</p><p>InheritableThreadLocal</p><p>&#x3D;&#x3D;InheritableThreadLocal类与ThreadLocal类稍有不同&#x3D;&#x3D;，Inheritable是继承的意思。它&#x3D;&#x3D;不仅仅是当前线程可以存取副本值，而且它的子线程也可以存取这个副本值。&#x3D;&#x3D;</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> java多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> ThreadLocal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年03月06日 《深入浅出 Java 多线程》第一篇 基础篇</title>
      <link href="/2021/03/06/2021/202103/2021-03-06-java_thread_101/"/>
      <url>/2021/03/06/2021/202103/2021-03-06-java_thread_101/</url>
      
        <content type="html"><![CDATA[<h3 id="第一章-进程与线程的基本概念"><a href="#第一章-进程与线程的基本概念" class="headerlink" title="第一章 进程与线程的基本概念"></a>第一章 进程与线程的基本概念</h3><h4 id="1-1-进程产生的背景"><a href="#1-1-进程产生的背景" class="headerlink" title="1.1 进程产生的背景"></a>1.1 进程产生的背景</h4><ul><li>进程:应用程序在内存中分配的空间，也就是正在运行的程序<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">进程中CPU采用时间片轮转的方式运行进程：CPU为每个进程分配一个时间段，称作它的时间片<br></code></pre></td></tr></table></figure></li><li>上下文切换:进程&#x2F;线程中CPU来回切换被称为上下问切换<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">进程让操作系统的并发性成为了可能，而线程让进程的内部并发成为了可能<br></code></pre></td></tr></table></figure></li></ul><p>多进程方式确实可以实现并发，但使用多线程，有以下几个好处：</p><ol><li>进程间的通信比较复杂，而线程间的通信比较简单，通常情况下，我们需要使用共享资源，这些资源在线程间的通信比较容易。</li><li>进程是重量级的，而线程是轻量级的，故多线程方式的系统开销更小。</li></ol><ul><li>进程和线程的区别(本质的区别是<strong>是否单独占有内存地址空间及其它系统资源（比如I&#x2F;O）</strong>)<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">1. 进程间单独占用内存地址,各进程进不相互干扰; <br>2. 一个进程不可用不会影响其他进程;<br>3. 占用内存大小不一样(进程占用内存大,开销大,线程只需要保存寄存器和栈信息，开销较小);<br></code></pre></td></tr></table></figure>++<strong>进程是操作系统进行资源分配的基本单位，而线程是操作系统进行调度的基本单位，即CPU分配时间的单位</strong>++</li></ul><h4 id="1-2-上下文切换-程序计数器"><a href="#1-2-上下文切换-程序计数器" class="headerlink" title="1.2 上下文切换(&#x3D;&#x3D;程序计数器&#x3D;&#x3D;)"></a>1.2 上下文切换(<strong>&#x3D;&#x3D;程序计数器&#x3D;&#x3D;</strong>)</h4><p>上下文切换（有时也称做进程切换或任务切换）是指 CPU 从一个进程（或线程）切换到另一个进程（或线程）。上下文是指某一时间点 CPU 寄存器和程序计数器的内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">举例说明 线程A - B<br>1.先挂起线程A，将其在cpu中的状态保存在内存中。<br>2.在内存中检索下一个线程B的上下文并将其在 CPU 的寄存器中恢复,执行B线程。<br>3.当B执行完，根据程序计数器中指向的位置恢复线程A。<br></code></pre></td></tr></table></figure><p>上下文切换将<strong>消耗大量的 CPU 时间，++故线程也不是越多越好++</strong></p><h3 id="第二章-Java多线程入门类和接口"><a href="#第二章-Java多线程入门类和接口" class="headerlink" title="第二章 Java多线程入门类和接口"></a>第二章 Java多线程入门类和接口</h3><p>JDK提供了Thread类和Runnable接口来让我们实现自己的“线程”类</p><h4 id="2-1-继承Thread类-jdk8演示-后续代码没有特殊说明都使用jdk8"><a href="#2-1-继承Thread类-jdk8演示-后续代码没有特殊说明都使用jdk8" class="headerlink" title="2.1 继承Thread类(jdk8演示(后续代码没有特殊说明都使用jdk8))"></a>2.1 继承Thread类(jdk8演示(后续代码没有特殊说明都使用jdk8))</h4><ul><li>继承Thread接口,重写run方法</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">import java.util.concurrent.TimeUnit;<br><br>/**<br> * @ClassName : ExtendThread<br> * @Description : 继承Thread类实现多线程<br> * @Author : dbin0123<br> * @Date: 2021-03-02 22:44<br> */<br>public class ExtendThread extends Thread &#123;<br><br>    @Override<br>    public void run() &#123;<br>        //需要线程执行的代码<br>        System.out.println(&quot;线程ID:&quot; + this.getId() + &quot;, 线程名称:&quot; + this.getName());<br>    &#125;<br><br>    public static void main(String[] args) throws InterruptedException &#123;<br>        Thread mainThread = Thread.currentThread();<br>        System.out.println(&quot;主线程运行, 线程ID:&quot; + mainThread.getId() + &quot;, 线程名称:&quot; + mainThread.getName());<br>        ExtendThread thread = new ExtendThread();<br>        //注意不可多次调用start()方法。在第一次调用start()方法后，再次调用start()方法会抛出异常<br>        thread.start();<br>        TimeUnit.SECONDS.sleep(20);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">主线程运行, 线程ID:1, 线程名称:main<br>线程ID:12, 线程名称:Thread-0<br></code></pre></td></tr></table></figure><h5 id="2-1-1-Thread-init方法介绍"><a href="#2-1-1-Thread-init方法介绍" class="headerlink" title="2.1.1 Thread.init方法介绍"></a>2.1.1 Thread.init方法介绍</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">/**<br> * Initializes a Thread.<br> *<br> * @param g the Thread group<br> * @param target the object whose run() method gets called<br> * @param name the name of the new Thread<br> * @param stackSize the desired stack size for the new thread, or<br> *        zero to indicate that this parameter is to be ignored.<br> * @param acc the AccessControlContext to inherit, or<br> *            AccessController.getContext() if null<br> * @param inheritThreadLocals if &#123;@code true&#125;, inherit initial values for<br> *            inheritable thread-locals from the constructing thread<br> */<br>private void init(ThreadGroup g, Runnable target, String name,<br>                  long stackSize, AccessControlContext acc,<br>                  boolean inheritThreadLocals)&#123;<br>                      //......<br>                  &#125;<br></code></pre></td></tr></table></figure><ul><li>ThreadGroup g:线程组，指定这个线程是在哪个线程组下；</li><li>Runnable target:指定要执行的任务；</li><li>String name:线程的名字，多个线程的名字是可以重复的。如果不指定名字,使用( “Thread-“ + nextThreadNum())生成</li><li>long stackSize:新线程所需的堆栈大小，或者0表示该参数将被忽略。</li><li>AccessControlContext acc:一般我们是不会使用它的，那什么时候会使用到这个变量呢？可以参考这个stackoverflow的问题：<a href="https://stackoverflow.com/questions/13516766/restrict-permissions-to-threads-which-execute-third-party-software">Restrict permissions to threads which execute third party software</a></li><li>boolean inheritThreadLocals:可继承的ThreadLocal，见片段4，Thread类里面有两个私有属性来支持ThreadLocal，我们会在后面的章节介绍ThreadLocal的概念</li></ul><p>Thread类的几个常用的方法：</p><ul><li>currentThread()：静态方法，返回对当前正在执行的线程对象的引用；</li><li>start()：开始执行线程的方法，java虚拟机会调用线程内的run()方法；</li><li>yield()：yield在英语里有放弃的意思，同样，这里的yield()指的是当前线程愿意让出对当前处理器的占用。**++这里需要注意的是++，就算当前线程调用了yield()方法，程序在调度的时候，也还有可能继续运行这个线程的**；</li><li>sleep()：静态方法，使当前线程睡眠一段时间；</li><li>join()：使当前线程等待另一个线程执行完毕之后再继续执行，内部调用的是Object类的wait方法实现的；</li></ul><h4 id="2-2-实现Runnable接口"><a href="#2-2-实现Runnable接口" class="headerlink" title="2.2 实现Runnable接口"></a>2.2 实现Runnable接口</h4><ul><li>实现Runnable接口,实现run方法</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">import java.util.concurrent.TimeUnit;<br><br>/**<br> * @ClassName : ImplRunnable<br> * @Description : 实现Runnable接口实现多线程<br> * @Author : dbin0123<br> * @Date: 2021-03-02 22:52<br> */<br>public class ImplRunnable implements Runnable&#123;<br>    @Override<br>    public void run() &#123;<br>        //需要线程执行的代码<br>        Thread thread = Thread.currentThread();<br>        System.out.println(&quot;线程ID:&quot; + thread.getId() + &quot;, 线程名称:&quot; + thread.getName());<br>    &#125;<br><br>    public static void main(String[] args) throws InterruptedException &#123;<br>        Thread mainThread = Thread.currentThread();<br>        System.out.println(&quot;主线程运行, 线程ID:&quot; + mainThread.getId() + &quot;, 线程名称:&quot; + mainThread.getName());<br>        Thread thread = new Thread(new ImplRunnable());<br>        thread.start();<br>        TimeUnit.SECONDS.sleep(20);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">主线程运行, 线程ID:1, 线程名称:main<br>线程ID:12, 线程名称:Thread-0<br></code></pre></td></tr></table></figure><h4 id="2-3-Callable、Future与FutureTask"><a href="#2-3-Callable、Future与FutureTask" class="headerlink" title="2.3 Callable、Future与FutureTask"></a>2.3 Callable、Future与FutureTask</h4><p>JDK提供了Callable接口与Future接口为我们解决这个问题，这也是所谓的“异步”模型。</p><h5 id="Callable-接口"><a href="#Callable-接口" class="headerlink" title="Callable 接口"></a>Callable 接口</h5><p>Callable与Runnable类似，同样是只有一个抽象方法的函数式接口。不同的是，Callable提供的方法是有返回值的，而且支持泛型。Callable一般是配合线程池工具ExecutorService来使用的;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">public interface Callable&lt;V&gt; &#123;<br>    V call() throws Exception;<br>&#125;<br></code></pre></td></tr></table></figure><p>示例代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">import java.util.concurrent.Callable;<br>import java.util.concurrent.ExecutionException;<br>import java.util.concurrent.ExecutorService;<br>import java.util.concurrent.Executors;<br>import java.util.concurrent.Future;<br><br>/**<br> * @ClassName : CallableThread<br> * @Description : 使用Callable实现多线程<br> * @Author : dbin0123<br> * @Date: 2021-03-02 23:16<br> */<br>public class CallableThread implements Callable&lt;String&gt; &#123;<br>    /**<br>     * 执行方法<br>     *<br>     * @return<br>     * @throws Exception<br>     */<br>    @Override<br>    public String call() throws Exception &#123;<br>        //需要线程执行的代码<br>        Thread thread = Thread.currentThread();<br>        System.out.println(&quot;线程ID:&quot; + thread.getId() + &quot;, 线程名称:&quot; + thread.getName());<br>        return &quot;OK&quot;;<br>    &#125;<br><br>    public static void main(String[] args) throws ExecutionException, InterruptedException &#123;<br>        Thread mainThread = Thread.currentThread();<br>        System.out.println(&quot;主线程运行, 线程ID:&quot; + mainThread.getId() + &quot;, 线程名称:&quot; + mainThread.getName());<br>        ExecutorService executor = Executors.newSingleThreadExecutor();<br>        Future&lt;String&gt; submit = executor.submit(new CallableThread());<br>        System.out.println(&quot;线程相应:&quot; + submit.get());<br>        executor.shutdown();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>响应数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">主线程运行, 线程ID:1, 线程名称:main<br>线程ID:12, 线程名称:pool-1-thread-1<br>线程相应:OK<br></code></pre></td></tr></table></figure><h5 id="Future接口"><a href="#Future接口" class="headerlink" title="Future接口"></a>Future接口</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">public abstract interface Future&lt;V&gt; &#123;<br>    public abstract boolean cancel(boolean paramBoolean);<br>    public abstract boolean isCancelled();<br>    public abstract boolean isDone();<br>    public abstract V get() throws InterruptedException, ExecutionException;<br>    public abstract V get(long paramLong, TimeUnit paramTimeUnit)<br>            throws InterruptedException, ExecutionException, TimeoutException;<br>&#125;<br></code></pre></td></tr></table></figure><p>cancel方法是试图取消一个线程的执行。</p><p>注意是试图取消，并不一定能取消成功。因为任务可能已完成、已取消、或者一些其它因素不能取消，存在取消失败的可能。boolean类型的返回值是“是否取消成功”的意思。参数paramBoolean表示是否采用中断的方式取消线程执行( true如果执行该任务的线程应该被中断; 否则，正在进行的任务被允许完成)。</p><p>所以有时候，为了让任务有能够取消的功能，就使用Callable来代替Runnable。如果为了可取消性而使用 Future但又不提供可用的结果，则可以声明 Future&lt;?&gt;形式类型、并返回 null作为底层任务的结果。</p><h5 id="FutureTask类"><a href="#FutureTask类" class="headerlink" title="FutureTask类"></a>FutureTask类</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">import java.util.concurrent.Callable;<br>import java.util.concurrent.ExecutionException;<br>import java.util.concurrent.ExecutorService;<br>import java.util.concurrent.Executors;<br>import java.util.concurrent.FutureTask;<br><br>/**<br> * @ClassName : FutureTaskThread<br> * @Description : FutureTask实现多线程<br> * @Author : dbin0123<br> * @Date: 2021-03-02 23:25<br> */<br>public class FutureTaskThread implements Callable&lt;String&gt; &#123;<br>    @Override<br>    public String call() throws Exception &#123;<br>        //需要线程执行的代码<br>        Thread thread = Thread.currentThread();<br>        System.out.println(&quot;线程ID:&quot; + thread.getId() + &quot;, 线程名称:&quot; + thread.getName());<br>        return &quot;OK&quot;;<br>    &#125;<br><br>    public static void main(String[] args) throws ExecutionException, InterruptedException &#123;<br>        Thread mainThread = Thread.currentThread();<br>        System.out.println(&quot;主线程运行, 线程ID:&quot; + mainThread.getId() + &quot;, 线程名称:&quot; + mainThread.getName());<br>        ExecutorService executor = Executors.newCachedThreadPool();<br>        FutureTask&lt;String&gt; futureTask = new FutureTask&lt;&gt;(new FutureTaskThread());<br>        //此时调用submit是没返回值的,可以通过futureTask获取<br>        executor.submit(futureTask);<br>        //Future.get方法会阻塞直到获取线程相应数据<br>        System.out.println(&quot;线程响应:&quot; + futureTask.get());<br>        executor.shutdown();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>响应:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">主线程运行, 线程ID:1, 线程名称:main<br>线程ID:12, 线程名称:pool-1-thread-1<br>线程响应:OK<br></code></pre></td></tr></table></figure><p>在很多高并发的环境下，有可能Callable和FutureTask会创建多次。FutureTask能够在高并发环境下确保任务只执行一次。这块有兴趣的同学可以参看FutureTask源码。</p><h6 id="FutureTask的几个状态"><a href="#FutureTask的几个状态" class="headerlink" title="FutureTask的几个状态"></a>FutureTask的几个状态</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">/**<br>  *<br>  * state可能的状态转变路径如下：<br>  * NEW -&gt; COMPLETING -&gt; NORMAL<br>  * NEW -&gt; COMPLETING -&gt; EXCEPTIONAL<br>  * NEW -&gt; CANCELLED<br>  * NEW -&gt; INTERRUPTING -&gt; INTERRUPTED<br>  */<br>private volatile int state;<br>private static final int NEW          = 0;<br>private static final int COMPLETING   = 1;<br>private static final int NORMAL       = 2;<br>private static final int EXCEPTIONAL  = 3;<br>private static final int CANCELLED    = 4;<br>private static final int INTERRUPTING = 5;<br>private static final int INTERRUPTED  = 6;<br></code></pre></td></tr></table></figure><p>state表示任务的运行状态，初始状态为NEW。运行状态只会在set、setException、cancel方法中终止。COMPLETING、INTERRUPTING是任务完成后的瞬时状态。</p><h4 id="第三章-线程组和线程优先级"><a href="#第三章-线程组和线程优先级" class="headerlink" title="第三章 线程组和线程优先级"></a>第三章 线程组和线程优先级</h4><h5 id="3-1-线程组-ThreadGroup"><a href="#3-1-线程组-ThreadGroup" class="headerlink" title="3.1 线程组(ThreadGroup)"></a>3.1 线程组(ThreadGroup)</h5><p>Java中用ThreadGroup来表示线程组，我们可以使用线程组对线程进行批量控制。每个Thread必然存在于一个ThreadGroup中，Thread不能独立于ThreadGroup存在。执行main()方法线程的名字是main(默认)，如果在new Thread时没有显式指定，那么默认将父线程（当前执行new Thread的线程）线程组设置为自己的线程组。</p><p>示例代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">/**<br> * @ClassName : ThreadGroup<br> * @Description : 线程组<br> * @Author : dbin0123<br> * @Date: 2021-03-03 21:08<br> */<br>public class ThreadGroup implements Runnable &#123;<br><br><br>    @Override<br>    public void run() &#123;<br>        Thread thread = Thread.currentThread();<br>        java.lang.ThreadGroup threadGroup = thread.getThreadGroup();<br>        System.out.println(&quot;run方法中的threadName:&quot; + thread.getName() + &quot;,threadGroupName：&quot; + threadGroup.getName());<br>    &#125;<br><br>    public static void main(String[] args) &#123;<br>        new Thread(new ThreadGroup()).start();<br>        Thread thread = Thread.currentThread();<br>        java.lang.ThreadGroup threadGroup = thread.getThreadGroup();<br>        System.out.println(&quot;main方法中的threadName:&quot; + thread.getName() + &quot;,threadGroupName：&quot; + threadGroup.getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>响应：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">main方法中的threadName:main,threadGroupName：main<br>run方法中的threadName:Thread-0,threadGroupName：main<br></code></pre></td></tr></table></figure><p>ThreadGroup管理着它下面的Thread，<strong>ThreadGroup是一个标准的向下引用的树状结构，这样设计的原因是防止”上级”线程被”下级”线程引用而无法有效地被GC回收</strong></p><h5 id="3-2-线程的优先级"><a href="#3-2-线程的优先级" class="headerlink" title="3.2 线程的优先级"></a>3.2 线程的优先级</h5><p>Java中线程优先级可以指定，范围是1~10。Java默认的线程优先级为5, 但是并不是所有的操作系统都支持10级优先级的划分（比如有些操作系统只支持3级划分：低，中，高），Java只是给操作系统一个优先级的参考值，线程最终在操作系统的优先级是多少还是由操作系统决定。线程的优先级会在线程被调用之前设定。</p><p>通常情况下，高优先级的线程将会比低优先级的线程有更高的几率得到执行。我们使用方法Thread类的&#x3D;&#x3D;setPriority()&#x3D;&#x3D;实例方法来设定线程的优先级。<br><strong>Java程序中对线程所设置的优先级只是给操作系统一个建议，操作系统不一定会采纳。而真正的调用顺序，是由操作系统的线程调度算法决定的</strong></p><p><strong>如果某个线程优先级大于线程所在线程组的最大优先级，那么该线程的优先级将会失效，取而代之的是线程组的最大优先级</strong><br>示例代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">/**<br> * @ClassName : ThreadPriority<br> * @Description : 线程优先级设置<br> * @Author : dbin0123<br> * @Date: 2021-03-03 21:16<br> */<br>public class ThreadPriority implements Runnable &#123;<br>    @Override<br>    public void run() &#123;<br>        Thread thread = Thread.currentThread();<br>        System.out.println(&quot;当前线程名称:&quot; + thread.getName() + &quot;, 当前线程组:&quot; + thread.getThreadGroup().getName() + &quot;, 当前线程级别:&quot; + thread.getPriority());<br>    &#125;<br><br>    public static void main(String[] args) &#123;<br>        Thread thread = Thread.currentThread();<br>        System.out.println(&quot;main方法,当前线程级别:&quot; + thread.getPriority());<br><br>        Thread priorityThread = new Thread(new ThreadPriority());<br>        priorityThread.setPriority(10);<br>        priorityThread.start();<br><br>        java.lang.ThreadGroup threadGroup = new java.lang.ThreadGroup(&quot;thread-group-01&quot;);<br>        threadGroup.setMaxPriority(5);<br>        Thread threadGroupPriorityThread = new Thread(threadGroup, new ThreadPriority());<br>        threadGroupPriorityThread.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>响应数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">main方法,当前线程级别:5<br>当前线程名称:Thread-0, 当前线程组:main, 当前线程级别:10<br>当前线程名称:Thread-1, 当前线程组:thread-group-01, 当前线程级别:5<br></code></pre></td></tr></table></figure><p>线程优先级示例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">/**<br> * @ClassName : ThreadPriority2<br> * @Description : 线程优先级2<br> * @Author : dbin0123<br> * @Date: 2021-03-03 21:33<br> */<br>public class ThreadPriority2 extends Thread &#123;<br><br>    public ThreadPriority2(String name) &#123;<br>        super(name);<br>    &#125;<br><br>    @Override<br>    public void run() &#123;<br>        Thread thread = Thread.currentThread();<br>        System.out.println(String.format(&quot;当前执行的线程是：%s，优先级：%d&quot;, thread.getName(), thread.getPriority()));<br>    &#125;<br><br>    public static void main(String[] args) &#123;<br>        for (int i = 1; i &lt;= 10; i++) &#123;<br>            ThreadPriority2 threadPriority2 = new ThreadPriority2(&quot;线程名称 &quot; + i);<br>            threadPriority2.setPriority(i);<br>            threadPriority2.start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>响应(&#x3D;&#x3D;说明不是线程的优先级越高就一定越先执行&#x3D;&#x3D;)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">当前执行的线程是：线程名称 7，优先级：7<br>当前执行的线程是：线程名称 1，优先级：1<br>当前执行的线程是：线程名称 2，优先级：2<br>当前执行的线程是：线程名称 4，优先级：4<br>当前执行的线程是：线程名称 6，优先级：6<br>当前执行的线程是：线程名称 5，优先级：5<br>当前执行的线程是：线程名称 3，优先级：3<br>当前执行的线程是：线程名称 10，优先级：10<br>当前执行的线程是：线程名称 9，优先级：9<br>当前执行的线程是：线程名称 8，优先级：8<br></code></pre></td></tr></table></figure><ul><li>守护线程（Daemon）<br>线程分为两种，<strong>用户线程</strong>和<strong>守护线程</strong><br>守护线程和用户线程区别不大，可以理解为特殊的用户线程。特殊就特殊在如果程序中所有的用户线程都退出了，那么所有的守护线程就都会被杀死，很好理解，没有被守护的对象了，也不需要守护线程了<br>创建守护线程的两种方式</li></ul><ol><li>thread.setDaemon(true);&#x2F;&#x2F;必须在线程启动start()方法之前设置</li><li>Timer timer &#x3D; new Timer(true)</li></ol><h5 id="3-3-线程组的常用方法"><a href="#3-3-线程组的常用方法" class="headerlink" title="3.3 线程组的常用方法"></a>3.3 线程组的常用方法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">public class ThreadGroup implements Thread.UncaughtExceptionHandler &#123;<br>    private final ThreadGroup parent; // 父亲ThreadGroup<br>    String name; // ThreadGroupr 的名称<br>    int maxPriority; // 线程最大优先级<br>    boolean destroyed; // 是否被销毁<br>    boolean daemon; // 是否守护线程<br>    boolean vmAllowSuspension; // 是否可以中断<br><br>    int nUnstartedThreads = 0; // 还未启动的线程<br>    int nthreads; // ThreadGroup中线程数目<br>    Thread threads[]; // ThreadGroup中的线程<br><br>    int ngroups; // 线程组数目<br>    ThreadGroup groups[]; // 线程组数组<br>    <br>    // 检查parent ThreadGroup<br>    private static Void checkParentAccess(ThreadGroup parent) &#123;<br>        parent.checkAccess();<br>        return null;<br>    &#125;<br><br>    // 判断当前运行的线程是否具有修改线程组的权限<br>    public final void checkAccess() &#123;<br>        SecurityManager security = System.getSecurityManager();<br>        if (security != null) &#123;<br>            security.checkAccess(this);<br>        &#125;<br>    &#125;<br>    //.....<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="第四章-Java线程的状态及主要转化方法"><a href="#第四章-Java线程的状态及主要转化方法" class="headerlink" title="第四章 Java线程的状态及主要转化方法"></a>第四章 Java线程的状态及主要转化方法</h4><h5 id="4-1-Java线程的6个状态"><a href="#4-1-Java线程的6个状态" class="headerlink" title="4.1 Java线程的6个状态"></a>4.1 Java线程的6个状态</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">// Thread.State 源码<br>public enum State &#123;<br>    NEW,<br>    RUNNABLE,<br>    BLOCKED,<br>    WAITING,<br>    TIMED_WAITING,<br>    TERMINATED;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>NEW(new) :处于NEW状态的线程此时尚未启动。这里的尚未启动指的是还没调用Thread实例的start()方法<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">private void testStateNew() &#123;<br>    Thread thread = new Thread(() -&gt; &#123;&#125;);<br>    System.out.println(thread.getState()); // 输出 NEW <br>&#125;<br></code></pre></td></tr></table></figure></li><li>RUNNABLE(runnable):表示当前线程正在运行中。处于RUNNABLE状态的线程在Java虚拟机中运行，也有可能在等待CPU分配资源</li><li>BLOCKED(blocked):阻塞状态。处于BLOCKED状态的线程正等待锁的释放以进入同步区。</li><li>WAITING(waiting):等待状态。处于等待状态的线程变成RUNNABLE状态需要其他线程唤醒。<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">1. Object.wait()：使当前线程处于等待状态直到另一个线程唤醒它；<br>2. Thread.join()：等待线程执行完毕，底层调用的是Object实例的wait方法；<br>3. LockSupport.park()：除非获得调用许可，否则禁用当前线程进行线程调度。<br></code></pre></td></tr></table></figure></li><li>TIMED_WAITING(time_waiting):超时等待状态。线程等待一个具体的时间，时间到后会被自动唤醒。<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">Thread.sleep(long millis)：使当前线程睡眠指定时间；<br>Object.wait(long timeout)：线程休眠指定时间，等待期间可以通过notify()/notifyAll()唤醒；<br>Thread.join(long millis)：等待当前线程最多执行millis毫秒，如果millis为0，则会一直执行；<br>LockSupport.parkNanos(long nanos)： 除非获得调用许可，否则禁用当前线程进行线程调度指定时间；<br>LockSupport.parkUntil(long deadline)：同上，也是禁止线程进行调度指定时间；<br></code></pre></td></tr></table></figure></li><li>TERMINATED(terminated):终止状态。此时线程已执行完毕。<br><img src="http://concurrent.redspider.group/article/01/imgs/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2%E5%9B%BE.png" alt="image"></li></ul><h5 id="4-2-BLOCKED与RUNNABLE状态的转换"><a href="#4-2-BLOCKED与RUNNABLE状态的转换" class="headerlink" title="4.2 BLOCKED与RUNNABLE状态的转换"></a>4.2 BLOCKED与RUNNABLE状态的转换</h5><p>示例代码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">/**<br> * @ClassName : ThreadStatusBlocked<br> * @Description : 线程阻塞状态转运行状态<br> * @Author : dbin0123<br> * @Date: 2021-03-03 21:58<br> */<br>public class ThreadStatusBlocked implements Runnable&#123;<br>    private static Object obj = new Object();<br>    @Override<br>    public void run() &#123;<br>        synchronized (obj)  &#123;<br>            try &#123;<br>                Thread.sleep(4000L);//使1线程进入TIMED_WAITING(超时等等状态)<br>            &#125; catch (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    public static void main(String[] args) throws InterruptedException &#123;<br>        Thread threadBlocked01 = new Thread(new ThreadStatusBlocked(), &quot;1&quot;);<br>        Thread threadBlocked02 = new Thread(new ThreadStatusBlocked(), &quot;2&quot;);<br>        threadBlocked01.start();<br>        Thread.sleep(3000L);<br>        threadBlocked02.start();//线程2等等obj锁 BLOCKED(锁定)<br>        System.out.println(threadBlocked01.getName() + &quot;:&quot; + threadBlocked01.getState());<br>        System.out.println(threadBlocked02.getName() + &quot;:&quot; + threadBlocked02.getState());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">1:TIMED_WAITING<br>2:BLOCKED<br></code></pre></td></tr></table></figure><ul><li>状态流转<ul><li>1的状态转换过程：RUNNABLE（1.start()） -&gt; TIMED_WATING（Thread.sleep()）-&gt;RUNABLE（sleep()时间到）-&gt;BLOCKED(未抢到锁) -&gt; TERMINATED</li><li>2的状态转换过程：RUNNABLE（2.start()) -&gt; BLOCKED(未抢到锁) -&gt;TERMINATED</li></ul></li></ul><h5 id="4-3-WAITING状态与RUNNABLE状态的转换"><a href="#4-3-WAITING状态与RUNNABLE状态的转换" class="headerlink" title="4.3 WAITING状态与RUNNABLE状态的转换"></a>4.3 WAITING状态与RUNNABLE状态的转换</h5><p>根据转换图我们知道有3个方法可以使线程从RUNNABLE状态转为WAITING状态。</p><ul><li>Object.wait()&#x2F;&#x2F;<strong>&#x3D;&#x3D;线程必须持有锁,调用wait方法会主动释放锁;&#x3D;&#x3D;</strong></li></ul><p>调用wait()方法前线程必须持有对象的锁。</p><p>线程调用wait()方法时，会释放当前的锁，直到有其他线程调用notify()&#x2F;notifyAll()方法唤醒等待锁的线程。</p><p>需要注意的是，其他线程调用notify()方法只会唤醒单个等待锁的线程，如有有多个线程都在等待这个锁的话不一定会唤醒到之前调用wait()方法的线程。</p><p>同样，调用notifyAll()方法唤醒所有等待锁的线程之后，也不一定会马上把时间片分给刚才放弃锁的那个线程，具体要看系统的调度。</p><ul><li>Thread.join()</li></ul><p>调用join()方法不会释放锁，会一直等待当前线程执行完毕（转换为TERMINATED状态）。</p><p>join方法示例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">/**<br> * @ClassName : ThreadStatusBlocked<br> * @Description : 线程阻塞状态转运行状态<br> * @Author : dbin0123<br> * @Date: 2021-03-03 21:58<br> */<br>public class ThreadStatusJoin implements Runnable&#123;<br>    private static Object obj = new Object();<br>    @Override<br>    public void run() &#123;<br>        synchronized (obj)  &#123;<br>            try &#123;<br>                Thread.sleep(4000L);<br>            &#125; catch (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    public static void main(String[] args) throws InterruptedException &#123;<br>        Thread threadBlocked01 = new Thread(new ThreadStatusJoin(), &quot;1&quot;);<br>        Thread threadBlocked02 = new Thread(new ThreadStatusJoin(), &quot;2&quot;);<br>        threadBlocked01.start();<br>        //不会释放锁，会一直等待当前线程执行完毕<br>        threadBlocked01.join();<br>        threadBlocked02.start();//线程2等等obj锁 BLOCKED(锁定)<br>        System.out.println(threadBlocked01.getName() + &quot;:&quot; + threadBlocked01.getState());<br>        System.out.println(threadBlocked02.getName() + &quot;:&quot; + threadBlocked02.getState());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>响应</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">1:TERMINATED<br>2:TIMED_WAITING(可能卡在Thread.sleep(4000L);)<br></code></pre></td></tr></table></figure><h5 id="4-4-TIMED-WAITING与RUNNABLE状态转换"><a href="#4-4-TIMED-WAITING与RUNNABLE状态转换" class="headerlink" title="4.4 TIMED_WAITING与RUNNABLE状态转换"></a>4.4 TIMED_WAITING与RUNNABLE状态转换</h5><p>TIMED_WAITING与WAITING状态类似，只是TIMED_WAITING状态等待的时间是指定的。</p><ul><li>Thread.sleep(long)</li></ul><p>使当前线程睡眠指定时间。需要注意这里的“睡眠”只是暂时使线程停止执行，并不会释放锁。时间到后，线程会重新进入RUNNABLE状态。</p><ul><li>Object.wait(long)</li></ul><p>wait(long)方法使线程进入TIMED_WAITING状态。这里的wait(long)方法与无参方法wait()相同的地方是，都可以通过其他线程调用notify()或notifyAll()方法来唤醒。</p><p>不同的地方是，有参方法wait(long)就算其他线程不来唤醒它，经过指定时间long之后它会自动唤醒，拥有去争夺锁的资格。</p><ul><li>Thread.join(long)</li></ul><p>join(long)使当前线程执行指定时间，并且使线程进入TIMED_WAITING状态。</p><h5 id="4-5-线程中断"><a href="#4-5-线程中断" class="headerlink" title="4.5 线程中断"></a>4.5 线程中断</h5><ul><li>Thread.interrupt()：中断线程。这里的中断线程并不会立即停止线程，而是设置线程的中断状态为true（默认是flase）；</li><li>Thread.interrupted()：测试当前线程是否被中断。线程的中断状态受这个方法的影响，意思是调用一次使线程中断状态设置为true，连续调用两次会使得这个线程的中断状态重新转为false；</li><li>Thread.isInterrupted()：测试当前线程是否被中断。与上面方法不同的是调用这个方法并不会影响线程的中断状态。</li></ul><h4 id="第五章-Java线程间的通信"><a href="#第五章-Java线程间的通信" class="headerlink" title="第五章 Java线程间的通信"></a>第五章 Java线程间的通信</h4><p>合理的使用Java多线程可以更好地利用服务器资源。一般来讲，线程内部有自己私有的线程上下文，互不干扰。但是当我们需要多个线程之间相互协作的时候，就需要我们掌握Java线程的通信方式。本文将介绍Java线程之间的几种通信原理。</p><h5 id="5-1-锁与同步"><a href="#5-1-锁与同步" class="headerlink" title="5.1 锁与同步"></a>5.1 锁与同步</h5><ul><li>锁:一个锁同一时间只能被一个线程持有</li><li>同步:线程同步是线程之间按照一定的&#x3D;&#x3D;顺序执行&#x3D;&#x3D;</li></ul><p>无锁版本运行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">/**<br> * @ClassName : ThreadNoneLock<br> * @Description : 无锁版本<br> * @Author : dbin0123<br> * @Date: 2021-03-04 22:42<br> */<br>public class ThreadNoneLock &#123;<br><br>    public static void main(String[] args) &#123;<br>        Thread thread1 = new Thread(() -&gt; &#123;<br>            for (int i = 0; i &lt; 10; i++) &#123;<br>                System.out.println(Thread.currentThread().getName()+&quot;: &quot;+i);<br>            &#125;<br>        &#125;,&quot;线程1&quot;);<br><br><br>        Thread thread2 = new Thread(() -&gt; &#123;<br>            for (int i = 0; i &lt; 10; i++) &#123;<br>                System.out.println(Thread.currentThread().getName()+&quot;: &quot;+i);<br>            &#125;<br>        &#125;,&quot;线程2&quot;);<br><br>        thread1.start();<br>        thread2.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>响应(可能每次不一样)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">线程1: 0<br>线程1: 1<br>线程1: 2<br>线程2: 0<br>线程2: 1<br>线程2: 2<br>线程1: 3<br>线程1: 4<br>线程1: 5<br>线程1: 6<br>线程1: 7<br>线程1: 8<br>线程1: 9<br>线程2: 3<br>线程2: 4<br>线程2: 5<br>线程2: 6<br>线程2: 7<br>线程2: 8<br>线程2: 9<br></code></pre></td></tr></table></figure><p>需要线程1线执行完成后再执行线程2</p><ul><li>synchronized()实现(&#x3D;&#x3D;线程需要不断地去尝试获得锁&#x3D;&#x3D;)<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">/**<br> * @ClassName : ThreadNoneLock<br> * @Description : 无锁版本<br> * @Author : dbin0123<br> * @Date: 2021-03-04 22:42<br> */<br>public class ThreadSync &#123;<br><br>    private static final Object lock = new Object();<br><br>    public static void main(String[] args) throws InterruptedException &#123;<br>        Thread thread1 = new Thread(() -&gt; &#123;<br>            //线程需要不断地去尝试获得锁<br>            synchronized (lock)&#123;<br>                for (int i = 0; i &lt; 10; i++) &#123;<br>                    System.out.println(Thread.currentThread().getName()+&quot;: &quot;+i);<br>                &#125;<br>            &#125;<br>        &#125;,&quot;线程1&quot;);<br><br><br>        Thread thread2 = new Thread(() -&gt; &#123;<br>            //线程需要不断地去尝试获得锁<br>            synchronized (lock)&#123;<br>                for (int i = 0; i &lt; 10; i++) &#123;<br>                    System.out.println(Thread.currentThread().getName()+&quot;: &quot;+i);<br>                &#125;<br>            &#125;<br>        &#125;,&quot;线程2&quot;);<br><br>        thread1.start();<br>        thread2.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>输出<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">线程1: 0<br>线程1: 1<br>线程1: 2<br>线程1: 3<br>线程1: 4<br>线程1: 5<br>线程1: 6<br>线程1: 7<br>线程1: 8<br>线程1: 9<br>线程2: 0<br>线程2: 1<br>线程2: 2<br>线程2: 3<br>线程2: 4<br>线程2: 5<br>线程2: 6<br>线程2: 7<br>线程2: 8<br>线程2: 9<br></code></pre></td></tr></table></figure></li></ul><h5 id="5-2-等待-通知机制"><a href="#5-2-等待-通知机制" class="headerlink" title="5.2 等待&#x2F;通知机制"></a>5.2 等待&#x2F;通知机制</h5><p>Java多线程的等待&#x2F;通知机制是基于Object类的wait()方法和notify(), notifyAll()方法来实现的。</p><ol><li>notify()方法会随机叫醒一个正在等待的线程;</li><li>notifyAll()会叫醒所有正在等待的线程;</li></ol><p>++注意++</p><p>一个锁同一时刻只能被一个线程持有。而假如线程A现在持有了一个锁lock并开始执行，它可以使用lock.wait()让自己进入等待状态。这个时候，lock这个锁是被释放了的。</p><p>这时，线程B获得了lock这个锁并开始执行，它可以在某一时刻，使用lock.notify()，通知之前持有lock锁并进入等待状态的线程A，说“线程A你不用等了，可以往下执行了”,此时线程A的状态应该是:BLOCKED。</p><p>需要注意的是，这个时候线程B并没有释放锁lock，除非线程B这个时候使用lock.wait()释放锁，或者线程B执行结束自行释放锁，线程A才能得到lock锁。</p><p>示例(交替打印相同的数)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">/**<br> * @ClassName : ThreadWaitNotify<br> * @Description : 线程的等待/通知机制(交替打印相同的数)<br> * @Author : dbin0123<br> * @Date: 2021-03-04 22:53<br> */<br>public class ThreadWaitNotify &#123;<br><br>    private static final Object lock = new Object();<br><br>    public static void main(String[] args) throws InterruptedException &#123;<br>        Thread thread1 = new Thread(() -&gt; &#123;<br>            synchronized (lock) &#123;<br>                for (int i = 0; i &lt; 5; i++) &#123;<br>                    try &#123;<br>                        System.out.println(&quot;Thread1: &quot; + i);<br>                        lock.notify();<br>                        lock.wait();<br>                    &#125; catch (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>                lock.notify();<br>            &#125;<br>        &#125;,&quot;线程1&quot;);<br><br><br>        Thread thread2 = new Thread(() -&gt; &#123;<br>            synchronized (lock) &#123;<br>                for (int i = 0; i &lt; 5; i++) &#123;<br>                    try &#123;<br>                        System.out.println(&quot;Thread2: &quot; + i);<br>                        lock.notify();<br>                        lock.wait();<br>                    &#125; catch (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>                lock.notify();<br>            &#125;<br>        &#125;,&quot;线程2&quot;);<br><br>        thread1.start();<br>        thread2.start();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">Thread1: 0<br>Thread2: 0<br>Thread1: 1<br>Thread2: 1<br>Thread1: 2<br>Thread2: 2<br>Thread1: 3<br>Thread2: 3<br>Thread1: 4<br>Thread2: 4<br></code></pre></td></tr></table></figure><h5 id="5-3-信号量"><a href="#5-3-信号量" class="headerlink" title="5.3 信号量"></a>5.3 信号量</h5><p>JDK提供了一个类似于“信号量”功能的类Semaphore。但本文不是要介绍这个类，而是介绍一种基于volatile关键字的自己实现的信号量通信。</p><p><strong>&#x3D;&#x3D;volatile关键字能够保证内存的可见性，如果用volatile关键字声明了一个变量，在一个线程里面改变了这个变量的值，那其它线程是立马可见更改后的值的。&#x3D;&#x3D;</strong></p><p>让线程A输出0，然后线程B输出1，再然后线程A输出2…以此类推。我应该怎样实现呢？</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">/**<br> * @ClassName : ThreadVolatile<br> * @Description : volatile关键字(让线程A输出0，然后线程B输出1，再然后线程A输出2…以此类推)<br> * @Author : dbin0123<br> * @Date: 2021-03-04 23:04<br> */<br>public class ThreadVolatile &#123;<br><br>    private static volatile AtomicInteger num = new AtomicInteger(0);<br><br>    public static void main(String[] args) throws InterruptedException &#123;<br>        Thread thread1 = new Thread(() -&gt; &#123;<br>            for (int i = 0; i &lt; 10; i++) &#123;<br>                if (i % 2 == 0) &#123;<br>                    System.out.println(Thread.currentThread().getName() + &quot;: &quot; + num.getAndIncrement());<br>                &#125;<br>            &#125;<br>        &#125;, &quot;线程1&quot;);<br><br><br>        Thread thread2 = new Thread(() -&gt; &#123;<br>            for (int i = 0; i &lt; 10; i++) &#123;<br>                if (i % 2 == 1) &#123;<br>                    System.out.println(Thread.currentThread().getName() + &quot;: &quot; + num.getAndIncrement());<br>                &#125;<br>            &#125;<br>        &#125;, &quot;线程2&quot;);<br><br>        thread1.start();<br>        thread2.start();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>响应</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">线程1: 0<br>线程2: 1<br>线程1: 2<br>线程2: 3<br>线程1: 4<br>线程2: 5<br>线程1: 6<br>线程2: 7<br>线程1: 8<br>线程2: 9<br></code></pre></td></tr></table></figure><h5 id="5-5-join方法"><a href="#5-5-join方法" class="headerlink" title="5.5 join方法"></a>5.5 join方法</h5><p>使其他线程进入等待状态,是当前线程运行完成!</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">public class ThreadJoin &#123;<br><br>    public static void main(String[] args) throws InterruptedException &#123;<br>        Thread thread = new Thread(() -&gt; &#123;<br>            try &#123;<br>                System.out.println(&quot;我是子线程，我先睡一秒&quot;);<br>                Thread.sleep(1000);<br>                System.out.println(&quot;我是子线程，我睡完了一秒&quot;);<br>            &#125; catch (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;);<br>        thread.start();<br>        thread.join();<br>        System.out.println(&quot;如果不加join方法，我会先被打出来，加了就不一样了&quot;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-6-sleep方法"><a href="#5-6-sleep方法" class="headerlink" title="5.6 sleep方法"></a>5.6 sleep方法</h5><p>sleep方法是Thread类的一个静态方法。它的作用是让当前线程睡眠一段时间。它有这样两个方法：</p><ul><li>Thread.sleep(long)</li><li>Thread.sleep(long, int)</li></ul><p>这里需要强调一下：sleep方法是不会释放当前的锁的，而wait方法会。这也是最常见的一个多线程面试题。</p><p>它们还有这些区别：</p><ol><li>wait可以指定时间，也可以不指定；而sleep必须指定时间。</li><li>wait释放cpu资源，同时释放锁；sleep释放cpu资源，但是不释放锁，所以易死锁。</li><li>wait必须放在同步块或同步方法中，而sleep可以再任意位置</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> java多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年03月06日 《深入浅出 Java 多线程》第二篇 原理片-Java内存模型基础知识</title>
      <link href="/2021/03/06/2021/202103/2021-03-06-java_thread_201/"/>
      <url>/2021/03/06/2021/202103/2021-03-06-java_thread_201/</url>
      
        <content type="html"><![CDATA[<h4 id="Java内存模型基础知识"><a href="#Java内存模型基础知识" class="headerlink" title="Java内存模型基础知识"></a>Java内存模型基础知识</h4><h5 id="并发编程模型的两个关键问题"><a href="#并发编程模型的两个关键问题" class="headerlink" title="并发编程模型的两个关键问题"></a>并发编程模型的两个关键问题</h5><ul><li>线程间如何通信？即：线程之间以何种机制来交换信息</li><li>线程间如何同步？即：线程以何种机制来控制不同线程间操作发生的相对顺序</li></ul><p>有两种并发模型可以解决这两个问题：</p><ul><li>消息传递并发模型</li><li>共享内存并发模型</li></ul><p>这两种模型之间的区别如下表所示：</p><p><img src="http://dbin0123.github.io/images/posts/thread/201/%E4%B8%A4%E7%A7%8D%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B%E7%9A%84%E6%AF%94%E8%BE%83.png" alt="image"></p><p>两种并发模型的比较 **Java中，使用的是<code>共享内存并发模型</code>**。</p><h5 id="Java内存模型的抽象结构"><a href="#Java内存模型的抽象结构" class="headerlink" title="Java内存模型的抽象结构"></a>Java内存模型的抽象结构</h5><h6 id="运行时内存的划分"><a href="#运行时内存的划分" class="headerlink" title="运行时内存的划分"></a>运行时内存的划分</h6><p>对于每一个线程来说，栈都是私有的，而堆是共有的</p><p>也就是说在栈中的变量（局部变量、方法定义参数、异常处理器参数）不会在线程之间共享，也就不会有内存可见性（下文会说到）的问题，也不受内存模型的影响。而在堆中的变量是共享的，本文称为共享变量。</p><p>所以，内存可见性是针对的共享变量。<br><img src="http://dbin0123.github.io/images/posts/thread/201/Java%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA.png" alt="image"></p><h6 id="既然堆是共享的，为什么在堆中会有内存不可见问题？"><a href="#既然堆是共享的，为什么在堆中会有内存不可见问题？" class="headerlink" title="既然堆是共享的，为什么在堆中会有内存不可见问题？"></a>既然堆是共享的，为什么在堆中会有内存不可见问题？</h6><p>这是因为现代计算机为了高效，往往会在高速缓存区中缓存共享变量，因为cpu访问缓存区比访问内存要快得多。</p><blockquote><p>线程之间的共享变量存在主内存中，每个线程都有一个私有的本地内存，存储了该线程以读、写共享变量的副本。本地内存是Java内存模型的一个抽象概念，并不真实存在。它涵盖了缓存、写缓冲区、寄存器等。</p></blockquote><p>Java线程之间的通信由<strong>Java内存模型</strong>（简称JMM）控制，从抽象的角度来说，JMM定义了线程和主内存之间的抽象关系。JMM的抽象示意图如图所示：<br><img src="http://dbin0123.github.io/images/posts/thread/201/JMM%E6%8A%BD%E8%B1%A1%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="image"><br>从图中可以看出：</p><ul><li>所有的共享变量都存在主内存中。</li><li>每个线程都保存了一份该线程使用到的共享变量的副本。</li><li>如果线程A与线程B之间要通信的话，必须经历下面2个步骤： <ul><li>线程A将本地内存A中更新过的共享变量刷新到主内存中去。</li><li>线程B到主内存中去读取线程A之前已经更新过的共享变量。<br><strong>所以，线程A无法直接访问线程B的工作内存，线程间通信必须经过主内存。</strong></li></ul></li></ul><p>注意，根据JMM的规定，<strong>线程对共享变量的所有操作都必须在自己的本地内存中进行，不能直接从主内存中读取。</strong></p><p>所以线程B并不是直接去主内存中读取共享变量的值，而是先在本地内存B中找到这个共享变量，发现这个共享变量已经被更新了，然后本地内存B去主内存中读取这个共享变量的新值，并拷贝到本地内存B中，最后线程B再读取本地内存B中的新值。</p><p>那么怎么知道这个共享变量的被其他线程更新了呢？这就是JMM的功劳了，也是JMM存在的必要性之一。<strong>JMM通过控制主内存与每个线程的本地内存之间的交互，来提供内存可见性保证。</strong></p><blockquote><p>Java中的volatile关键字可以保证多线程操作共享变量的可见性以及禁止指令重排序，synchronized关键字不仅保证可见性，同时也保证了原子性（互斥性）。在更底层，JMM通过内存屏障来实现内存的可见性以及禁止重排序。为了程序员的方便理解，提出了happens-before，它更加的简单易懂，从而避免了程序员为了理解内存可见性而去学习复杂的重排序规则以及这些规则的具体实现方法。这里涉及到的所有内容后面都会有专门的章节介绍。</p></blockquote><blockquote><p>happens-before的意思是前一个操作的结果可以被后续操作获取;</p></blockquote><h6 id="JMM与Java内存区域划分的区别与联系"><a href="#JMM与Java内存区域划分的区别与联系" class="headerlink" title="JMM与Java内存区域划分的区别与联系"></a>JMM与Java内存区域划分的区别与联系</h6><ul><li>区别</li></ul><blockquote><p>两者是不同的概念层次。JMM是抽象的，他是用来描述一组规则，通过这个规则来控制各个变量的访问方式，围绕原子性、有序性、可见性等展开的。而Java运行时内存的划分是具体的，是JVM运行Java程序时，必要的内存划分。</p></blockquote><ul><li>联系</li></ul><blockquote><p>都存在私有数据区域和共享数据区域。一般来说，<strong>JMM中的主内存属于共享数据区域</strong>，<strong>他是包含了堆和方法区</strong>；同样，<strong>JMM中的本地内存属于私有数据区域，包含了程序计数器、本地方法栈、虚拟机栈</strong>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> java多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 内存模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年03月06日 《深入浅出 Java 多线程》第二篇 原理片-重排序与happens-before</title>
      <link href="/2021/03/06/2021/202103/2021-03-06-java_thread_202/"/>
      <url>/2021/03/06/2021/202103/2021-03-06-java_thread_202/</url>
      
        <content type="html"><![CDATA[<h4 id="重排序与happens-before"><a href="#重排序与happens-before" class="headerlink" title="重排序与happens-before"></a>重排序与happens-before</h4><h5 id="什么是重排序？"><a href="#什么是重排序？" class="headerlink" title="什么是重排序？"></a>什么是重排序？</h5><p>计算机在执行程序时，为了提高性能，编译器和处理器常常会对指令做重排。</p><p>为什么指令重排序可以提高性能？</p><p>简单地说，每一个指令都会包含多个步骤，每个步骤可能使用不同的硬件。因此，流水线技术产生了，它的原理是指令1还没有执行完，就可以开始执行指令2，而不用等到指令1执行结束之后再执行指令2，这样就大大提高了效率。</p><p>但是，流水线技术最害怕中断，恢复中断的代价是比较大的，所以我们要想尽办法不让流水线中断。指令重排就是减少中断的一种技术。</p><p>我们分析一下下面这个代码的执行情况：</p><figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">a = b + c;<br>d = e - f ;<br></code></pre></td></tr></table></figure><p>先加载b、c（注意，即有可能先加载b，也有可能先加载c），但是在执行add(b,c)的时候，需要等待b、c装载结束才能继续执行，也就是增加了停顿，那么后面的指令也会依次有停顿,这降低了计算机的执行效率。</p><p>为了减少这个停顿，我们可以先加载e和f,然后再去加载add(b,c),这样做对程序（串行）是没有影响的,但却减少了停顿。既然add(b,c)需要停顿，那还不如去做一些有意义的事情。</p><p>综上所述，指令重排对于提高CPU处理性能十分必要。虽然由此带来了乱序的问题，但是这点牺牲是值得的。</p><ul><li>指令重排一般分为以下三种：</li></ul><ol><li>编译器优化重排</li></ol><blockquote><p>编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序。</p></blockquote><ol start="2"><li>指令并行重排</li></ol><blockquote><p>现代处理器采用了指令级并行技术来将多条指令重叠执行。如果不存在数据依赖性(即后一个执行的语句无需依赖前面执行的语句的结果)，处理器可以改变语句对应的机器指令的执行顺序。</p></blockquote><ol start="3"><li>内存系统重排</li></ol><blockquote><p>由于处理器使用缓存和读写缓存冲区，这使得加载(load)和存储(store)操作看上去可能是在乱序执行，因为三级缓存的存在，导致内存与缓存的数据同步存在时间差。</p></blockquote><p><strong>指令重排可以保证串行语义一致，但是没有义务保证多线程间的语义也一致。所以在多线程下，指令重排序可能会导致一些问题。</strong></p><h5 id="顺序一致性模型与JMM-java内存模型-的保证"><a href="#顺序一致性模型与JMM-java内存模型-的保证" class="headerlink" title="顺序一致性模型与JMM(java内存模型)的保证"></a>顺序一致性模型与JMM(java内存模型)的保证</h5><p>顺序一致性模型是一个<strong>理论参考模型</strong>，内存模型在设计的时候都会以顺序一致性内存模型作为参考。</p><h6 id="数据竞争与顺序一致性"><a href="#数据竞争与顺序一致性" class="headerlink" title="数据竞争与顺序一致性"></a>数据竞争与顺序一致性</h6><p>当程序未正确同步的时候，就可能存在数据竞争。</p><blockquote><p>数据竞争：在一个线程中写一个变量，在另一个线程读同一个变量，并且写和读没有通过同步来排序。</p></blockquote><p>如果程序中包含了数据竞争，那么运行的结果往往充满了不确定性，比如读发生在了写之前，可能就会读到错误的值；如果一个线程程序能够正确同步，那么就不存在数据竞争。</p><p>Java内存模型（JMM）对于正确同步多线程程序的内存一致性做了以下保证：</p><blockquote><p>如果程序是正确同步的，程序的执行将具有顺序一致性。 即程序的执行结果和该程序在顺序一致性模型中执行的结果相同。</p></blockquote><p>这里的同步包括了使用<code>volatile</code>、<code>final</code>、<code>synchronized</code>等关键字来实现多线程下的同步。</p><p>如果程序员没有正确使用<code>volatile</code>、<code>final</code>、<code>synchronized</code>，那么即便是使用了同步（单线程下的同步），JMM也不会有内存可见性的保证，可能会导致你的程序出错，并且具有不可重现性，很难排查。</p><p>所以如何正确使用<code>volatile</code>、<code>final</code>、<code>synchronized</code>，是程序员应该去了解的。后面会有专门的章节介绍这几个关键字的内存语义及使用。</p><h6 id="顺序一致性模型"><a href="#顺序一致性模型" class="headerlink" title="顺序一致性模型"></a>顺序一致性模型</h6><p>顺序一致性内存模型是一个理想化的理论参考模型，它为程序员提供了极强的内存可见性保证。</p><p>顺序一致性模型有两大特性：</p><ul><li><p>一个线程中的所有操作必须按照程序的顺序（即Java代码的顺序）来执行。</p></li><li><p>不管程序是否同步，所有线程都只能看到一个单一的操作执行顺序。即在顺序一致性模型中，<strong>每个操作必须是原子性的，且立刻对所有线程可见。</strong></p></li></ul><p>为了理解这两个特性，我们举个例子，假设有两个线程A和B并发执行，线程A有3个操作，他们在程序中的顺序是A1-&gt;A2-&gt;A3，线程B也有3个操作，B1-&gt;B2-&gt;B3。</p><p>假设正确使用了同步，A线程的3个操作执行后释放锁，B线程获取同一个锁。那么在顺序一致性模型中的执行效果如下所示：</p><p>正确同步图</p><p><img src="http://dbin0123.github.io/images/posts/thread/202/%E6%AD%A3%E7%A1%AE%E5%90%8C%E6%AD%A5.png" alt="image"></p><p>操作的执行整体上有序，并且两个线程都只能看到这个执行顺序。</p><p>假设没有使用同步，那么在顺序一致性模型中的执行效果如下所示：</p><p>没有正确同步图<br><img src="http://dbin0123.github.io/images/posts/thread/202/%E6%B2%A1%E6%9C%89%E6%AD%A3%E7%A1%AE%E5%90%8C%E6%AD%A5.png" alt="image"></p><p>操作的执行整体上无序，但是两个线程都只能看到这个执行顺序。之所以可以得到这个保证，是因为顺序一致性模型中的每个操作必须立即对任意线程可见。</p><p>但是JMM没有这样的保证。</p><p>比如，在当前线程把写过的数据缓存在本地内存中，在没有刷新到主内存之前，这个写操作仅对当前线程可见；从其他线程的角度来观察，这个写操作根本没有被当前线程所执行。只有当前线程把本地内存中写过的数据刷新到主内存之后，这个写操作才对其他线程可见。在这种情况下，当前线程和其他线程看到的执行顺序是不一样的。</p><h6 id="JMM中同步程序的顺序一致性效果"><a href="#JMM中同步程序的顺序一致性效果" class="headerlink" title="JMM中同步程序的顺序一致性效果"></a>JMM中同步程序的顺序一致性效果</h6><p>在顺序一致性模型中，所有操作完全按照程序的顺序串行执行。但是JMM中，临界区内（同步块或同步方法中）的代码可以发生重排序（但不允许临界区内的代码“逃逸”到临界区之外，因为会破坏锁的内存语义）。</p><p>虽然线程A在临界区做了重排序，但是因为锁的特性，线程B无法观察到线程A在临界区的重排序。这种重排序既提高了执行效率，又没有改变程序的执行结果。</p><p>同时，JMM会在退出临界区和进入临界区做特殊的处理，使得在临界区内程序获得与顺序一致性模型相同的内存视图。</p><p><strong>由此可见，JMM的具体实现方针是：在不改变（正确同步的）程序执行结果的前提下，尽量为编译期和处理器的优化打开方便之门。</strong></p><h6 id="JMM中未同步程序的顺序一致性效果"><a href="#JMM中未同步程序的顺序一致性效果" class="headerlink" title="JMM中未同步程序的顺序一致性效果"></a>JMM中未同步程序的顺序一致性效果</h6><p>对于未同步的多线程程序，JMM只提供最小安全性：线程读取到的值，要么是之前某个线程写入的值，要么是默认值，不会无中生有。</p><p>为了实现这个安全性，JVM在堆上分配对象时，首先会对内存空间清零，然后才会在上面分配对象（这两个操作是同步的）。</p><p><strong>JMM没有保证未同步程序的执行结果与该程序在顺序一致性中执行结果一致。因为如果要保证执行结果一致，那么JMM需要禁止大量的优化，对程序的执行性能会产生很大的影响。</strong></p><p>未同步程序在JMM和顺序一致性内存模型中的执行特性有如下差异：</p><ul><li>顺序一致性保证单线程内的操作会按程序的顺序执行；JMM不保证单线程内的操作会按程序的顺序执行。（因为重排序，但是JMM保证单线程下的重排序不影响执行结果）</li><li>顺序一致性模型保证所有线程只能看到一致的操作执行顺序，而JMM不保证所有线程能看到一致的操作执行顺序。（因为JMM不保证所有操作立即可见）</li><li>顺序一致性模型保证对所有的内存读写操作都具有原子性，而<strong>JMM不保证对64位的long型和double型变量的写操作具有原子性。</strong></li></ul><h5 id="happens-before"><a href="#happens-before" class="headerlink" title="happens-before"></a>happens-before</h5><h6 id="什么是happens-before"><a href="#什么是happens-before" class="headerlink" title="什么是happens-before?"></a>什么是happens-before?</h6><p>一方面，程序员需要JMM提供一个强的内存模型来编写代码；另一方面，编译器和处理器希望JMM对它们的束缚越少越好，这样它们就可以最可能多的做优化来提高性能，希望的是一个弱的内存模型。</p><p>JMM考虑了这两种需求，并且找到了平衡点，对编译器和处理器来说，只要不改变程序的执行结果（单线程程序和正确同步了的多线程程序），编译器和处理器怎么优化都行。</p><p>而对于程序员，JMM提供了happens-before规则（JSR-133规范），满足了程序员的需求——简单易懂，并且提供了足够强的内存可见性保证。换言之，程序员只要遵循happens-before规则，那他写的程序就能保证在JMM中具有强的内存可见性。</p><p>JMM使用happens-before的概念来定制两个操作之间的执行顺序。这两个操作可以在一个线程以内，也可以是不同的线程之间。因此，JMM可以通过happens-before关系向程序员提供跨线程的内存可见性保证。</p><p>happens-before关系的定义如下：</p><ol><li>如果一个操作happens-before另一个操作，那么第一个操作的执行结果将对第二个操作可见，而且第一个操作的执行顺序排在第二个操作之前。</li><li>两个操作之间存在happens-before关系，并不意味着Java平台的具体实现必须要按照happens-before关系指定的顺序来执行。如果重排序之后的执行结果，与按happens-before关系来执行的结果一致，那么JMM也允许这样的重排序。<br>happens-before关系本质上和as-if-serial语义是一回事。</li></ol><p>as-if-serial语义保证单线程内重排序后的执行结果和程序代码本身应有的结果是一致的，happens-before关系保证正确同步的多线程程序的执行结果不被重排序改变。</p><p>总之，**<code>如果操作A happens-before操作B，那么操作A在内存上所做的操作对操作B都是可见的，不管它们在不在一个线程。</code>**</p><h6 id="天然的happens-before关系"><a href="#天然的happens-before关系" class="headerlink" title="天然的happens-before关系"></a>天然的happens-before关系</h6><p>在Java中，有以下天然的happens-before关系：</p><ul><li>程序顺序规则：一个线程中的每一个操作，happens-before于该线程中的任意后续操作。</li><li>监视器锁规则：对一个锁的解锁，happens-before于随后对这个锁的加锁。</li><li>volatile变量规则：对一个volatile域的写，happens-before于任意后续对这个volatile域的读。</li><li>传递性：如果A happens-before B，且B happens-before C，那么A happens-before C。</li><li>start规则：如果线程A执行操作ThreadB.start()启动线程B，那么A线程的ThreadB.start（）操作happens-before于线程B中的任意操作、</li><li>join规则：如果线程A执行操作ThreadB.join（）并成功返回，那么线程B中的任意操作happens-before于线程A从ThreadB.join()操作成功返回。<br>举例：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">int a = 1; // A操作<br>int b = 2; // B操作<br>int sum = a + b;// C 操作<br>System.out.println(sum);<br></code></pre></td></tr></table></figure><p>根据以上介绍的happens-before规则，假如只有一个线程，那么不难得出：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">1&gt; A happens-before B<br>2&gt; B happens-before C<br>3&gt; A happens-before C<br></code></pre></td></tr></table></figure><p>注意，真正在执行指令的时候，其实JVM有可能对操作A &amp; B进行重排序，因为无论先执行A还是B，他们都对对方是可见的，并且不影响执行结果。</p><p>如果这里发生了重排序，这在视觉上违背了happens-before原则，但是JMM是允许这样的重排序的。</p><p>所以，我们只关心happens-before规则，不用关心JVM到底是怎样执行的。只要确定操作A happens-before操作B就行了。</p><p>重排序有两类，JMM对这两类重排序有不同的策略：</p><blockquote><p>会改变程序执行结果的重排序，比如 A -&gt; C，JMM要求编译器和处理器都禁止这种重排序。</p></blockquote><blockquote><p>不会改变程序执行结果的重排序，比如 A -&gt; B，JMM对编译器和处理器不做要求，允许这种重排序。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> java多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> happens-before </tag>
            
            <tag> 重排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年03月06日 《深入浅出 Java 多线程》第二篇 原理片-volatile关键字</title>
      <link href="/2021/03/06/2021/202103/2021-03-06-java_thread_203/"/>
      <url>/2021/03/06/2021/202103/2021-03-06-java_thread_203/</url>
      
        <content type="html"><![CDATA[<h4 id="volatile关键字"><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a>volatile关键字</h4><h5 id="回顾及介绍几个基本的概念"><a href="#回顾及介绍几个基本的概念" class="headerlink" title="回顾及介绍几个基本的概念"></a>回顾及介绍几个基本的概念</h5><ul><li>内存可见性<blockquote><p>在Java内存模型那一章我们介绍了JMM有一个主内存，每个线程有自己私有的工作内存，工作内存中保存了一些变量在主内存的拷贝。</p></blockquote></li></ul><p><strong>内存可见性，指的是线程之间的可见性，当一个线程修改了共享变量时，另一个线程可以读取到这个修改后的值。</strong></p><ul><li><p>重排序</p><blockquote><p>为优化程序性能，对原有的指令执行顺序进行优化重新排序。重排序可能发生在多个阶段，比如编译重排序、CPU重排序等。</p></blockquote></li><li><p>happens-before规则</p><blockquote><p>是一个给程序员使用的规则，只要程序员在写代码的时候遵循happens-before规则，JVM就能保证指令在多线程之间的顺序性符合程序员的预期。</p></blockquote></li></ul><h5 id="volatile的内存语义"><a href="#volatile的内存语义" class="headerlink" title="volatile的内存语义"></a>volatile的内存语义</h5><p>在Java中，volatile关键字有特殊的内存语义。volatile主要有以下两个功能：</p><ul><li><strong>保证变量的内存可见性</strong></li><li><strong>禁止volatile变量与普通变量重排序</strong>（JSR133提出，Java 5 开始才有这个“增强的volatile内存语义”）</li></ul><h6 id="内存可见性"><a href="#内存可见性" class="headerlink" title="内存可见性"></a>内存可见性</h6><p>说明代码</p><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> : ThreadVloatile2</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> : Volatile关键字内存可见性</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> : dbin0123</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2021-03-06 23:12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadVloatile2</span> &#123;<br>    <br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writer</span><span class="hljs-params">()</span> &#123;<br>        a = <span class="hljs-number">1</span>; <span class="hljs-comment">// step 1</span><br>        flag = <span class="hljs-literal">true</span>; <span class="hljs-comment">// step 2</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reader</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (flag) &#123; <span class="hljs-comment">// step 3</span><br>            System.out.println(a); <span class="hljs-comment">// step 4</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这段代码里，我们使用volatile关键字修饰了一个boolean类型的变量flag。</p><p>所谓内存可见性，指的是当一个线程对volatile修饰的变量进行写操作（比如step 2）时，JMM会立即把该线程对应的本地内存中的共享变量的值刷新到主内存；当一个线程对volatile修饰的变量进行读操作（比如step 3）时，JMM会把立即该线程对应的本地内存置为无效，从主内存中读取共享变量的值。</p><blockquote><p>在这一点上，volatile与锁具有相同的内存效果，volatile变量的写和锁的释放具有相同的内存语义，volatile变量的读和锁的获取具有相同的内存语义。</p></blockquote><p>假设在时间线上，线程A先执行方法writer方法，线程B后执行reader方法。那必然会有下图：</p><p><img src="http://dbin0123.github.io/images/posts/thread/203/volatile%E5%86%85%E5%AD%98%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="image"></p><p>而如果flag变量没有用volatile修饰，在step 2，线程A的本地内存里面的变量就不会立即更新到主内存，那随后线程B也同样不会去主内存拿最新的值，仍然使用线程B本地内存缓存的变量的值a &#x3D; 0，flag &#x3D; false。</p><h6 id="禁止重排序"><a href="#禁止重排序" class="headerlink" title="禁止重排序"></a>禁止重排序</h6><p>在JSR-133之前的旧的Java内存模型中，是允许volatile变量与普通变量重排序的。那上面的案例中，可能就会被重排序成下列时序来执行：</p><ul><li>线程A写volatile变量，step 2，设置flag为true；</li><li>线程B读同一个volatile，step 3，读取到flag为true；</li><li>线程B读普通变量，step 4，读取到 a &#x3D; 0；</li><li>线程A修改普通变量，step 1，设置 a &#x3D; 1；</li></ul><p>可见，如果volatile变量与普通变量发生了重排序，虽然volatile变量能保证内存可见性，也可能导致普通变量读取错误。</p><p>所以在旧的内存模型中，volatile的写-读就不能与锁的释放-获取具有相同的内存语义了。为了提供一种比锁更轻量级的线程间的通信机制，JSR-133专家组决定增强volatile的内存语义：严格限制编译器和处理器对volatile变量与普通变量的重排序。</p><p>编译器还好说，JVM是怎么还能限制处理器的重排序的呢？它是通过内存屏障来实现的。</p><p>什么是内存屏障？硬件层面，内存屏障分两种：读屏障（Load Barrier）和写屏障（Store Barrier）。内存屏障有两个作用：</p><ol><li>阻止屏障两侧的指令重排序；</li><li>强制把写缓冲区&#x2F;高速缓存中的脏数据等写回主内存，或者让缓存中相应的数据失效。<blockquote><p>注意这里的缓存主要指的是CPU缓存，如L1，L2等</p></blockquote></li></ol><p>编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序。编译器选择了一个比较保守的JMM内存屏障插入策略，这样可以保证在任何处理器平台，任何程序中都能得到正确的volatile内存语义。这个策略是：</p><ul><li>在每个volatile写操作前插入一个StoreStore屏障；</li><li>在每个volatile写操作后插入一个StoreLoad屏障；</li><li>在每个volatile读操作后插入一个LoadLoad屏障；</li><li>在每个volatile读操作后再插入一个LoadStore屏障。<br>大概示意图是这个样子：</li></ul><p><img src="http://dbin0123.github.io/images/posts/thread/203/%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C.png" alt="image"></p><blockquote><p>再逐个解释一下这几个屏障。注：下述Load代表读操作，Store代表写操作</p></blockquote><blockquote><p>LoadLoad屏障：对于这样的语句Load1; LoadLoad; Load2，在Load2及后续读取操作要读取的数据被访问前，保证Load1要读取的数据被读取完毕。</p></blockquote><blockquote><p>StoreStore屏障：对于这样的语句Store1; StoreStore; Store2，在Store2及后续写入操作执行前，这个屏障会吧Store1强制刷新到内存，保证Store1的写入操作对其它处理器可见。</p></blockquote><blockquote><p>LoadStore屏障：对于这样的语句Load1; LoadStore; Store2，在Store2及后续写入操作被刷出前，保证Load1要读取的数据被读取完毕。</p></blockquote><blockquote><p>StoreLoad屏障：对于这样的语句Store1; StoreLoad; Load2，在Load2及后续所有读取操作执行前，保证Store1的写入对所有处理器可见。它的开销是四种屏障中最大的（冲刷写缓冲器，清空无效化队列）。在大多数处理器的实现中，这个屏障是个万能屏障，兼具其它三种内存屏障的功能</p></blockquote><p>对于连续多个volatile变量读或者连续多个volatile变量写，编译器做了一定的优化来提高性能，比如：</p><blockquote><p>第一个volatile读;</p></blockquote><blockquote><p>LoadLoad屏障；</p></blockquote><blockquote><p>第二个volatile读；</p></blockquote><blockquote><p>LoadStore屏障</p></blockquote><p>再介绍一下volatile与普通变量的重排序规则:</p><ol><li>如果第一个操作是volatile读，那无论第二个操作是什么，都不能重排序；</li><li>如果第二个操作是volatile写，那无论第一个操作是什么，都不能重排序；</li><li>如果第一个操作是volatile写，第二个操作是volatile读，那不能重排序。</li></ol><p>举个例子，我们在案例中step 1，是普通变量的写，step 2是volatile变量的写，那符合第2个规则，这两个steps不能重排序。而step 3是volatile变量读，step 4是普通变量读，符合第1个规则，同样不能重排序。</p><p>但如果是下列情况：第一个操作是普通变量读，第二个操作是volatile变量读，那是可以重排序的：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">// 声明变量<br>int a = 0; // 声明普通变量<br>volatile boolean flag = false; // 声明volatile变量<br><br>// 以下两个变量的读操作是可以重排序的<br>int i = a; // 普通变量读<br>boolean j = flag; // volatile变量读<br></code></pre></td></tr></table></figure><h5 id="volatile的用途"><a href="#volatile的用途" class="headerlink" title="volatile的用途"></a>volatile的用途</h5><p>从volatile的内存语义上来看，volatile可以保证内存可见性且禁止重排序。</p><p>在保证内存可见性这一点上，volatile有着与锁相同的内存语义，所以可以作为一个“轻量级”的锁来使用。但由于volatile仅仅保证对单个volatile变量的读&#x2F;写具有原子性，而锁可以保证整个临界区代码的执行具有原子性。所以在功能上，锁比volatile更强大；在性能上，volatile更有优势。</p><p>在禁止重排序这一点上，volatile也是非常有用的。比如我们熟悉的单例模式，其中有一种实现方式是“双重锁检查”，比如这样的代码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">public class Singleton &#123;<br><br>    private static Singleton instance; // 不使用volatile关键字<br><br>    // 双重锁检验<br>    public static Singleton getInstance() &#123;<br>        if (instance == null) &#123; // 第7行<br>            synchronized (Singleton.class) &#123;<br>                if (instance == null) &#123;<br>                    instance = new Singleton(); // 第10行<br>                &#125;<br>            &#125;<br>        &#125;<br>        return instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果这里的变量声明不使用volatile关键字，是可能会发生错误的。它可能会被重排序：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">instance = new Singleton(); // 第10行<br><br>// 可以分解为以下三个步骤<br>1 memory=allocate();// 分配内存 相当于c的malloc<br>2 ctorInstanc(memory) //初始化对象<br>3 s=memory //设置s指向刚分配的地址<br><br>// 上述三个步骤可能会被重排序为 1-3-2，也就是：<br>1 memory=allocate();// 分配内存 相当于c的malloc<br>3 s=memory //设置s指向刚分配的地址<br>2 ctorInstanc(memory) //初始化对象<br><br></code></pre></td></tr></table></figure><p>而一旦假设发生了这样的重排序，比如线程A在第10行执行了步骤1和步骤3，但是步骤2还没有执行完。这个时候另一个线程B执行到了第7行，它会判定instance不为空，然后直接返回了一个未初始化完成的instance！</p><p>所以JSR-133对volatile做了增强后，volatile的禁止重排序功能还是非常有用的。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> java多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> volatile </tag>
            
            <tag> volatile关键字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021年03月05日 打开文件数（Too many open files)</title>
      <link href="/2021/03/05/2021/202103/2021-03-05-too_many_open_files/"/>
      <url>/2021/03/05/2021/202103/2021-03-05-too_many_open_files/</url>
      
        <content type="html"><![CDATA[<p>转:<a href="https://blog.csdn.net/c814276009/article/details/84891109">https://blog.csdn.net/c814276009/article/details/84891109</a></p><pre><code>Linux系统下Java程序抛Too many open files异常，常见于高并发访问文件系统、多线程网络连接等场景。</code></pre><p>程序打开的文件数过多，这里的file包括经常访问的文件、网络通信连接（socket）等等，有时也叫句柄。这个错误也可以叫做句柄数超过系统限制数。</p><h3 id="详解："><a href="#详解：" class="headerlink" title="详解："></a>详解：</h3><ul><li>file entry<br>  linux系统需要记录当前访问file的name、location、access、authority等信息。</li><li>open files table：<br>以数组的形式存储file entry</li><li>file descriptor table（文件描述符）：<br>作为进程到open files table的指针，也就是open files table的下标索引。将每个进程与它访问的文件关联起来。<br>每个进程中都有一个file descriptor table管理当前进程所访问（open或create）的所有文件。<blockquote><p>file descriptor table（文件描述符）关联着open files table中文件的file entry。</p></blockquote></li></ul><p>Linux系统配置open files table的文件限制，如果超过配置值，就会拒绝其他文件操作请求。并抛出Too many open files异常。限制分为系统和用户之分。</p><h3 id="系统级："><a href="#系统级：" class="headerlink" title="系统级："></a>系统级：</h3><p>系统级设置对所有用户有效。查看分为两种方式：</p><ul><li>1:cat &#x2F;proc&#x2F;sys&#x2F;fs&#x2F;file-max  </li><li>2:sysctl -a 查看结果中fs.file-max这项的配置数量</li><li>3:增加配置数量:vim &#x2F;etc&#x2F;sysctl.conf文件，配置fs.file-max属性，如果属性不存在就添加。 </li><li>立即生效： sysctl -p</li></ul><h3 id="用户级："><a href="#用户级：" class="headerlink" title="用户级："></a>用户级：</h3><p>Linux限制每个登录用户的可连接文件数。</p><ul><li>查询限制数<blockquote><p>ulimit -n</p></blockquote></li><li>设置限制数：<blockquote><p>ulimit -n &lt;setting number&gt;</p></blockquote></li></ul><p>对于文件描述符增加的比例，资料推荐是以2的幂次为参考。如当前文件描述符数量是1024，可增加到2048，如果不够，可设置到4096，依此类推。 </p><h3 id="原因分析以及排查："><a href="#原因分析以及排查：" class="headerlink" title="原因分析以及排查："></a>原因分析以及排查：</h3><p>在出现Too many open files问题后，最大的可能是打开的文件或是socket没有正常关闭。为了定位问题是否由Java进程引起，通过Java进程号查看当前进程占用文件描述符情况： </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">lsof -p $java_pid 每个文件描述符的具体属性  (获取PID:ps -ef|grep xxxx)<br>lsof -p $java_pid | wc -l 当前Java进程file descriptor table中FD的总量<br></code></pre></td></tr></table></figure><h3 id="检查程序问题："><a href="#检查程序问题：" class="headerlink" title="检查程序问题："></a>检查程序问题：</h3><p>如果你对你的程序有一定的解的话，应该对程序打开文件数(链接数)上限有一定的估算，如果感觉数字异常，请使用第一步的lsof -p 进程id &gt; openfiles.log命令，获得当前占用句柄的全部详情进行分析，</p><ol><li>打开的这些文件是不是都是必要的？</li><li>定位到打开这些文件的代码</li><li>是否程序操作了文件写入，但是没有进行正常关闭</li><li>是否程序进行了通讯，但是没有正常关闭(也就是没有超时结束的机制)</li></ol><p> </p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
